
SV_PotIA_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a80  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003d18  08003d18  00004d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d4c  08003d4c  0000502c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d4c  08003d4c  00004d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d54  08003d54  0000502c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d54  08003d54  00004d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003d58  08003d58  00004d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  24000000  08003d5c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2400002c  08003d88  0000502c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240000f8  08003d88  000050f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101d5  00000000  00000000  0000505a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020df  00000000  00000000  0001522f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00017310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c0  00000000  00000000  00017e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003989b  00000000  00000000  00018748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001069a  00000000  00000000  00051fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017ae3a  00000000  00000000  0006267d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001dd4b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e50  00000000  00000000  001dd4fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001e034c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400002c 	.word	0x2400002c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003d00 	.word	0x08003d00

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000030 	.word	0x24000030
 80002d4:	08003d00 	.word	0x08003d00

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08a      	sub	sp, #40	@ 0x28
 80006f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070a:	4b49      	ldr	r3, [pc, #292]	@ (8000830 <MX_GPIO_Init+0x13c>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000710:	4a47      	ldr	r2, [pc, #284]	@ (8000830 <MX_GPIO_Init+0x13c>)
 8000712:	f043 0304 	orr.w	r3, r3, #4
 8000716:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800071a:	4b45      	ldr	r3, [pc, #276]	@ (8000830 <MX_GPIO_Init+0x13c>)
 800071c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000720:	f003 0304 	and.w	r3, r3, #4
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000728:	4b41      	ldr	r3, [pc, #260]	@ (8000830 <MX_GPIO_Init+0x13c>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800072e:	4a40      	ldr	r2, [pc, #256]	@ (8000830 <MX_GPIO_Init+0x13c>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000738:	4b3d      	ldr	r3, [pc, #244]	@ (8000830 <MX_GPIO_Init+0x13c>)
 800073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	4b3a      	ldr	r3, [pc, #232]	@ (8000830 <MX_GPIO_Init+0x13c>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800074c:	4a38      	ldr	r2, [pc, #224]	@ (8000830 <MX_GPIO_Init+0x13c>)
 800074e:	f043 0302 	orr.w	r3, r3, #2
 8000752:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000756:	4b36      	ldr	r3, [pc, #216]	@ (8000830 <MX_GPIO_Init+0x13c>)
 8000758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800075c:	f003 0302 	and.w	r3, r3, #2
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000764:	4b32      	ldr	r3, [pc, #200]	@ (8000830 <MX_GPIO_Init+0x13c>)
 8000766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800076a:	4a31      	ldr	r2, [pc, #196]	@ (8000830 <MX_GPIO_Init+0x13c>)
 800076c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000770:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000774:	4b2e      	ldr	r3, [pc, #184]	@ (8000830 <MX_GPIO_Init+0x13c>)
 8000776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800077a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000782:	2332      	movs	r3, #50	@ 0x32
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	2302      	movs	r3, #2
 8000788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000792:	230b      	movs	r3, #11
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4619      	mov	r1, r3
 800079c:	4825      	ldr	r0, [pc, #148]	@ (8000834 <MX_GPIO_Init+0x140>)
 800079e:	f000 fdab 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80007a2:	2386      	movs	r3, #134	@ 0x86
 80007a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b2:	230b      	movs	r3, #11
 80007b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	481e      	ldr	r0, [pc, #120]	@ (8000838 <MX_GPIO_Init+0x144>)
 80007be:	f000 fd9b 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d4:	230b      	movs	r3, #11
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	4817      	ldr	r0, [pc, #92]	@ (800083c <MX_GPIO_Init+0x148>)
 80007e0:	f000 fd8a 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80007e4:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80007e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80007f6:	230a      	movs	r3, #10
 80007f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	480d      	ldr	r0, [pc, #52]	@ (8000838 <MX_GPIO_Init+0x144>)
 8000802:	f000 fd79 	bl	80012f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000806:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080c:	2302      	movs	r3, #2
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000818:	230b      	movs	r3, #11
 800081a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800081c:	f107 0314 	add.w	r3, r7, #20
 8000820:	4619      	mov	r1, r3
 8000822:	4807      	ldr	r0, [pc, #28]	@ (8000840 <MX_GPIO_Init+0x14c>)
 8000824:	f000 fd68 	bl	80012f8 <HAL_GPIO_Init>

}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	@ 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	58024400 	.word	0x58024400
 8000834:	58020800 	.word	0x58020800
 8000838:	58020000 	.word	0x58020000
 800083c:	58020400 	.word	0x58020400
 8000840:	58021800 	.word	0x58021800

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800084a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800084e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000850:	bf00      	nop
 8000852:	4b34      	ldr	r3, [pc, #208]	@ (8000924 <main+0xe0>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800085a:	2b00      	cmp	r3, #0
 800085c:	d004      	beq.n	8000868 <main+0x24>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	1e5a      	subs	r2, r3, #1
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	dcf4      	bgt.n	8000852 <main+0xe>
  if ( timeout < 0 )
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	da01      	bge.n	8000872 <main+0x2e>
  {
  Error_Handler();
 800086e:	f000 f8c9 	bl	8000a04 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000872:	f000 fb0f 	bl	8000e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000876:	f000 f859 	bl	800092c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800087a:	4b2a      	ldr	r3, [pc, #168]	@ (8000924 <main+0xe0>)
 800087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000880:	4a28      	ldr	r2, [pc, #160]	@ (8000924 <main+0xe0>)
 8000882:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000886:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800088a:	4b26      	ldr	r3, [pc, #152]	@ (8000924 <main+0xe0>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000898:	2000      	movs	r0, #0
 800089a:	f000 fef7 	bl	800168c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800089e:	2100      	movs	r1, #0
 80008a0:	2000      	movs	r0, #0
 80008a2:	f000 ff0d 	bl	80016c0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80008a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008aa:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008ac:	bf00      	nop
 80008ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000924 <main+0xe0>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d104      	bne.n	80008c4 <main+0x80>
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	1e5a      	subs	r2, r3, #1
 80008be:	607a      	str	r2, [r7, #4]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	dcf4      	bgt.n	80008ae <main+0x6a>
if ( timeout < 0 )
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	da01      	bge.n	80008ce <main+0x8a>
{
Error_Handler();
 80008ca:	f000 f89b 	bl	8000a04 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ce:	f7ff ff11 	bl	80006f4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 f916 	bl	8000b04 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80008d8:	2001      	movs	r0, #1
 80008da:	f000 f913 	bl	8000b04 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80008de:	2002      	movs	r0, #2
 80008e0:	f000 f910 	bl	8000b04 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80008e4:	2101      	movs	r1, #1
 80008e6:	2000      	movs	r0, #0
 80008e8:	f000 f982 	bl	8000bf0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80008ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <main+0xe4>)
 80008ee:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008f2:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <main+0xe4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <main+0xe4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000900:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <main+0xe4>)
 8000902:	2200      	movs	r2, #0
 8000904:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000906:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <main+0xe4>)
 8000908:	2200      	movs	r2, #0
 800090a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800090c:	4906      	ldr	r1, [pc, #24]	@ (8000928 <main+0xe4>)
 800090e:	2000      	movs	r0, #0
 8000910:	f000 f9fe 	bl	8000d10 <BSP_COM_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d002      	beq.n	8000920 <main+0xdc>
  {
    Error_Handler();
 800091a:	f000 f873 	bl	8000a04 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800091e:	bf00      	nop
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <main+0xdc>
 8000924:	58024400 	.word	0x58024400
 8000928:	24000048 	.word	0x24000048

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b09c      	sub	sp, #112	@ 0x70
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000936:	224c      	movs	r2, #76	@ 0x4c
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f003 f9b4 	bl	8003ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2220      	movs	r2, #32
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f003 f9ae 	bl	8003ca8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800094c:	2004      	movs	r0, #4
 800094e:	f000 fecb 	bl	80016e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b29      	ldr	r3, [pc, #164]	@ (80009fc <SystemClock_Config+0xd0>)
 8000958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800095a:	4a28      	ldr	r2, [pc, #160]	@ (80009fc <SystemClock_Config+0xd0>)
 800095c:	f023 0301 	bic.w	r3, r3, #1
 8000960:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000962:	4b26      	ldr	r3, [pc, #152]	@ (80009fc <SystemClock_Config+0xd0>)
 8000964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	4b24      	ldr	r3, [pc, #144]	@ (8000a00 <SystemClock_Config+0xd4>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000974:	4a22      	ldr	r2, [pc, #136]	@ (8000a00 <SystemClock_Config+0xd4>)
 8000976:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b20      	ldr	r3, [pc, #128]	@ (8000a00 <SystemClock_Config+0xd4>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000988:	bf00      	nop
 800098a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a00 <SystemClock_Config+0xd4>)
 800098c:	699b      	ldr	r3, [r3, #24]
 800098e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000992:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000996:	d1f8      	bne.n	800098a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000998:	2302      	movs	r3, #2
 800099a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800099c:	2301      	movs	r3, #1
 800099e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a0:	2340      	movs	r3, #64	@ 0x40
 80009a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009a4:	2300      	movs	r3, #0
 80009a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 fef5 	bl	800179c <HAL_RCC_OscConfig>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80009b8:	f000 f824 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009bc:	233f      	movs	r3, #63	@ 0x3f
 80009be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009d0:	2340      	movs	r3, #64	@ 0x40
 80009d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2101      	movs	r1, #1
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 fb34 	bl	8002050 <HAL_RCC_ClockConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009ee:	f000 f809 	bl	8000a04 <Error_Handler>
  }
}
 80009f2:	bf00      	nop
 80009f4:	3770      	adds	r7, #112	@ 0x70
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	58000400 	.word	0x58000400
 8000a00:	58024800 	.word	0x58024800

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <Error_Handler+0x8>

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b0a      	ldr	r3, [pc, #40]	@ (8000a40 <HAL_MspInit+0x30>)
 8000a18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a1c:	4a08      	ldr	r2, [pc, #32]	@ (8000a40 <HAL_MspInit+0x30>)
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <HAL_MspInit+0x30>)
 8000a28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a2c:	f003 0302 	and.w	r3, r3, #2
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	58024400 	.word	0x58024400

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <NMI_Handler+0x4>

08000a4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <BusFault_Handler+0x4>

08000a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <UsageFault_Handler+0x4>

08000a6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9a:	f000 fa6d 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f000 f914 	bl	8000cd4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ab0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ae8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ab4:	f7ff fd88 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab8:	480c      	ldr	r0, [pc, #48]	@ (8000aec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aba:	490d      	ldr	r1, [pc, #52]	@ (8000af0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000abc:	4a0d      	ldr	r2, [pc, #52]	@ (8000af4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac0:	e002      	b.n	8000ac8 <LoopCopyDataInit>

08000ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac6:	3304      	adds	r3, #4

08000ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000acc:	d3f9      	bcc.n	8000ac2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ace:	4a0a      	ldr	r2, [pc, #40]	@ (8000af8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8000afc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad4:	e001      	b.n	8000ada <LoopFillZerobss>

08000ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad8:	3204      	adds	r2, #4

08000ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000adc:	d3fb      	bcc.n	8000ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ade:	f003 f8eb 	bl	8003cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ae2:	f7ff feaf 	bl	8000844 <main>
  bx  lr
 8000ae6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ae8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000aec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000af0:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 8000af4:	08003d5c 	.word	0x08003d5c
  ldr r2, =_sbss
 8000af8:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 8000afc:	240000f8 	.word	0x240000f8

08000b00 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b00:	e7fe      	b.n	8000b00 <ADC3_IRQHandler>
	...

08000b04 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08c      	sub	sp, #48	@ 0x30
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d009      	beq.n	8000b2c <BSP_LED_Init+0x28>
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d006      	beq.n	8000b2c <BSP_LED_Init+0x28>
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d003      	beq.n	8000b2c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000b24:	f06f 0301 	mvn.w	r3, #1
 8000b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b2a:	e055      	b.n	8000bd8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d10f      	bne.n	8000b52 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000b32:	4b2c      	ldr	r3, [pc, #176]	@ (8000be4 <BSP_LED_Init+0xe0>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b38:	4a2a      	ldr	r2, [pc, #168]	@ (8000be4 <BSP_LED_Init+0xe0>)
 8000b3a:	f043 0302 	orr.w	r3, r3, #2
 8000b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b42:	4b28      	ldr	r3, [pc, #160]	@ (8000be4 <BSP_LED_Init+0xe0>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	617b      	str	r3, [r7, #20]
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	e021      	b.n	8000b96 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d10f      	bne.n	8000b78 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000b58:	4b22      	ldr	r3, [pc, #136]	@ (8000be4 <BSP_LED_Init+0xe0>)
 8000b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5e:	4a21      	ldr	r2, [pc, #132]	@ (8000be4 <BSP_LED_Init+0xe0>)
 8000b60:	f043 0310 	orr.w	r3, r3, #16
 8000b64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b68:	4b1e      	ldr	r3, [pc, #120]	@ (8000be4 <BSP_LED_Init+0xe0>)
 8000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6e:	f003 0310 	and.w	r3, r3, #16
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	e00e      	b.n	8000b96 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000b78:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <BSP_LED_Init+0xe0>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7e:	4a19      	ldr	r2, [pc, #100]	@ (8000be4 <BSP_LED_Init+0xe0>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b88:	4b16      	ldr	r3, [pc, #88]	@ (8000be4 <BSP_LED_Init+0xe0>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	4a13      	ldr	r2, [pc, #76]	@ (8000be8 <BSP_LED_Init+0xe4>)
 8000b9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b9e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	4a0f      	ldr	r2, [pc, #60]	@ (8000bec <BSP_LED_Init+0xe8>)
 8000bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb4:	f107 0218 	add.w	r2, r7, #24
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 fb9c 	bl	80012f8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bec <BSP_LED_Init+0xe8>)
 8000bc4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	4a07      	ldr	r2, [pc, #28]	@ (8000be8 <BSP_LED_Init+0xe4>)
 8000bcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	f000 fd40 	bl	8001658 <HAL_GPIO_WritePin>
  }

  return ret;
 8000bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3730      	adds	r7, #48	@ 0x30
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	58024400 	.word	0x58024400
 8000be8:	08003d28 	.word	0x08003d28
 8000bec:	2400000c 	.word	0x2400000c

08000bf0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b088      	sub	sp, #32
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	460a      	mov	r2, r1
 8000bfa:	71fb      	strb	r3, [r7, #7]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000c00:	4b2e      	ldr	r3, [pc, #184]	@ (8000cbc <BSP_PB_Init+0xcc>)
 8000c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c06:	4a2d      	ldr	r2, [pc, #180]	@ (8000cbc <BSP_PB_Init+0xcc>)
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c10:	4b2a      	ldr	r3, [pc, #168]	@ (8000cbc <BSP_PB_Init+0xcc>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000c1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c22:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000c24:	2302      	movs	r3, #2
 8000c26:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000c2c:	79bb      	ldrb	r3, [r7, #6]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d10c      	bne.n	8000c4c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	4a21      	ldr	r2, [pc, #132]	@ (8000cc0 <BSP_PB_Init+0xd0>)
 8000c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c3e:	f107 020c 	add.w	r2, r7, #12
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 fb57 	bl	80012f8 <HAL_GPIO_Init>
 8000c4a:	e031      	b.n	8000cb0 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000c4c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c50:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	4a1a      	ldr	r2, [pc, #104]	@ (8000cc0 <BSP_PB_Init+0xd0>)
 8000c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5a:	f107 020c 	add.w	r2, r7, #12
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 fb49 	bl	80012f8 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	4a16      	ldr	r2, [pc, #88]	@ (8000cc4 <BSP_PB_Init+0xd4>)
 8000c6c:	441a      	add	r2, r3
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	4915      	ldr	r1, [pc, #84]	@ (8000cc8 <BSP_PB_Init+0xd8>)
 8000c72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c76:	4619      	mov	r1, r3
 8000c78:	4610      	mov	r0, r2
 8000c7a:	f000 faec 	bl	8001256 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	4a10      	ldr	r2, [pc, #64]	@ (8000cc4 <BSP_PB_Init+0xd4>)
 8000c84:	1898      	adds	r0, r3, r2
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	4a10      	ldr	r2, [pc, #64]	@ (8000ccc <BSP_PB_Init+0xdc>)
 8000c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	2100      	movs	r1, #0
 8000c92:	f000 fac1 	bl	8001218 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000c96:	2028      	movs	r0, #40	@ 0x28
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd0 <BSP_PB_Init+0xe0>)
 8000c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f000 fa6f 	bl	8001186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000ca8:	2328      	movs	r3, #40	@ 0x28
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 fa85 	bl	80011ba <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3720      	adds	r7, #32
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	58024400 	.word	0x58024400
 8000cc0:	24000018 	.word	0x24000018
 8000cc4:	24000058 	.word	0x24000058
 8000cc8:	08003d30 	.word	0x08003d30
 8000ccc:	2400001c 	.word	0x2400001c
 8000cd0:	24000020 	.word	0x24000020

08000cd4 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000cde:	79fb      	ldrb	r3, [r7, #7]
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	4a04      	ldr	r2, [pc, #16]	@ (8000cf4 <BSP_PB_IRQHandler+0x20>)
 8000ce4:	4413      	add	r3, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 faca 	bl	8001280 <HAL_EXTI_IRQHandler>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	24000058 	.word	0x24000058

08000cf8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
	...

08000d10 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000d26:	f06f 0301 	mvn.w	r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	e018      	b.n	8000d60 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	2294      	movs	r2, #148	@ 0x94
 8000d32:	fb02 f303 	mul.w	r3, r2, r3
 8000d36:	4a0d      	ldr	r2, [pc, #52]	@ (8000d6c <BSP_COM_Init+0x5c>)
 8000d38:	4413      	add	r3, r2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f852 	bl	8000de4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	2294      	movs	r2, #148	@ 0x94
 8000d44:	fb02 f303 	mul.w	r3, r2, r3
 8000d48:	4a08      	ldr	r2, [pc, #32]	@ (8000d6c <BSP_COM_Init+0x5c>)
 8000d4a:	4413      	add	r3, r2
 8000d4c:	6839      	ldr	r1, [r7, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f80e 	bl	8000d70 <MX_USART3_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d002      	beq.n	8000d60 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000d5a:	f06f 0303 	mvn.w	r3, #3
 8000d5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000d60:	68fb      	ldr	r3, [r7, #12]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	24000060 	.word	0x24000060

08000d70 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000d7a:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <MX_USART3_Init+0x60>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	220c      	movs	r2, #12
 8000d8e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	895b      	ldrh	r3, [r3, #10]
 8000d94:	461a      	mov	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	891b      	ldrh	r3, [r3, #8]
 8000da6:	461a      	mov	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	899b      	ldrh	r3, [r3, #12]
 8000db0:	461a      	mov	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000dbc:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f001 ff90 	bl	8002ce4 <HAL_UART_Init>
 8000dc4:	4603      	mov	r3, r0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	24000008 	.word	0x24000008

08000dd4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000dd8:	2000      	movs	r0, #0
 8000dda:	f7ff ff8d 	bl	8000cf8 <BSP_PB_Callback>
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	@ 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000dec:	4b27      	ldr	r3, [pc, #156]	@ (8000e8c <COM1_MspInit+0xa8>)
 8000dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df2:	4a26      	ldr	r2, [pc, #152]	@ (8000e8c <COM1_MspInit+0xa8>)
 8000df4:	f043 0308 	orr.w	r3, r3, #8
 8000df8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dfc:	4b23      	ldr	r3, [pc, #140]	@ (8000e8c <COM1_MspInit+0xa8>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000e0a:	4b20      	ldr	r3, [pc, #128]	@ (8000e8c <COM1_MspInit+0xa8>)
 8000e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e10:	4a1e      	ldr	r2, [pc, #120]	@ (8000e8c <COM1_MspInit+0xa8>)
 8000e12:	f043 0308 	orr.w	r3, r3, #8
 8000e16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e8c <COM1_MspInit+0xa8>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e20:	f003 0308 	and.w	r3, r3, #8
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000e28:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <COM1_MspInit+0xa8>)
 8000e2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e2e:	4a17      	ldr	r2, [pc, #92]	@ (8000e8c <COM1_MspInit+0xa8>)
 8000e30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e34:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e38:	4b14      	ldr	r3, [pc, #80]	@ (8000e8c <COM1_MspInit+0xa8>)
 8000e3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8000e46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e4a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e50:	2302      	movs	r3, #2
 8000e52:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000e58:	2307      	movs	r3, #7
 8000e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	480b      	ldr	r0, [pc, #44]	@ (8000e90 <COM1_MspInit+0xac>)
 8000e64:	f000 fa48 	bl	80012f8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000e68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e6c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000e72:	2307      	movs	r3, #7
 8000e74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4804      	ldr	r0, [pc, #16]	@ (8000e90 <COM1_MspInit+0xac>)
 8000e7e:	f000 fa3b 	bl	80012f8 <HAL_GPIO_Init>
}
 8000e82:	bf00      	nop
 8000e84:	3728      	adds	r7, #40	@ 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	58024400 	.word	0x58024400
 8000e90:	58020c00 	.word	0x58020c00

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e9a:	2003      	movs	r0, #3
 8000e9c:	f000 f968 	bl	8001170 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ea0:	f001 fa8c 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	4b15      	ldr	r3, [pc, #84]	@ (8000efc <HAL_Init+0x68>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	0a1b      	lsrs	r3, r3, #8
 8000eac:	f003 030f 	and.w	r3, r3, #15
 8000eb0:	4913      	ldr	r1, [pc, #76]	@ (8000f00 <HAL_Init+0x6c>)
 8000eb2:	5ccb      	ldrb	r3, [r1, r3]
 8000eb4:	f003 031f 	and.w	r3, r3, #31
 8000eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ebc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8000efc <HAL_Init+0x68>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f00 <HAL_Init+0x6c>)
 8000ec8:	5cd3      	ldrb	r3, [r2, r3]
 8000eca:	f003 031f 	and.w	r3, r3, #31
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8000f04 <HAL_Init+0x70>)
 8000ed6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8000f08 <HAL_Init+0x74>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f000 f814 	bl	8000f0c <HAL_InitTick>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e002      	b.n	8000ef4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000eee:	f7ff fd8f 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	58024400 	.word	0x58024400
 8000f00:	08003d18 	.word	0x08003d18
 8000f04:	24000004 	.word	0x24000004
 8000f08:	24000000 	.word	0x24000000

08000f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f14:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <HAL_InitTick+0x60>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d101      	bne.n	8000f20 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e021      	b.n	8000f64 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f20:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <HAL_InitTick+0x64>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <HAL_InitTick+0x60>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f94d 	bl	80011d6 <HAL_SYSTICK_Config>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00e      	b.n	8000f64 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	d80a      	bhi.n	8000f62 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f000 f917 	bl	8001186 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f58:	4a06      	ldr	r2, [pc, #24]	@ (8000f74 <HAL_InitTick+0x68>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e000      	b.n	8000f64 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	24000028 	.word	0x24000028
 8000f70:	24000000 	.word	0x24000000
 8000f74:	24000024 	.word	0x24000024

08000f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	@ (8000f98 <HAL_IncTick+0x20>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <HAL_IncTick+0x24>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a04      	ldr	r2, [pc, #16]	@ (8000f9c <HAL_IncTick+0x24>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	24000028 	.word	0x24000028
 8000f9c:	240000f4 	.word	0x240000f4

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	@ (8000fb4 <HAL_GetTick+0x14>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	240000f4 	.word	0x240000f4

08000fb8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fbc:	4b03      	ldr	r3, [pc, #12]	@ (8000fcc <HAL_GetREVID+0x14>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	0c1b      	lsrs	r3, r3, #16
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	5c001000 	.word	0x5c001000

08000fd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <__NVIC_SetPriorityGrouping+0x40>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fec:	4013      	ands	r3, r2
 8000fee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <__NVIC_SetPriorityGrouping+0x40>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00
 8001014:	05fa0000 	.word	0x05fa0000

08001018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800101c:	4b04      	ldr	r3, [pc, #16]	@ (8001030 <__NVIC_GetPriorityGrouping+0x18>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	0a1b      	lsrs	r3, r3, #8
 8001022:	f003 0307 	and.w	r3, r3, #7
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800103e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001042:	2b00      	cmp	r3, #0
 8001044:	db0b      	blt.n	800105e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001046:	88fb      	ldrh	r3, [r7, #6]
 8001048:	f003 021f 	and.w	r2, r3, #31
 800104c:	4907      	ldr	r1, [pc, #28]	@ (800106c <__NVIC_EnableIRQ+0x38>)
 800104e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001052:	095b      	lsrs	r3, r3, #5
 8001054:	2001      	movs	r0, #1
 8001056:	fa00 f202 	lsl.w	r2, r0, r2
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e100 	.word	0xe000e100

08001070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	6039      	str	r1, [r7, #0]
 800107a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800107c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001080:	2b00      	cmp	r3, #0
 8001082:	db0a      	blt.n	800109a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	b2da      	uxtb	r2, r3
 8001088:	490c      	ldr	r1, [pc, #48]	@ (80010bc <__NVIC_SetPriority+0x4c>)
 800108a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800108e:	0112      	lsls	r2, r2, #4
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	440b      	add	r3, r1
 8001094:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001098:	e00a      	b.n	80010b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4908      	ldr	r1, [pc, #32]	@ (80010c0 <__NVIC_SetPriority+0x50>)
 80010a0:	88fb      	ldrh	r3, [r7, #6]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	3b04      	subs	r3, #4
 80010a8:	0112      	lsls	r2, r2, #4
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	440b      	add	r3, r1
 80010ae:	761a      	strb	r2, [r3, #24]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b089      	sub	sp, #36	@ 0x24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	f1c3 0307 	rsb	r3, r3, #7
 80010de:	2b04      	cmp	r3, #4
 80010e0:	bf28      	it	cs
 80010e2:	2304      	movcs	r3, #4
 80010e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3304      	adds	r3, #4
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d902      	bls.n	80010f4 <NVIC_EncodePriority+0x30>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3b03      	subs	r3, #3
 80010f2:	e000      	b.n	80010f6 <NVIC_EncodePriority+0x32>
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43da      	mvns	r2, r3
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	401a      	ands	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800110c:	f04f 31ff 	mov.w	r1, #4294967295
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	fa01 f303 	lsl.w	r3, r1, r3
 8001116:	43d9      	mvns	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800111c:	4313      	orrs	r3, r2
         );
}
 800111e:	4618      	mov	r0, r3
 8001120:	3724      	adds	r7, #36	@ 0x24
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3b01      	subs	r3, #1
 8001138:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800113c:	d301      	bcc.n	8001142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113e:	2301      	movs	r3, #1
 8001140:	e00f      	b.n	8001162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001142:	4a0a      	ldr	r2, [pc, #40]	@ (800116c <SysTick_Config+0x40>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114a:	210f      	movs	r1, #15
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f7ff ff8e 	bl	8001070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001154:	4b05      	ldr	r3, [pc, #20]	@ (800116c <SysTick_Config+0x40>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115a:	4b04      	ldr	r3, [pc, #16]	@ (800116c <SysTick_Config+0x40>)
 800115c:	2207      	movs	r2, #7
 800115e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	e000e010 	.word	0xe000e010

08001170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff29 	bl	8000fd0 <__NVIC_SetPriorityGrouping>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff40 	bl	8001018 <__NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff90 	bl	80010c4 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5f 	bl	8001070 <__NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff33 	bl	8001034 <__NVIC_EnableIRQ>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffa4 	bl	800112c <SysTick_Config>
 80011e4:	4603      	mov	r3, r0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
	...

080011f0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80011f4:	4b07      	ldr	r3, [pc, #28]	@ (8001214 <HAL_GetCurrentCPUID+0x24>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	2b07      	cmp	r3, #7
 8001200:	d101      	bne.n	8001206 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001202:	2303      	movs	r3, #3
 8001204:	e000      	b.n	8001208 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001206:	2301      	movs	r3, #1
  }
}
 8001208:	4618      	mov	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001218:	b480      	push	{r7}
 800121a:	b087      	sub	sp, #28
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	460b      	mov	r3, r1
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e00a      	b.n	800124a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001234:	7afb      	ldrb	r3, [r7, #11]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d103      	bne.n	8001242 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	605a      	str	r2, [r3, #4]
      break;
 8001240:	e002      	b.n	8001248 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	75fb      	strb	r3, [r7, #23]
      break;
 8001246:	bf00      	nop
  }

  return status;
 8001248:	7dfb      	ldrb	r3, [r7, #23]
}
 800124a:	4618      	mov	r0, r3
 800124c:	371c      	adds	r7, #28
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
 800125e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e003      	b.n	8001272 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001270:	2300      	movs	r3, #0
  }
}
 8001272:	4618      	mov	r0, r3
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	0c1b      	lsrs	r3, r3, #16
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 031f 	and.w	r3, r3, #31
 800129c:	2201      	movs	r2, #1
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80012a4:	f7ff ffa4 	bl	80011f0 <HAL_GetCurrentCPUID>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b03      	cmp	r3, #3
 80012ac:	d105      	bne.n	80012ba <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	011a      	lsls	r2, r3, #4
 80012b2:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <HAL_EXTI_IRQHandler+0x70>)
 80012b4:	4413      	add	r3, r2
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	e004      	b.n	80012c4 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	011a      	lsls	r2, r3, #4
 80012be:	4b0d      	ldr	r3, [pc, #52]	@ (80012f4 <HAL_EXTI_IRQHandler+0x74>)
 80012c0:	4413      	add	r3, r2
 80012c2:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	4013      	ands	r3, r2
 80012cc:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d009      	beq.n	80012e8 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d002      	beq.n	80012e8 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	4798      	blx	r3
    }
  }
}
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	58000088 	.word	0x58000088
 80012f4:	580000c8 	.word	0x580000c8

080012f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	@ 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001306:	4b89      	ldr	r3, [pc, #548]	@ (800152c <HAL_GPIO_Init+0x234>)
 8001308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800130a:	e194      	b.n	8001636 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	2101      	movs	r1, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa01 f303 	lsl.w	r3, r1, r3
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 8186 	beq.w	8001630 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	2b01      	cmp	r3, #1
 800132e:	d005      	beq.n	800133c <HAL_GPIO_Init+0x44>
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d130      	bne.n	800139e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	2203      	movs	r2, #3
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	68da      	ldr	r2, [r3, #12]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001372:	2201      	movs	r2, #1
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43db      	mvns	r3, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4013      	ands	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	091b      	lsrs	r3, r3, #4
 8001388:	f003 0201 	and.w	r2, r3, #1
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0303 	and.w	r3, r3, #3
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d017      	beq.n	80013da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	2203      	movs	r2, #3
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	689a      	ldr	r2, [r3, #8]
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d123      	bne.n	800142e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	08da      	lsrs	r2, r3, #3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3208      	adds	r2, #8
 80013ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	220f      	movs	r2, #15
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	691a      	ldr	r2, [r3, #16]
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	08da      	lsrs	r2, r3, #3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3208      	adds	r2, #8
 8001428:	69b9      	ldr	r1, [r7, #24]
 800142a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	2203      	movs	r2, #3
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43db      	mvns	r3, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4013      	ands	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0203 	and.w	r2, r3, #3
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 80e0 	beq.w	8001630 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001470:	4b2f      	ldr	r3, [pc, #188]	@ (8001530 <HAL_GPIO_Init+0x238>)
 8001472:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001476:	4a2e      	ldr	r2, [pc, #184]	@ (8001530 <HAL_GPIO_Init+0x238>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001480:	4b2b      	ldr	r3, [pc, #172]	@ (8001530 <HAL_GPIO_Init+0x238>)
 8001482:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800148e:	4a29      	ldr	r2, [pc, #164]	@ (8001534 <HAL_GPIO_Init+0x23c>)
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	089b      	lsrs	r3, r3, #2
 8001494:	3302      	adds	r3, #2
 8001496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f003 0303 	and.w	r3, r3, #3
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	220f      	movs	r2, #15
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4013      	ands	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a20      	ldr	r2, [pc, #128]	@ (8001538 <HAL_GPIO_Init+0x240>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d052      	beq.n	8001560 <HAL_GPIO_Init+0x268>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a1f      	ldr	r2, [pc, #124]	@ (800153c <HAL_GPIO_Init+0x244>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d031      	beq.n	8001526 <HAL_GPIO_Init+0x22e>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001540 <HAL_GPIO_Init+0x248>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d02b      	beq.n	8001522 <HAL_GPIO_Init+0x22a>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001544 <HAL_GPIO_Init+0x24c>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d025      	beq.n	800151e <HAL_GPIO_Init+0x226>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001548 <HAL_GPIO_Init+0x250>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d01f      	beq.n	800151a <HAL_GPIO_Init+0x222>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a1b      	ldr	r2, [pc, #108]	@ (800154c <HAL_GPIO_Init+0x254>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d019      	beq.n	8001516 <HAL_GPIO_Init+0x21e>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a1a      	ldr	r2, [pc, #104]	@ (8001550 <HAL_GPIO_Init+0x258>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d013      	beq.n	8001512 <HAL_GPIO_Init+0x21a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a19      	ldr	r2, [pc, #100]	@ (8001554 <HAL_GPIO_Init+0x25c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d00d      	beq.n	800150e <HAL_GPIO_Init+0x216>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a18      	ldr	r2, [pc, #96]	@ (8001558 <HAL_GPIO_Init+0x260>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d007      	beq.n	800150a <HAL_GPIO_Init+0x212>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a17      	ldr	r2, [pc, #92]	@ (800155c <HAL_GPIO_Init+0x264>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d101      	bne.n	8001506 <HAL_GPIO_Init+0x20e>
 8001502:	2309      	movs	r3, #9
 8001504:	e02d      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 8001506:	230a      	movs	r3, #10
 8001508:	e02b      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 800150a:	2308      	movs	r3, #8
 800150c:	e029      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 800150e:	2307      	movs	r3, #7
 8001510:	e027      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 8001512:	2306      	movs	r3, #6
 8001514:	e025      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 8001516:	2305      	movs	r3, #5
 8001518:	e023      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 800151a:	2304      	movs	r3, #4
 800151c:	e021      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 800151e:	2303      	movs	r3, #3
 8001520:	e01f      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 8001522:	2302      	movs	r3, #2
 8001524:	e01d      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 8001526:	2301      	movs	r3, #1
 8001528:	e01b      	b.n	8001562 <HAL_GPIO_Init+0x26a>
 800152a:	bf00      	nop
 800152c:	58000080 	.word	0x58000080
 8001530:	58024400 	.word	0x58024400
 8001534:	58000400 	.word	0x58000400
 8001538:	58020000 	.word	0x58020000
 800153c:	58020400 	.word	0x58020400
 8001540:	58020800 	.word	0x58020800
 8001544:	58020c00 	.word	0x58020c00
 8001548:	58021000 	.word	0x58021000
 800154c:	58021400 	.word	0x58021400
 8001550:	58021800 	.word	0x58021800
 8001554:	58021c00 	.word	0x58021c00
 8001558:	58022000 	.word	0x58022000
 800155c:	58022400 	.word	0x58022400
 8001560:	2300      	movs	r3, #0
 8001562:	69fa      	ldr	r2, [r7, #28]
 8001564:	f002 0203 	and.w	r2, r2, #3
 8001568:	0092      	lsls	r2, r2, #2
 800156a:	4093      	lsls	r3, r2
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001572:	4938      	ldr	r1, [pc, #224]	@ (8001654 <HAL_GPIO_Init+0x35c>)
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	089b      	lsrs	r3, r3, #2
 8001578:	3302      	adds	r3, #2
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80015a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80015d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4013      	ands	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	43db      	mvns	r3, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4013      	ands	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	3301      	adds	r3, #1
 8001634:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	fa22 f303 	lsr.w	r3, r2, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	f47f ae63 	bne.w	800130c <HAL_GPIO_Init+0x14>
  }
}
 8001646:	bf00      	nop
 8001648:	bf00      	nop
 800164a:	3724      	adds	r7, #36	@ 0x24
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	58000400 	.word	0x58000400

08001658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
 8001664:	4613      	mov	r3, r2
 8001666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001668:	787b      	ldrb	r3, [r7, #1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001674:	e003      	b.n	800167e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001676:	887b      	ldrh	r3, [r7, #2]
 8001678:	041a      	lsls	r2, r3, #16
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	619a      	str	r2, [r3, #24]
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001694:	4a08      	ldr	r2, [pc, #32]	@ (80016b8 <HAL_HSEM_FastTake+0x2c>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3320      	adds	r3, #32
 800169a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169e:	4a07      	ldr	r2, [pc, #28]	@ (80016bc <HAL_HSEM_FastTake+0x30>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d101      	bne.n	80016a8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	e000      	b.n	80016aa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	58026400 	.word	0x58026400
 80016bc:	80000300 	.word	0x80000300

080016c0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80016ca:	4906      	ldr	r1, [pc, #24]	@ (80016e4 <HAL_HSEM_Release+0x24>)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	58026400 	.word	0x58026400

080016e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80016f0:	4b29      	ldr	r3, [pc, #164]	@ (8001798 <HAL_PWREx_ConfigSupply+0xb0>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	2b06      	cmp	r3, #6
 80016fa:	d00a      	beq.n	8001712 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80016fc:	4b26      	ldr	r3, [pc, #152]	@ (8001798 <HAL_PWREx_ConfigSupply+0xb0>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	429a      	cmp	r2, r3
 8001708:	d001      	beq.n	800170e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e040      	b.n	8001790 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800170e:	2300      	movs	r3, #0
 8001710:	e03e      	b.n	8001790 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001712:	4b21      	ldr	r3, [pc, #132]	@ (8001798 <HAL_PWREx_ConfigSupply+0xb0>)
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800171a:	491f      	ldr	r1, [pc, #124]	@ (8001798 <HAL_PWREx_ConfigSupply+0xb0>)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4313      	orrs	r3, r2
 8001720:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001722:	f7ff fc3d 	bl	8000fa0 <HAL_GetTick>
 8001726:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001728:	e009      	b.n	800173e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800172a:	f7ff fc39 	bl	8000fa0 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001738:	d901      	bls.n	800173e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e028      	b.n	8001790 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800173e:	4b16      	ldr	r3, [pc, #88]	@ (8001798 <HAL_PWREx_ConfigSupply+0xb0>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001746:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800174a:	d1ee      	bne.n	800172a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b1e      	cmp	r3, #30
 8001750:	d008      	beq.n	8001764 <HAL_PWREx_ConfigSupply+0x7c>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2b2e      	cmp	r3, #46	@ 0x2e
 8001756:	d005      	beq.n	8001764 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b1d      	cmp	r3, #29
 800175c:	d002      	beq.n	8001764 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b2d      	cmp	r3, #45	@ 0x2d
 8001762:	d114      	bne.n	800178e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001764:	f7ff fc1c 	bl	8000fa0 <HAL_GetTick>
 8001768:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800176a:	e009      	b.n	8001780 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800176c:	f7ff fc18 	bl	8000fa0 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800177a:	d901      	bls.n	8001780 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e007      	b.n	8001790 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001780:	4b05      	ldr	r3, [pc, #20]	@ (8001798 <HAL_PWREx_ConfigSupply+0xb0>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800178c:	d1ee      	bne.n	800176c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	58024800 	.word	0x58024800

0800179c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08c      	sub	sp, #48	@ 0x30
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d102      	bne.n	80017b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	f000 bc48 	b.w	8002040 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 8088 	beq.w	80018ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017be:	4b99      	ldr	r3, [pc, #612]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017c8:	4b96      	ldr	r3, [pc, #600]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 80017ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d0:	2b10      	cmp	r3, #16
 80017d2:	d007      	beq.n	80017e4 <HAL_RCC_OscConfig+0x48>
 80017d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d6:	2b18      	cmp	r3, #24
 80017d8:	d111      	bne.n	80017fe <HAL_RCC_OscConfig+0x62>
 80017da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d10c      	bne.n	80017fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e4:	4b8f      	ldr	r3, [pc, #572]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d06d      	beq.n	80018cc <HAL_RCC_OscConfig+0x130>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d169      	bne.n	80018cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	f000 bc21 	b.w	8002040 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x7a>
 8001808:	4b86      	ldr	r3, [pc, #536]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a85      	ldr	r2, [pc, #532]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 800180e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001812:	6013      	str	r3, [r2, #0]
 8001814:	e02e      	b.n	8001874 <HAL_RCC_OscConfig+0xd8>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0x9c>
 800181e:	4b81      	ldr	r3, [pc, #516]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a80      	ldr	r2, [pc, #512]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001824:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	4b7e      	ldr	r3, [pc, #504]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a7d      	ldr	r2, [pc, #500]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001830:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	e01d      	b.n	8001874 <HAL_RCC_OscConfig+0xd8>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001840:	d10c      	bne.n	800185c <HAL_RCC_OscConfig+0xc0>
 8001842:	4b78      	ldr	r3, [pc, #480]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a77      	ldr	r2, [pc, #476]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800184c:	6013      	str	r3, [r2, #0]
 800184e:	4b75      	ldr	r3, [pc, #468]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a74      	ldr	r2, [pc, #464]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001858:	6013      	str	r3, [r2, #0]
 800185a:	e00b      	b.n	8001874 <HAL_RCC_OscConfig+0xd8>
 800185c:	4b71      	ldr	r3, [pc, #452]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a70      	ldr	r2, [pc, #448]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b6e      	ldr	r3, [pc, #440]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a6d      	ldr	r2, [pc, #436]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 800186e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d013      	beq.n	80018a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187c:	f7ff fb90 	bl	8000fa0 <HAL_GetTick>
 8001880:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001884:	f7ff fb8c 	bl	8000fa0 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b64      	cmp	r3, #100	@ 0x64
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e3d4      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001896:	4b63      	ldr	r3, [pc, #396]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0xe8>
 80018a2:	e014      	b.n	80018ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff fb7c 	bl	8000fa0 <HAL_GetTick>
 80018a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ac:	f7ff fb78 	bl	8000fa0 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b64      	cmp	r3, #100	@ 0x64
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e3c0      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018be:	4b59      	ldr	r3, [pc, #356]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x110>
 80018ca:	e000      	b.n	80018ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 80ca 	beq.w	8001a70 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018dc:	4b51      	ldr	r3, [pc, #324]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018e6:	4b4f      	ldr	r3, [pc, #316]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 80018e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d007      	beq.n	8001902 <HAL_RCC_OscConfig+0x166>
 80018f2:	6a3b      	ldr	r3, [r7, #32]
 80018f4:	2b18      	cmp	r3, #24
 80018f6:	d156      	bne.n	80019a6 <HAL_RCC_OscConfig+0x20a>
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f003 0303 	and.w	r3, r3, #3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d151      	bne.n	80019a6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001902:	4b48      	ldr	r3, [pc, #288]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <HAL_RCC_OscConfig+0x17e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e392      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800191a:	4b42      	ldr	r3, [pc, #264]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 0219 	bic.w	r2, r3, #25
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	493f      	ldr	r1, [pc, #252]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001928:	4313      	orrs	r3, r2
 800192a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff fb38 	bl	8000fa0 <HAL_GetTick>
 8001930:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001934:	f7ff fb34 	bl	8000fa0 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e37c      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001946:	4b37      	ldr	r3, [pc, #220]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0304 	and.w	r3, r3, #4
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0f0      	beq.n	8001934 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001952:	f7ff fb31 	bl	8000fb8 <HAL_GetREVID>
 8001956:	4603      	mov	r3, r0
 8001958:	f241 0203 	movw	r2, #4099	@ 0x1003
 800195c:	4293      	cmp	r3, r2
 800195e:	d817      	bhi.n	8001990 <HAL_RCC_OscConfig+0x1f4>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	2b40      	cmp	r3, #64	@ 0x40
 8001966:	d108      	bne.n	800197a <HAL_RCC_OscConfig+0x1de>
 8001968:	4b2e      	ldr	r3, [pc, #184]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001970:	4a2c      	ldr	r2, [pc, #176]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001976:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001978:	e07a      	b.n	8001a70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	031b      	lsls	r3, r3, #12
 8001988:	4926      	ldr	r1, [pc, #152]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 800198a:	4313      	orrs	r3, r2
 800198c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800198e:	e06f      	b.n	8001a70 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001990:	4b24      	ldr	r3, [pc, #144]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	061b      	lsls	r3, r3, #24
 800199e:	4921      	ldr	r1, [pc, #132]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019a4:	e064      	b.n	8001a70 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d047      	beq.n	8001a3e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f023 0219 	bic.w	r2, r3, #25
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	491a      	ldr	r1, [pc, #104]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	f7ff faee 	bl	8000fa0 <HAL_GetTick>
 80019c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c8:	f7ff faea 	bl	8000fa0 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e332      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019da:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e6:	f7ff fae7 	bl	8000fb8 <HAL_GetREVID>
 80019ea:	4603      	mov	r3, r0
 80019ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d819      	bhi.n	8001a28 <HAL_RCC_OscConfig+0x28c>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	2b40      	cmp	r3, #64	@ 0x40
 80019fa:	d108      	bne.n	8001a0e <HAL_RCC_OscConfig+0x272>
 80019fc:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001a04:	4a07      	ldr	r2, [pc, #28]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001a06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a0a:	6053      	str	r3, [r2, #4]
 8001a0c:	e030      	b.n	8001a70 <HAL_RCC_OscConfig+0x2d4>
 8001a0e:	4b05      	ldr	r3, [pc, #20]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	031b      	lsls	r3, r3, #12
 8001a1c:	4901      	ldr	r1, [pc, #4]	@ (8001a24 <HAL_RCC_OscConfig+0x288>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	604b      	str	r3, [r1, #4]
 8001a22:	e025      	b.n	8001a70 <HAL_RCC_OscConfig+0x2d4>
 8001a24:	58024400 	.word	0x58024400
 8001a28:	4b9a      	ldr	r3, [pc, #616]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	061b      	lsls	r3, r3, #24
 8001a36:	4997      	ldr	r1, [pc, #604]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
 8001a3c:	e018      	b.n	8001a70 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a3e:	4b95      	ldr	r3, [pc, #596]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a94      	ldr	r2, [pc, #592]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4a:	f7ff faa9 	bl	8000fa0 <HAL_GetTick>
 8001a4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a52:	f7ff faa5 	bl	8000fa0 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e2ed      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a64:	4b8b      	ldr	r3, [pc, #556]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f0      	bne.n	8001a52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0310 	and.w	r3, r3, #16
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 80a9 	beq.w	8001bd0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a7e:	4b85      	ldr	r3, [pc, #532]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a86:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a88:	4b82      	ldr	r3, [pc, #520]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d007      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x308>
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2b18      	cmp	r3, #24
 8001a98:	d13a      	bne.n	8001b10 <HAL_RCC_OscConfig+0x374>
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f003 0303 	and.w	r3, r3, #3
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d135      	bne.n	8001b10 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001aa4:	4b7b      	ldr	r3, [pc, #492]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_RCC_OscConfig+0x320>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	2b80      	cmp	r3, #128	@ 0x80
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e2c1      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001abc:	f7ff fa7c 	bl	8000fb8 <HAL_GetREVID>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d817      	bhi.n	8001afa <HAL_RCC_OscConfig+0x35e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	2b20      	cmp	r3, #32
 8001ad0:	d108      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x348>
 8001ad2:	4b70      	ldr	r3, [pc, #448]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001ada:	4a6e      	ldr	r2, [pc, #440]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001adc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ae0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ae2:	e075      	b.n	8001bd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ae4:	4b6b      	ldr	r3, [pc, #428]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
 8001af0:	069b      	lsls	r3, r3, #26
 8001af2:	4968      	ldr	r1, [pc, #416]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001af8:	e06a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001afa:	4b66      	ldr	r3, [pc, #408]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	061b      	lsls	r3, r3, #24
 8001b08:	4962      	ldr	r1, [pc, #392]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b0e:	e05f      	b.n	8001bd0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d042      	beq.n	8001b9e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b18:	4b5e      	ldr	r3, [pc, #376]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a5d      	ldr	r2, [pc, #372]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b24:	f7ff fa3c 	bl	8000fa0 <HAL_GetTick>
 8001b28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b2c:	f7ff fa38 	bl	8000fa0 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e280      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b3e:	4b55      	ldr	r3, [pc, #340]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0f0      	beq.n	8001b2c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b4a:	f7ff fa35 	bl	8000fb8 <HAL_GetREVID>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d817      	bhi.n	8001b88 <HAL_RCC_OscConfig+0x3ec>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	2b20      	cmp	r3, #32
 8001b5e:	d108      	bne.n	8001b72 <HAL_RCC_OscConfig+0x3d6>
 8001b60:	4b4c      	ldr	r3, [pc, #304]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001b68:	4a4a      	ldr	r2, [pc, #296]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001b6a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b6e:	6053      	str	r3, [r2, #4]
 8001b70:	e02e      	b.n	8001bd0 <HAL_RCC_OscConfig+0x434>
 8001b72:	4b48      	ldr	r3, [pc, #288]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	069b      	lsls	r3, r3, #26
 8001b80:	4944      	ldr	r1, [pc, #272]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	604b      	str	r3, [r1, #4]
 8001b86:	e023      	b.n	8001bd0 <HAL_RCC_OscConfig+0x434>
 8001b88:	4b42      	ldr	r3, [pc, #264]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	061b      	lsls	r3, r3, #24
 8001b96:	493f      	ldr	r1, [pc, #252]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	60cb      	str	r3, [r1, #12]
 8001b9c:	e018      	b.n	8001bd0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b9e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a3c      	ldr	r2, [pc, #240]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001ba4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001baa:	f7ff f9f9 	bl	8000fa0 <HAL_GetTick>
 8001bae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001bb2:	f7ff f9f5 	bl	8000fa0 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e23d      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bc4:	4b33      	ldr	r3, [pc, #204]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f0      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d036      	beq.n	8001c4a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d019      	beq.n	8001c18 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be4:	4b2b      	ldr	r3, [pc, #172]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001be8:	4a2a      	ldr	r2, [pc, #168]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf0:	f7ff f9d6 	bl	8000fa0 <HAL_GetTick>
 8001bf4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf8:	f7ff f9d2 	bl	8000fa0 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e21a      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c0a:	4b22      	ldr	r3, [pc, #136]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001c0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x45c>
 8001c16:	e018      	b.n	8001c4a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c18:	4b1e      	ldr	r3, [pc, #120]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c1c:	4a1d      	ldr	r2, [pc, #116]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001c1e:	f023 0301 	bic.w	r3, r3, #1
 8001c22:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c24:	f7ff f9bc 	bl	8000fa0 <HAL_GetTick>
 8001c28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c2c:	f7ff f9b8 	bl	8000fa0 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e200      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c3e:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001c40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0320 	and.w	r3, r3, #32
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d039      	beq.n	8001cca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d01c      	beq.n	8001c98 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a0c      	ldr	r2, [pc, #48]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001c64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c6a:	f7ff f999 	bl	8000fa0 <HAL_GetTick>
 8001c6e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c72:	f7ff f995 	bl	8000fa0 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e1dd      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c84:	4b03      	ldr	r3, [pc, #12]	@ (8001c94 <HAL_RCC_OscConfig+0x4f8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0x4d6>
 8001c90:	e01b      	b.n	8001cca <HAL_RCC_OscConfig+0x52e>
 8001c92:	bf00      	nop
 8001c94:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c98:	4b9b      	ldr	r3, [pc, #620]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a9a      	ldr	r2, [pc, #616]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001c9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ca2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ca4:	f7ff f97c 	bl	8000fa0 <HAL_GetTick>
 8001ca8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cac:	f7ff f978 	bl	8000fa0 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e1c0      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cbe:	4b92      	ldr	r3, [pc, #584]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 8081 	beq.w	8001dda <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cd8:	4b8c      	ldr	r3, [pc, #560]	@ (8001f0c <HAL_RCC_OscConfig+0x770>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a8b      	ldr	r2, [pc, #556]	@ (8001f0c <HAL_RCC_OscConfig+0x770>)
 8001cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ce4:	f7ff f95c 	bl	8000fa0 <HAL_GetTick>
 8001ce8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cec:	f7ff f958 	bl	8000fa0 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	@ 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e1a0      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cfe:	4b83      	ldr	r3, [pc, #524]	@ (8001f0c <HAL_RCC_OscConfig+0x770>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d106      	bne.n	8001d20 <HAL_RCC_OscConfig+0x584>
 8001d12:	4b7d      	ldr	r3, [pc, #500]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d16:	4a7c      	ldr	r2, [pc, #496]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d1e:	e02d      	b.n	8001d7c <HAL_RCC_OscConfig+0x5e0>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10c      	bne.n	8001d42 <HAL_RCC_OscConfig+0x5a6>
 8001d28:	4b77      	ldr	r3, [pc, #476]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d2c:	4a76      	ldr	r2, [pc, #472]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d2e:	f023 0301 	bic.w	r3, r3, #1
 8001d32:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d34:	4b74      	ldr	r3, [pc, #464]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d38:	4a73      	ldr	r2, [pc, #460]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d3a:	f023 0304 	bic.w	r3, r3, #4
 8001d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d40:	e01c      	b.n	8001d7c <HAL_RCC_OscConfig+0x5e0>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b05      	cmp	r3, #5
 8001d48:	d10c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x5c8>
 8001d4a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d4e:	4a6e      	ldr	r2, [pc, #440]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d50:	f043 0304 	orr.w	r3, r3, #4
 8001d54:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d56:	4b6c      	ldr	r3, [pc, #432]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5a:	4a6b      	ldr	r2, [pc, #428]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d62:	e00b      	b.n	8001d7c <HAL_RCC_OscConfig+0x5e0>
 8001d64:	4b68      	ldr	r3, [pc, #416]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d68:	4a67      	ldr	r2, [pc, #412]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d6a:	f023 0301 	bic.w	r3, r3, #1
 8001d6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d70:	4b65      	ldr	r3, [pc, #404]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d74:	4a64      	ldr	r2, [pc, #400]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001d76:	f023 0304 	bic.w	r3, r3, #4
 8001d7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d015      	beq.n	8001db0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d84:	f7ff f90c 	bl	8000fa0 <HAL_GetTick>
 8001d88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d8a:	e00a      	b.n	8001da2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8c:	f7ff f908 	bl	8000fa0 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e14e      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001da2:	4b59      	ldr	r3, [pc, #356]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0ee      	beq.n	8001d8c <HAL_RCC_OscConfig+0x5f0>
 8001dae:	e014      	b.n	8001dda <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db0:	f7ff f8f6 	bl	8000fa0 <HAL_GetTick>
 8001db4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001db6:	e00a      	b.n	8001dce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db8:	f7ff f8f2 	bl	8000fa0 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e138      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dce:	4b4e      	ldr	r3, [pc, #312]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1ee      	bne.n	8001db8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 812d 	beq.w	800203e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001de4:	4b48      	ldr	r3, [pc, #288]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dec:	2b18      	cmp	r3, #24
 8001dee:	f000 80bd 	beq.w	8001f6c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	f040 809e 	bne.w	8001f38 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dfc:	4b42      	ldr	r3, [pc, #264]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a41      	ldr	r2, [pc, #260]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001e02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7ff f8ca 	bl	8000fa0 <HAL_GetTick>
 8001e0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e10:	f7ff f8c6 	bl	8000fa0 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e10e      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e22:	4b39      	ldr	r3, [pc, #228]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e2e:	4b36      	ldr	r3, [pc, #216]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001e30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e32:	4b37      	ldr	r3, [pc, #220]	@ (8001f10 <HAL_RCC_OscConfig+0x774>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e3e:	0112      	lsls	r2, r2, #4
 8001e40:	430a      	orrs	r2, r1
 8001e42:	4931      	ldr	r1, [pc, #196]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	628b      	str	r3, [r1, #40]	@ 0x28
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e56:	3b01      	subs	r3, #1
 8001e58:	025b      	lsls	r3, r3, #9
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e62:	3b01      	subs	r3, #1
 8001e64:	041b      	lsls	r3, r3, #16
 8001e66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e70:	3b01      	subs	r3, #1
 8001e72:	061b      	lsls	r3, r3, #24
 8001e74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001e78:	4923      	ldr	r1, [pc, #140]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001e7e:	4b22      	ldr	r3, [pc, #136]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e82:	4a21      	ldr	r2, [pc, #132]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e8e:	4b21      	ldr	r3, [pc, #132]	@ (8001f14 <HAL_RCC_OscConfig+0x778>)
 8001e90:	4013      	ands	r3, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e96:	00d2      	lsls	r2, r2, #3
 8001e98:	491b      	ldr	r1, [pc, #108]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea2:	f023 020c 	bic.w	r2, r3, #12
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	4917      	ldr	r1, [pc, #92]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001eb0:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb4:	f023 0202 	bic.w	r2, r3, #2
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebc:	4912      	ldr	r1, [pc, #72]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ec2:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec6:	4a10      	ldr	r2, [pc, #64]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001ec8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ecc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ece:	4b0e      	ldr	r3, [pc, #56]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed2:	4a0d      	ldr	r2, [pc, #52]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ed8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001eda:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ede:	4a0a      	ldr	r2, [pc, #40]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001ee0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001ee6:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eea:	4a07      	ldr	r2, [pc, #28]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef2:	4b05      	ldr	r3, [pc, #20]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a04      	ldr	r2, [pc, #16]	@ (8001f08 <HAL_RCC_OscConfig+0x76c>)
 8001ef8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efe:	f7ff f84f 	bl	8000fa0 <HAL_GetTick>
 8001f02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f04:	e011      	b.n	8001f2a <HAL_RCC_OscConfig+0x78e>
 8001f06:	bf00      	nop
 8001f08:	58024400 	.word	0x58024400
 8001f0c:	58024800 	.word	0x58024800
 8001f10:	fffffc0c 	.word	0xfffffc0c
 8001f14:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f18:	f7ff f842 	bl	8000fa0 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e08a      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f2a:	4b47      	ldr	r3, [pc, #284]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x77c>
 8001f36:	e082      	b.n	800203e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f38:	4b43      	ldr	r3, [pc, #268]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a42      	ldr	r2, [pc, #264]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8001f3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7ff f82c 	bl	8000fa0 <HAL_GetTick>
 8001f48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4c:	f7ff f828 	bl	8000fa0 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e070      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f5e:	4b3a      	ldr	r3, [pc, #232]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x7b0>
 8001f6a:	e068      	b.n	800203e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f6c:	4b36      	ldr	r3, [pc, #216]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f72:	4b35      	ldr	r3, [pc, #212]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d031      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	f003 0203 	and.w	r2, r3, #3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d12a      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	091b      	lsrs	r3, r3, #4
 8001f92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d122      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d11a      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	0a5b      	lsrs	r3, r3, #9
 8001fb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d111      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	0c1b      	lsrs	r3, r3, #16
 8001fc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fcc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d108      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	0e1b      	lsrs	r3, r3, #24
 8001fd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fde:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e02b      	b.n	8002040 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001fe8:	4b17      	ldr	r3, [pc, #92]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8001fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fec:	08db      	lsrs	r3, r3, #3
 8001fee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ff2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d01f      	beq.n	800203e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001ffe:	4b12      	ldr	r3, [pc, #72]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8002000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002002:	4a11      	ldr	r2, [pc, #68]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8002004:	f023 0301 	bic.w	r3, r3, #1
 8002008:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800200a:	f7fe ffc9 	bl	8000fa0 <HAL_GetTick>
 800200e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002010:	bf00      	nop
 8002012:	f7fe ffc5 	bl	8000fa0 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	4293      	cmp	r3, r2
 800201c:	d0f9      	beq.n	8002012 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800201e:	4b0a      	ldr	r3, [pc, #40]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8002020:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002022:	4b0a      	ldr	r3, [pc, #40]	@ (800204c <HAL_RCC_OscConfig+0x8b0>)
 8002024:	4013      	ands	r3, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800202a:	00d2      	lsls	r2, r2, #3
 800202c:	4906      	ldr	r1, [pc, #24]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 800202e:	4313      	orrs	r3, r2
 8002030:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002032:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8002034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002036:	4a04      	ldr	r2, [pc, #16]	@ (8002048 <HAL_RCC_OscConfig+0x8ac>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3730      	adds	r7, #48	@ 0x30
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	58024400 	.word	0x58024400
 800204c:	ffff0007 	.word	0xffff0007

08002050 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e19c      	b.n	800239e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002064:	4b8a      	ldr	r3, [pc, #552]	@ (8002290 <HAL_RCC_ClockConfig+0x240>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 030f 	and.w	r3, r3, #15
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d910      	bls.n	8002094 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b87      	ldr	r3, [pc, #540]	@ (8002290 <HAL_RCC_ClockConfig+0x240>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 020f 	bic.w	r2, r3, #15
 800207a:	4985      	ldr	r1, [pc, #532]	@ (8002290 <HAL_RCC_ClockConfig+0x240>)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b83      	ldr	r3, [pc, #524]	@ (8002290 <HAL_RCC_ClockConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e184      	b.n	800239e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d010      	beq.n	80020c2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	4b7b      	ldr	r3, [pc, #492]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d908      	bls.n	80020c2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020b0:	4b78      	ldr	r3, [pc, #480]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	4975      	ldr	r1, [pc, #468]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0308 	and.w	r3, r3, #8
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d010      	beq.n	80020f0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695a      	ldr	r2, [r3, #20]
 80020d2:	4b70      	ldr	r3, [pc, #448]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020da:	429a      	cmp	r2, r3
 80020dc:	d908      	bls.n	80020f0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020de:	4b6d      	ldr	r3, [pc, #436]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	496a      	ldr	r1, [pc, #424]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d010      	beq.n	800211e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699a      	ldr	r2, [r3, #24]
 8002100:	4b64      	ldr	r3, [pc, #400]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002108:	429a      	cmp	r2, r3
 800210a:	d908      	bls.n	800211e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800210c:	4b61      	ldr	r3, [pc, #388]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	495e      	ldr	r1, [pc, #376]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 800211a:	4313      	orrs	r3, r2
 800211c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0320 	and.w	r3, r3, #32
 8002126:	2b00      	cmp	r3, #0
 8002128:	d010      	beq.n	800214c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	4b59      	ldr	r3, [pc, #356]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002136:	429a      	cmp	r2, r3
 8002138:	d908      	bls.n	800214c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800213a:	4b56      	ldr	r3, [pc, #344]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	4953      	ldr	r1, [pc, #332]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002148:	4313      	orrs	r3, r2
 800214a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d010      	beq.n	800217a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	4b4d      	ldr	r3, [pc, #308]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f003 030f 	and.w	r3, r3, #15
 8002164:	429a      	cmp	r2, r3
 8002166:	d908      	bls.n	800217a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002168:	4b4a      	ldr	r3, [pc, #296]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	f023 020f 	bic.w	r2, r3, #15
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4947      	ldr	r1, [pc, #284]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002176:	4313      	orrs	r3, r2
 8002178:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d055      	beq.n	8002232 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002186:	4b43      	ldr	r3, [pc, #268]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	4940      	ldr	r1, [pc, #256]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002194:	4313      	orrs	r3, r2
 8002196:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d107      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021a0:	4b3c      	ldr	r3, [pc, #240]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d121      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0f6      	b.n	800239e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d107      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021b8:	4b36      	ldr	r3, [pc, #216]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d115      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0ea      	b.n	800239e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d107      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021d0:	4b30      	ldr	r3, [pc, #192]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d109      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0de      	b.n	800239e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0d6      	b.n	800239e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021f0:	4b28      	ldr	r3, [pc, #160]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	f023 0207 	bic.w	r2, r3, #7
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4925      	ldr	r1, [pc, #148]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002202:	f7fe fecd 	bl	8000fa0 <HAL_GetTick>
 8002206:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002208:	e00a      	b.n	8002220 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220a:	f7fe fec9 	bl	8000fa0 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002218:	4293      	cmp	r3, r2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e0be      	b.n	800239e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002220:	4b1c      	ldr	r3, [pc, #112]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	429a      	cmp	r2, r3
 8002230:	d1eb      	bne.n	800220a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d010      	beq.n	8002260 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	4b14      	ldr	r3, [pc, #80]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	429a      	cmp	r2, r3
 800224c:	d208      	bcs.n	8002260 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800224e:	4b11      	ldr	r3, [pc, #68]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f023 020f 	bic.w	r2, r3, #15
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	490e      	ldr	r1, [pc, #56]	@ (8002294 <HAL_RCC_ClockConfig+0x244>)
 800225c:	4313      	orrs	r3, r2
 800225e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002260:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <HAL_RCC_ClockConfig+0x240>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 030f 	and.w	r3, r3, #15
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d214      	bcs.n	8002298 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b08      	ldr	r3, [pc, #32]	@ (8002290 <HAL_RCC_ClockConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 020f 	bic.w	r2, r3, #15
 8002276:	4906      	ldr	r1, [pc, #24]	@ (8002290 <HAL_RCC_ClockConfig+0x240>)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b04      	ldr	r3, [pc, #16]	@ (8002290 <HAL_RCC_ClockConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d005      	beq.n	8002298 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e086      	b.n	800239e <HAL_RCC_ClockConfig+0x34e>
 8002290:	52002000 	.word	0x52002000
 8002294:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d010      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	4b3f      	ldr	r3, [pc, #252]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d208      	bcs.n	80022c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022b4:	4b3c      	ldr	r3, [pc, #240]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	4939      	ldr	r1, [pc, #228]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d010      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	4b34      	ldr	r3, [pc, #208]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022de:	429a      	cmp	r2, r3
 80022e0:	d208      	bcs.n	80022f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022e2:	4b31      	ldr	r3, [pc, #196]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	492e      	ldr	r1, [pc, #184]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0310 	and.w	r3, r3, #16
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d010      	beq.n	8002322 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699a      	ldr	r2, [r3, #24]
 8002304:	4b28      	ldr	r3, [pc, #160]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800230c:	429a      	cmp	r2, r3
 800230e:	d208      	bcs.n	8002322 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002310:	4b25      	ldr	r3, [pc, #148]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	4922      	ldr	r1, [pc, #136]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 800231e:	4313      	orrs	r3, r2
 8002320:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0320 	and.w	r3, r3, #32
 800232a:	2b00      	cmp	r3, #0
 800232c:	d010      	beq.n	8002350 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69da      	ldr	r2, [r3, #28]
 8002332:	4b1d      	ldr	r3, [pc, #116]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800233a:	429a      	cmp	r2, r3
 800233c:	d208      	bcs.n	8002350 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800233e:	4b1a      	ldr	r3, [pc, #104]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	4917      	ldr	r1, [pc, #92]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 800234c:	4313      	orrs	r3, r2
 800234e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002350:	f000 f834 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 8002354:	4602      	mov	r2, r0
 8002356:	4b14      	ldr	r3, [pc, #80]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	0a1b      	lsrs	r3, r3, #8
 800235c:	f003 030f 	and.w	r3, r3, #15
 8002360:	4912      	ldr	r1, [pc, #72]	@ (80023ac <HAL_RCC_ClockConfig+0x35c>)
 8002362:	5ccb      	ldrb	r3, [r1, r3]
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
 800236c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800236e:	4b0e      	ldr	r3, [pc, #56]	@ (80023a8 <HAL_RCC_ClockConfig+0x358>)
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	4a0d      	ldr	r2, [pc, #52]	@ (80023ac <HAL_RCC_ClockConfig+0x35c>)
 8002378:	5cd3      	ldrb	r3, [r2, r3]
 800237a:	f003 031f 	and.w	r3, r3, #31
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
 8002384:	4a0a      	ldr	r2, [pc, #40]	@ (80023b0 <HAL_RCC_ClockConfig+0x360>)
 8002386:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002388:	4a0a      	ldr	r2, [pc, #40]	@ (80023b4 <HAL_RCC_ClockConfig+0x364>)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800238e:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <HAL_RCC_ClockConfig+0x368>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fdba 	bl	8000f0c <HAL_InitTick>
 8002398:	4603      	mov	r3, r0
 800239a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800239c:	7bfb      	ldrb	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	58024400 	.word	0x58024400
 80023ac:	08003d18 	.word	0x08003d18
 80023b0:	24000004 	.word	0x24000004
 80023b4:	24000000 	.word	0x24000000
 80023b8:	24000024 	.word	0x24000024

080023bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	b089      	sub	sp, #36	@ 0x24
 80023c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023c2:	4bb3      	ldr	r3, [pc, #716]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023ca:	2b18      	cmp	r3, #24
 80023cc:	f200 8155 	bhi.w	800267a <HAL_RCC_GetSysClockFreq+0x2be>
 80023d0:	a201      	add	r2, pc, #4	@ (adr r2, 80023d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80023d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d6:	bf00      	nop
 80023d8:	0800243d 	.word	0x0800243d
 80023dc:	0800267b 	.word	0x0800267b
 80023e0:	0800267b 	.word	0x0800267b
 80023e4:	0800267b 	.word	0x0800267b
 80023e8:	0800267b 	.word	0x0800267b
 80023ec:	0800267b 	.word	0x0800267b
 80023f0:	0800267b 	.word	0x0800267b
 80023f4:	0800267b 	.word	0x0800267b
 80023f8:	08002463 	.word	0x08002463
 80023fc:	0800267b 	.word	0x0800267b
 8002400:	0800267b 	.word	0x0800267b
 8002404:	0800267b 	.word	0x0800267b
 8002408:	0800267b 	.word	0x0800267b
 800240c:	0800267b 	.word	0x0800267b
 8002410:	0800267b 	.word	0x0800267b
 8002414:	0800267b 	.word	0x0800267b
 8002418:	08002469 	.word	0x08002469
 800241c:	0800267b 	.word	0x0800267b
 8002420:	0800267b 	.word	0x0800267b
 8002424:	0800267b 	.word	0x0800267b
 8002428:	0800267b 	.word	0x0800267b
 800242c:	0800267b 	.word	0x0800267b
 8002430:	0800267b 	.word	0x0800267b
 8002434:	0800267b 	.word	0x0800267b
 8002438:	0800246f 	.word	0x0800246f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800243c:	4b94      	ldr	r3, [pc, #592]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0320 	and.w	r3, r3, #32
 8002444:	2b00      	cmp	r3, #0
 8002446:	d009      	beq.n	800245c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002448:	4b91      	ldr	r3, [pc, #580]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	08db      	lsrs	r3, r3, #3
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	4a90      	ldr	r2, [pc, #576]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
 8002458:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800245a:	e111      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800245c:	4b8d      	ldr	r3, [pc, #564]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800245e:	61bb      	str	r3, [r7, #24]
      break;
 8002460:	e10e      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002462:	4b8d      	ldr	r3, [pc, #564]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002464:	61bb      	str	r3, [r7, #24]
      break;
 8002466:	e10b      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002468:	4b8c      	ldr	r3, [pc, #560]	@ (800269c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800246a:	61bb      	str	r3, [r7, #24]
      break;
 800246c:	e108      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800246e:	4b88      	ldr	r3, [pc, #544]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002478:	4b85      	ldr	r3, [pc, #532]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800247a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800247c:	091b      	lsrs	r3, r3, #4
 800247e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002482:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002484:	4b82      	ldr	r3, [pc, #520]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800248e:	4b80      	ldr	r3, [pc, #512]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002490:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002492:	08db      	lsrs	r3, r3, #3
 8002494:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	fb02 f303 	mul.w	r3, r2, r3
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 80e1 	beq.w	8002674 <HAL_RCC_GetSysClockFreq+0x2b8>
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	f000 8083 	beq.w	80025c0 <HAL_RCC_GetSysClockFreq+0x204>
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	f200 80a1 	bhi.w	8002604 <HAL_RCC_GetSysClockFreq+0x248>
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_RCC_GetSysClockFreq+0x114>
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d056      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x1c0>
 80024ce:	e099      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0320 	and.w	r3, r3, #32
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d02d      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80024dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	08db      	lsrs	r3, r3, #3
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	4a6b      	ldr	r2, [pc, #428]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
 80024ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	ee07 3a90 	vmov	s15, r3
 80024fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002506:	4b62      	ldr	r3, [pc, #392]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800250e:	ee07 3a90 	vmov	s15, r3
 8002512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002516:	ed97 6a02 	vldr	s12, [r7, #8]
 800251a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80026a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800251e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800252a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800252e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002532:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002536:	e087      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	ee07 3a90 	vmov	s15, r3
 800253e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002542:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80026a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800254a:	4b51      	ldr	r3, [pc, #324]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002552:	ee07 3a90 	vmov	s15, r3
 8002556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800255a:	ed97 6a02 	vldr	s12, [r7, #8]
 800255e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80026a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800256a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800256e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002576:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800257a:	e065      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	ee07 3a90 	vmov	s15, r3
 8002582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002586:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80026a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800258a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800258e:	4b40      	ldr	r3, [pc, #256]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002596:	ee07 3a90 	vmov	s15, r3
 800259a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800259e:	ed97 6a02 	vldr	s12, [r7, #8]
 80025a2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80026a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025be:	e043      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	ee07 3a90 	vmov	s15, r3
 80025c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80026ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80025ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80025e6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80026a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80025f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002602:	e021      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	ee07 3a90 	vmov	s15, r3
 800260a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800260e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80026a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002616:	4b1e      	ldr	r3, [pc, #120]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800261e:	ee07 3a90 	vmov	s15, r3
 8002622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002626:	ed97 6a02 	vldr	s12, [r7, #8]
 800262a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80026a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800262e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800263a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800263e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002642:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002646:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002648:	4b11      	ldr	r3, [pc, #68]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264c:	0a5b      	lsrs	r3, r3, #9
 800264e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002652:	3301      	adds	r3, #1
 8002654:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	ee07 3a90 	vmov	s15, r3
 800265c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002660:	edd7 6a07 	vldr	s13, [r7, #28]
 8002664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800266c:	ee17 3a90 	vmov	r3, s15
 8002670:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002672:	e005      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002674:	2300      	movs	r3, #0
 8002676:	61bb      	str	r3, [r7, #24]
      break;
 8002678:	e002      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800267a:	4b07      	ldr	r3, [pc, #28]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800267c:	61bb      	str	r3, [r7, #24]
      break;
 800267e:	bf00      	nop
  }

  return sysclockfreq;
 8002680:	69bb      	ldr	r3, [r7, #24]
}
 8002682:	4618      	mov	r0, r3
 8002684:	3724      	adds	r7, #36	@ 0x24
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	58024400 	.word	0x58024400
 8002694:	03d09000 	.word	0x03d09000
 8002698:	003d0900 	.word	0x003d0900
 800269c:	017d7840 	.word	0x017d7840
 80026a0:	46000000 	.word	0x46000000
 80026a4:	4c742400 	.word	0x4c742400
 80026a8:	4a742400 	.word	0x4a742400
 80026ac:	4bbebc20 	.word	0x4bbebc20

080026b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80026b6:	f7ff fe81 	bl	80023bc <HAL_RCC_GetSysClockFreq>
 80026ba:	4602      	mov	r2, r0
 80026bc:	4b10      	ldr	r3, [pc, #64]	@ (8002700 <HAL_RCC_GetHCLKFreq+0x50>)
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	0a1b      	lsrs	r3, r3, #8
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	490f      	ldr	r1, [pc, #60]	@ (8002704 <HAL_RCC_GetHCLKFreq+0x54>)
 80026c8:	5ccb      	ldrb	r3, [r1, r3]
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	fa22 f303 	lsr.w	r3, r2, r3
 80026d2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002700 <HAL_RCC_GetHCLKFreq+0x50>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	f003 030f 	and.w	r3, r3, #15
 80026dc:	4a09      	ldr	r2, [pc, #36]	@ (8002704 <HAL_RCC_GetHCLKFreq+0x54>)
 80026de:	5cd3      	ldrb	r3, [r2, r3]
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ea:	4a07      	ldr	r2, [pc, #28]	@ (8002708 <HAL_RCC_GetHCLKFreq+0x58>)
 80026ec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026ee:	4a07      	ldr	r2, [pc, #28]	@ (800270c <HAL_RCC_GetHCLKFreq+0x5c>)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80026f4:	4b04      	ldr	r3, [pc, #16]	@ (8002708 <HAL_RCC_GetHCLKFreq+0x58>)
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	58024400 	.word	0x58024400
 8002704:	08003d18 	.word	0x08003d18
 8002708:	24000004 	.word	0x24000004
 800270c:	24000000 	.word	0x24000000

08002710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002714:	f7ff ffcc 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 8002718:	4602      	mov	r2, r0
 800271a:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <HAL_RCC_GetPCLK1Freq+0x24>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	091b      	lsrs	r3, r3, #4
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	4904      	ldr	r1, [pc, #16]	@ (8002738 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002726:	5ccb      	ldrb	r3, [r1, r3]
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}
 8002734:	58024400 	.word	0x58024400
 8002738:	08003d18 	.word	0x08003d18

0800273c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002740:	f7ff ffb6 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 8002744:	4602      	mov	r2, r0
 8002746:	4b06      	ldr	r3, [pc, #24]	@ (8002760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	0a1b      	lsrs	r3, r3, #8
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	4904      	ldr	r1, [pc, #16]	@ (8002764 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002752:	5ccb      	ldrb	r3, [r1, r3]
 8002754:	f003 031f 	and.w	r3, r3, #31
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800275c:	4618      	mov	r0, r3
 800275e:	bd80      	pop	{r7, pc}
 8002760:	58024400 	.word	0x58024400
 8002764:	08003d18 	.word	0x08003d18

08002768 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800276c:	f7ff ffa0 	bl	80026b0 <HAL_RCC_GetHCLKFreq>
 8002770:	4602      	mov	r2, r0
 8002772:	4b06      	ldr	r3, [pc, #24]	@ (800278c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	091b      	lsrs	r3, r3, #4
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	4904      	ldr	r1, [pc, #16]	@ (8002790 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800277e:	5ccb      	ldrb	r3, [r1, r3]
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002788:	4618      	mov	r0, r3
 800278a:	bd80      	pop	{r7, pc}
 800278c:	58024400 	.word	0x58024400
 8002790:	08003d18 	.word	0x08003d18

08002794 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8002794:	b480      	push	{r7}
 8002796:	b089      	sub	sp, #36	@ 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800279c:	4ba1      	ldr	r3, [pc, #644]	@ (8002a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800279e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80027a6:	4b9f      	ldr	r3, [pc, #636]	@ (8002a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80027a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027aa:	0b1b      	lsrs	r3, r3, #12
 80027ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80027b2:	4b9c      	ldr	r3, [pc, #624]	@ (8002a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80027b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b6:	091b      	lsrs	r3, r3, #4
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80027be:	4b99      	ldr	r3, [pc, #612]	@ (8002a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80027c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027c2:	08db      	lsrs	r3, r3, #3
 80027c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	fb02 f303 	mul.w	r3, r2, r3
 80027ce:	ee07 3a90 	vmov	s15, r3
 80027d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8111 	beq.w	8002a04 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	f000 8083 	beq.w	80028f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	f200 80a1 	bhi.w	8002934 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d056      	beq.n	80028ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80027fe:	e099      	b.n	8002934 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002800:	4b88      	ldr	r3, [pc, #544]	@ (8002a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b00      	cmp	r3, #0
 800280a:	d02d      	beq.n	8002868 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800280c:	4b85      	ldr	r3, [pc, #532]	@ (8002a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	08db      	lsrs	r3, r3, #3
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	4a84      	ldr	r2, [pc, #528]	@ (8002a28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8002818:	fa22 f303 	lsr.w	r3, r2, r3
 800281c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	ee07 3a90 	vmov	s15, r3
 8002824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002836:	4b7b      	ldr	r3, [pc, #492]	@ (8002a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800283a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800283e:	ee07 3a90 	vmov	s15, r3
 8002842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002846:	ed97 6a03 	vldr	s12, [r7, #12]
 800284a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002a2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800284e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800285a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800285e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002862:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002866:	e087      	b.n	8002978 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	ee07 3a90 	vmov	s15, r3
 800286e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002872:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002a30 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8002876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800287a:	4b6a      	ldr	r3, [pc, #424]	@ (8002a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800287c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800287e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002882:	ee07 3a90 	vmov	s15, r3
 8002886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800288a:	ed97 6a03 	vldr	s12, [r7, #12]
 800288e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002a2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800289a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800289e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80028aa:	e065      	b.n	8002978 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	ee07 3a90 	vmov	s15, r3
 80028b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002a34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80028ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028be:	4b59      	ldr	r3, [pc, #356]	@ (8002a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80028c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c6:	ee07 3a90 	vmov	s15, r3
 80028ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80028d2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002a2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80028d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80028ee:	e043      	b.n	8002978 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002a38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80028fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002902:	4b48      	ldr	r3, [pc, #288]	@ (8002a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002912:	ed97 6a03 	vldr	s12, [r7, #12]
 8002916:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002a2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800291a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800291e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800292a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800292e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002932:	e021      	b.n	8002978 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	ee07 3a90 	vmov	s15, r3
 800293a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800293e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002a34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002946:	4b37      	ldr	r3, [pc, #220]	@ (8002a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800294e:	ee07 3a90 	vmov	s15, r3
 8002952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002956:	ed97 6a03 	vldr	s12, [r7, #12]
 800295a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002a2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800295e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002966:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800296a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800296e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002972:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002976:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002978:	4b2a      	ldr	r3, [pc, #168]	@ (8002a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800297a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297c:	0a5b      	lsrs	r3, r3, #9
 800297e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002982:	ee07 3a90 	vmov	s15, r3
 8002986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800298a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800298e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002992:	edd7 6a07 	vldr	s13, [r7, #28]
 8002996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800299a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800299e:	ee17 2a90 	vmov	r2, s15
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80029a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029aa:	0c1b      	lsrs	r3, r3, #16
 80029ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029b0:	ee07 3a90 	vmov	s15, r3
 80029b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80029bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80029c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80029c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029cc:	ee17 2a90 	vmov	r2, s15
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80029d4:	4b13      	ldr	r3, [pc, #76]	@ (8002a24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d8:	0e1b      	lsrs	r3, r3, #24
 80029da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029de:	ee07 3a90 	vmov	s15, r3
 80029e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80029ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80029ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80029f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029fa:	ee17 2a90 	vmov	r2, s15
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002a02:	e008      	b.n	8002a16 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
}
 8002a16:	bf00      	nop
 8002a18:	3724      	adds	r7, #36	@ 0x24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	58024400 	.word	0x58024400
 8002a28:	03d09000 	.word	0x03d09000
 8002a2c:	46000000 	.word	0x46000000
 8002a30:	4c742400 	.word	0x4c742400
 8002a34:	4a742400 	.word	0x4a742400
 8002a38:	4bbebc20 	.word	0x4bbebc20

08002a3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b089      	sub	sp, #36	@ 0x24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a44:	4ba1      	ldr	r3, [pc, #644]	@ (8002ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8002a4e:	4b9f      	ldr	r3, [pc, #636]	@ (8002ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a52:	0d1b      	lsrs	r3, r3, #20
 8002a54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a58:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002a5a:	4b9c      	ldr	r3, [pc, #624]	@ (8002ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a5e:	0a1b      	lsrs	r3, r3, #8
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002a66:	4b99      	ldr	r3, [pc, #612]	@ (8002ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6a:	08db      	lsrs	r3, r3, #3
 8002a6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	fb02 f303 	mul.w	r3, r2, r3
 8002a76:	ee07 3a90 	vmov	s15, r3
 8002a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 8111 	beq.w	8002cac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	f000 8083 	beq.w	8002b98 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	f200 80a1 	bhi.w	8002bdc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d056      	beq.n	8002b54 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8002aa6:	e099      	b.n	8002bdc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002aa8:	4b88      	ldr	r3, [pc, #544]	@ (8002ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d02d      	beq.n	8002b10 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ab4:	4b85      	ldr	r3, [pc, #532]	@ (8002ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	08db      	lsrs	r3, r3, #3
 8002aba:	f003 0303 	and.w	r3, r3, #3
 8002abe:	4a84      	ldr	r2, [pc, #528]	@ (8002cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8002ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	ee07 3a90 	vmov	s15, r3
 8002acc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	ee07 3a90 	vmov	s15, r3
 8002ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ade:	4b7b      	ldr	r3, [pc, #492]	@ (8002ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ae6:	ee07 3a90 	vmov	s15, r3
 8002aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8002af2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002afe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002b0e:	e087      	b.n	8002c20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	ee07 3a90 	vmov	s15, r3
 8002b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b1a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8002b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b22:	4b6a      	ldr	r3, [pc, #424]	@ (8002ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b2a:	ee07 3a90 	vmov	s15, r3
 8002b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8002b36:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b52:	e065      	b.n	8002c20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	ee07 3a90 	vmov	s15, r3
 8002b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b5e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002cdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b66:	4b59      	ldr	r3, [pc, #356]	@ (8002ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8002b7a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b96:	e043      	b.n	8002c20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	ee07 3a90 	vmov	s15, r3
 8002b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8002ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002baa:	4b48      	ldr	r3, [pc, #288]	@ (8002ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8002bbe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bda:	e021      	b.n	8002c20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	ee07 3a90 	vmov	s15, r3
 8002be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002be6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002cdc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bee:	4b37      	ldr	r3, [pc, #220]	@ (8002ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bf6:	ee07 3a90 	vmov	s15, r3
 8002bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8002c02:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c1e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8002c20:	4b2a      	ldr	r3, [pc, #168]	@ (8002ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c24:	0a5b      	lsrs	r3, r3, #9
 8002c26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c2a:	ee07 3a90 	vmov	s15, r3
 8002c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002c3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c46:	ee17 2a90 	vmov	r2, s15
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8002c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8002ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c52:	0c1b      	lsrs	r3, r3, #16
 8002c54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c58:	ee07 3a90 	vmov	s15, r3
 8002c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002c68:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c74:	ee17 2a90 	vmov	r2, s15
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8002c7c:	4b13      	ldr	r3, [pc, #76]	@ (8002ccc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	0e1b      	lsrs	r3, r3, #24
 8002c82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c86:	ee07 3a90 	vmov	s15, r3
 8002c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002c96:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ca2:	ee17 2a90 	vmov	r2, s15
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8002caa:	e008      	b.n	8002cbe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
}
 8002cbe:	bf00      	nop
 8002cc0:	3724      	adds	r7, #36	@ 0x24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	58024400 	.word	0x58024400
 8002cd0:	03d09000 	.word	0x03d09000
 8002cd4:	46000000 	.word	0x46000000
 8002cd8:	4c742400 	.word	0x4c742400
 8002cdc:	4a742400 	.word	0x4a742400
 8002ce0:	4bbebc20 	.word	0x4bbebc20

08002ce4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e042      	b.n	8002d7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d106      	bne.n	8002d0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f83b 	bl	8002d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2224      	movs	r2, #36	@ 0x24
 8002d12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0201 	bic.w	r2, r2, #1
 8002d24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 fd9a 	bl	8003868 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f82f 	bl	8002d98 <UART_SetConfig>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d101      	bne.n	8002d44 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e01b      	b.n	8002d7c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fe19 	bl	80039ac <UART_CheckIdleState>
 8002d7a:	4603      	mov	r3, r0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d9c:	b092      	sub	sp, #72	@ 0x48
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002da2:	2300      	movs	r3, #0
 8002da4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	691b      	ldr	r3, [r3, #16]
 8002db0:	431a      	orrs	r2, r3
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	4bbe      	ldr	r3, [pc, #760]	@ (80030c0 <UART_SetConfig+0x328>)
 8002dc8:	4013      	ands	r3, r2
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	6812      	ldr	r2, [r2, #0]
 8002dce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4ab3      	ldr	r2, [pc, #716]	@ (80030c4 <UART_SetConfig+0x32c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d004      	beq.n	8002e04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e00:	4313      	orrs	r3, r2
 8002e02:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	689a      	ldr	r2, [r3, #8]
 8002e0a:	4baf      	ldr	r3, [pc, #700]	@ (80030c8 <UART_SetConfig+0x330>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002e14:	430b      	orrs	r3, r1
 8002e16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e1e:	f023 010f 	bic.w	r1, r3, #15
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4aa6      	ldr	r2, [pc, #664]	@ (80030cc <UART_SetConfig+0x334>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d177      	bne.n	8002f28 <UART_SetConfig+0x190>
 8002e38:	4ba5      	ldr	r3, [pc, #660]	@ (80030d0 <UART_SetConfig+0x338>)
 8002e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e40:	2b28      	cmp	r3, #40	@ 0x28
 8002e42:	d86d      	bhi.n	8002f20 <UART_SetConfig+0x188>
 8002e44:	a201      	add	r2, pc, #4	@ (adr r2, 8002e4c <UART_SetConfig+0xb4>)
 8002e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4a:	bf00      	nop
 8002e4c:	08002ef1 	.word	0x08002ef1
 8002e50:	08002f21 	.word	0x08002f21
 8002e54:	08002f21 	.word	0x08002f21
 8002e58:	08002f21 	.word	0x08002f21
 8002e5c:	08002f21 	.word	0x08002f21
 8002e60:	08002f21 	.word	0x08002f21
 8002e64:	08002f21 	.word	0x08002f21
 8002e68:	08002f21 	.word	0x08002f21
 8002e6c:	08002ef9 	.word	0x08002ef9
 8002e70:	08002f21 	.word	0x08002f21
 8002e74:	08002f21 	.word	0x08002f21
 8002e78:	08002f21 	.word	0x08002f21
 8002e7c:	08002f21 	.word	0x08002f21
 8002e80:	08002f21 	.word	0x08002f21
 8002e84:	08002f21 	.word	0x08002f21
 8002e88:	08002f21 	.word	0x08002f21
 8002e8c:	08002f01 	.word	0x08002f01
 8002e90:	08002f21 	.word	0x08002f21
 8002e94:	08002f21 	.word	0x08002f21
 8002e98:	08002f21 	.word	0x08002f21
 8002e9c:	08002f21 	.word	0x08002f21
 8002ea0:	08002f21 	.word	0x08002f21
 8002ea4:	08002f21 	.word	0x08002f21
 8002ea8:	08002f21 	.word	0x08002f21
 8002eac:	08002f09 	.word	0x08002f09
 8002eb0:	08002f21 	.word	0x08002f21
 8002eb4:	08002f21 	.word	0x08002f21
 8002eb8:	08002f21 	.word	0x08002f21
 8002ebc:	08002f21 	.word	0x08002f21
 8002ec0:	08002f21 	.word	0x08002f21
 8002ec4:	08002f21 	.word	0x08002f21
 8002ec8:	08002f21 	.word	0x08002f21
 8002ecc:	08002f11 	.word	0x08002f11
 8002ed0:	08002f21 	.word	0x08002f21
 8002ed4:	08002f21 	.word	0x08002f21
 8002ed8:	08002f21 	.word	0x08002f21
 8002edc:	08002f21 	.word	0x08002f21
 8002ee0:	08002f21 	.word	0x08002f21
 8002ee4:	08002f21 	.word	0x08002f21
 8002ee8:	08002f21 	.word	0x08002f21
 8002eec:	08002f19 	.word	0x08002f19
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002ef6:	e222      	b.n	800333e <UART_SetConfig+0x5a6>
 8002ef8:	2304      	movs	r3, #4
 8002efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002efe:	e21e      	b.n	800333e <UART_SetConfig+0x5a6>
 8002f00:	2308      	movs	r3, #8
 8002f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f06:	e21a      	b.n	800333e <UART_SetConfig+0x5a6>
 8002f08:	2310      	movs	r3, #16
 8002f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f0e:	e216      	b.n	800333e <UART_SetConfig+0x5a6>
 8002f10:	2320      	movs	r3, #32
 8002f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f16:	e212      	b.n	800333e <UART_SetConfig+0x5a6>
 8002f18:	2340      	movs	r3, #64	@ 0x40
 8002f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f1e:	e20e      	b.n	800333e <UART_SetConfig+0x5a6>
 8002f20:	2380      	movs	r3, #128	@ 0x80
 8002f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f26:	e20a      	b.n	800333e <UART_SetConfig+0x5a6>
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a69      	ldr	r2, [pc, #420]	@ (80030d4 <UART_SetConfig+0x33c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d130      	bne.n	8002f94 <UART_SetConfig+0x1fc>
 8002f32:	4b67      	ldr	r3, [pc, #412]	@ (80030d0 <UART_SetConfig+0x338>)
 8002f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	2b05      	cmp	r3, #5
 8002f3c:	d826      	bhi.n	8002f8c <UART_SetConfig+0x1f4>
 8002f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f44 <UART_SetConfig+0x1ac>)
 8002f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f44:	08002f5d 	.word	0x08002f5d
 8002f48:	08002f65 	.word	0x08002f65
 8002f4c:	08002f6d 	.word	0x08002f6d
 8002f50:	08002f75 	.word	0x08002f75
 8002f54:	08002f7d 	.word	0x08002f7d
 8002f58:	08002f85 	.word	0x08002f85
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f62:	e1ec      	b.n	800333e <UART_SetConfig+0x5a6>
 8002f64:	2304      	movs	r3, #4
 8002f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f6a:	e1e8      	b.n	800333e <UART_SetConfig+0x5a6>
 8002f6c:	2308      	movs	r3, #8
 8002f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f72:	e1e4      	b.n	800333e <UART_SetConfig+0x5a6>
 8002f74:	2310      	movs	r3, #16
 8002f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f7a:	e1e0      	b.n	800333e <UART_SetConfig+0x5a6>
 8002f7c:	2320      	movs	r3, #32
 8002f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f82:	e1dc      	b.n	800333e <UART_SetConfig+0x5a6>
 8002f84:	2340      	movs	r3, #64	@ 0x40
 8002f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f8a:	e1d8      	b.n	800333e <UART_SetConfig+0x5a6>
 8002f8c:	2380      	movs	r3, #128	@ 0x80
 8002f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f92:	e1d4      	b.n	800333e <UART_SetConfig+0x5a6>
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a4f      	ldr	r2, [pc, #316]	@ (80030d8 <UART_SetConfig+0x340>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d130      	bne.n	8003000 <UART_SetConfig+0x268>
 8002f9e:	4b4c      	ldr	r3, [pc, #304]	@ (80030d0 <UART_SetConfig+0x338>)
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa2:	f003 0307 	and.w	r3, r3, #7
 8002fa6:	2b05      	cmp	r3, #5
 8002fa8:	d826      	bhi.n	8002ff8 <UART_SetConfig+0x260>
 8002faa:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb0 <UART_SetConfig+0x218>)
 8002fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb0:	08002fc9 	.word	0x08002fc9
 8002fb4:	08002fd1 	.word	0x08002fd1
 8002fb8:	08002fd9 	.word	0x08002fd9
 8002fbc:	08002fe1 	.word	0x08002fe1
 8002fc0:	08002fe9 	.word	0x08002fe9
 8002fc4:	08002ff1 	.word	0x08002ff1
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002fce:	e1b6      	b.n	800333e <UART_SetConfig+0x5a6>
 8002fd0:	2304      	movs	r3, #4
 8002fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002fd6:	e1b2      	b.n	800333e <UART_SetConfig+0x5a6>
 8002fd8:	2308      	movs	r3, #8
 8002fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002fde:	e1ae      	b.n	800333e <UART_SetConfig+0x5a6>
 8002fe0:	2310      	movs	r3, #16
 8002fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002fe6:	e1aa      	b.n	800333e <UART_SetConfig+0x5a6>
 8002fe8:	2320      	movs	r3, #32
 8002fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002fee:	e1a6      	b.n	800333e <UART_SetConfig+0x5a6>
 8002ff0:	2340      	movs	r3, #64	@ 0x40
 8002ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002ff6:	e1a2      	b.n	800333e <UART_SetConfig+0x5a6>
 8002ff8:	2380      	movs	r3, #128	@ 0x80
 8002ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002ffe:	e19e      	b.n	800333e <UART_SetConfig+0x5a6>
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a35      	ldr	r2, [pc, #212]	@ (80030dc <UART_SetConfig+0x344>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d130      	bne.n	800306c <UART_SetConfig+0x2d4>
 800300a:	4b31      	ldr	r3, [pc, #196]	@ (80030d0 <UART_SetConfig+0x338>)
 800300c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	2b05      	cmp	r3, #5
 8003014:	d826      	bhi.n	8003064 <UART_SetConfig+0x2cc>
 8003016:	a201      	add	r2, pc, #4	@ (adr r2, 800301c <UART_SetConfig+0x284>)
 8003018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301c:	08003035 	.word	0x08003035
 8003020:	0800303d 	.word	0x0800303d
 8003024:	08003045 	.word	0x08003045
 8003028:	0800304d 	.word	0x0800304d
 800302c:	08003055 	.word	0x08003055
 8003030:	0800305d 	.word	0x0800305d
 8003034:	2300      	movs	r3, #0
 8003036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800303a:	e180      	b.n	800333e <UART_SetConfig+0x5a6>
 800303c:	2304      	movs	r3, #4
 800303e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003042:	e17c      	b.n	800333e <UART_SetConfig+0x5a6>
 8003044:	2308      	movs	r3, #8
 8003046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800304a:	e178      	b.n	800333e <UART_SetConfig+0x5a6>
 800304c:	2310      	movs	r3, #16
 800304e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003052:	e174      	b.n	800333e <UART_SetConfig+0x5a6>
 8003054:	2320      	movs	r3, #32
 8003056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800305a:	e170      	b.n	800333e <UART_SetConfig+0x5a6>
 800305c:	2340      	movs	r3, #64	@ 0x40
 800305e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003062:	e16c      	b.n	800333e <UART_SetConfig+0x5a6>
 8003064:	2380      	movs	r3, #128	@ 0x80
 8003066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800306a:	e168      	b.n	800333e <UART_SetConfig+0x5a6>
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a1b      	ldr	r2, [pc, #108]	@ (80030e0 <UART_SetConfig+0x348>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d142      	bne.n	80030fc <UART_SetConfig+0x364>
 8003076:	4b16      	ldr	r3, [pc, #88]	@ (80030d0 <UART_SetConfig+0x338>)
 8003078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	2b05      	cmp	r3, #5
 8003080:	d838      	bhi.n	80030f4 <UART_SetConfig+0x35c>
 8003082:	a201      	add	r2, pc, #4	@ (adr r2, 8003088 <UART_SetConfig+0x2f0>)
 8003084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003088:	080030a1 	.word	0x080030a1
 800308c:	080030a9 	.word	0x080030a9
 8003090:	080030b1 	.word	0x080030b1
 8003094:	080030b9 	.word	0x080030b9
 8003098:	080030e5 	.word	0x080030e5
 800309c:	080030ed 	.word	0x080030ed
 80030a0:	2300      	movs	r3, #0
 80030a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030a6:	e14a      	b.n	800333e <UART_SetConfig+0x5a6>
 80030a8:	2304      	movs	r3, #4
 80030aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030ae:	e146      	b.n	800333e <UART_SetConfig+0x5a6>
 80030b0:	2308      	movs	r3, #8
 80030b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030b6:	e142      	b.n	800333e <UART_SetConfig+0x5a6>
 80030b8:	2310      	movs	r3, #16
 80030ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030be:	e13e      	b.n	800333e <UART_SetConfig+0x5a6>
 80030c0:	cfff69f3 	.word	0xcfff69f3
 80030c4:	58000c00 	.word	0x58000c00
 80030c8:	11fff4ff 	.word	0x11fff4ff
 80030cc:	40011000 	.word	0x40011000
 80030d0:	58024400 	.word	0x58024400
 80030d4:	40004400 	.word	0x40004400
 80030d8:	40004800 	.word	0x40004800
 80030dc:	40004c00 	.word	0x40004c00
 80030e0:	40005000 	.word	0x40005000
 80030e4:	2320      	movs	r3, #32
 80030e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030ea:	e128      	b.n	800333e <UART_SetConfig+0x5a6>
 80030ec:	2340      	movs	r3, #64	@ 0x40
 80030ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030f2:	e124      	b.n	800333e <UART_SetConfig+0x5a6>
 80030f4:	2380      	movs	r3, #128	@ 0x80
 80030f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030fa:	e120      	b.n	800333e <UART_SetConfig+0x5a6>
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4acb      	ldr	r2, [pc, #812]	@ (8003430 <UART_SetConfig+0x698>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d176      	bne.n	80031f4 <UART_SetConfig+0x45c>
 8003106:	4bcb      	ldr	r3, [pc, #812]	@ (8003434 <UART_SetConfig+0x69c>)
 8003108:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800310e:	2b28      	cmp	r3, #40	@ 0x28
 8003110:	d86c      	bhi.n	80031ec <UART_SetConfig+0x454>
 8003112:	a201      	add	r2, pc, #4	@ (adr r2, 8003118 <UART_SetConfig+0x380>)
 8003114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003118:	080031bd 	.word	0x080031bd
 800311c:	080031ed 	.word	0x080031ed
 8003120:	080031ed 	.word	0x080031ed
 8003124:	080031ed 	.word	0x080031ed
 8003128:	080031ed 	.word	0x080031ed
 800312c:	080031ed 	.word	0x080031ed
 8003130:	080031ed 	.word	0x080031ed
 8003134:	080031ed 	.word	0x080031ed
 8003138:	080031c5 	.word	0x080031c5
 800313c:	080031ed 	.word	0x080031ed
 8003140:	080031ed 	.word	0x080031ed
 8003144:	080031ed 	.word	0x080031ed
 8003148:	080031ed 	.word	0x080031ed
 800314c:	080031ed 	.word	0x080031ed
 8003150:	080031ed 	.word	0x080031ed
 8003154:	080031ed 	.word	0x080031ed
 8003158:	080031cd 	.word	0x080031cd
 800315c:	080031ed 	.word	0x080031ed
 8003160:	080031ed 	.word	0x080031ed
 8003164:	080031ed 	.word	0x080031ed
 8003168:	080031ed 	.word	0x080031ed
 800316c:	080031ed 	.word	0x080031ed
 8003170:	080031ed 	.word	0x080031ed
 8003174:	080031ed 	.word	0x080031ed
 8003178:	080031d5 	.word	0x080031d5
 800317c:	080031ed 	.word	0x080031ed
 8003180:	080031ed 	.word	0x080031ed
 8003184:	080031ed 	.word	0x080031ed
 8003188:	080031ed 	.word	0x080031ed
 800318c:	080031ed 	.word	0x080031ed
 8003190:	080031ed 	.word	0x080031ed
 8003194:	080031ed 	.word	0x080031ed
 8003198:	080031dd 	.word	0x080031dd
 800319c:	080031ed 	.word	0x080031ed
 80031a0:	080031ed 	.word	0x080031ed
 80031a4:	080031ed 	.word	0x080031ed
 80031a8:	080031ed 	.word	0x080031ed
 80031ac:	080031ed 	.word	0x080031ed
 80031b0:	080031ed 	.word	0x080031ed
 80031b4:	080031ed 	.word	0x080031ed
 80031b8:	080031e5 	.word	0x080031e5
 80031bc:	2301      	movs	r3, #1
 80031be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031c2:	e0bc      	b.n	800333e <UART_SetConfig+0x5a6>
 80031c4:	2304      	movs	r3, #4
 80031c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031ca:	e0b8      	b.n	800333e <UART_SetConfig+0x5a6>
 80031cc:	2308      	movs	r3, #8
 80031ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031d2:	e0b4      	b.n	800333e <UART_SetConfig+0x5a6>
 80031d4:	2310      	movs	r3, #16
 80031d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031da:	e0b0      	b.n	800333e <UART_SetConfig+0x5a6>
 80031dc:	2320      	movs	r3, #32
 80031de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031e2:	e0ac      	b.n	800333e <UART_SetConfig+0x5a6>
 80031e4:	2340      	movs	r3, #64	@ 0x40
 80031e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031ea:	e0a8      	b.n	800333e <UART_SetConfig+0x5a6>
 80031ec:	2380      	movs	r3, #128	@ 0x80
 80031ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031f2:	e0a4      	b.n	800333e <UART_SetConfig+0x5a6>
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a8f      	ldr	r2, [pc, #572]	@ (8003438 <UART_SetConfig+0x6a0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d130      	bne.n	8003260 <UART_SetConfig+0x4c8>
 80031fe:	4b8d      	ldr	r3, [pc, #564]	@ (8003434 <UART_SetConfig+0x69c>)
 8003200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	2b05      	cmp	r3, #5
 8003208:	d826      	bhi.n	8003258 <UART_SetConfig+0x4c0>
 800320a:	a201      	add	r2, pc, #4	@ (adr r2, 8003210 <UART_SetConfig+0x478>)
 800320c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003210:	08003229 	.word	0x08003229
 8003214:	08003231 	.word	0x08003231
 8003218:	08003239 	.word	0x08003239
 800321c:	08003241 	.word	0x08003241
 8003220:	08003249 	.word	0x08003249
 8003224:	08003251 	.word	0x08003251
 8003228:	2300      	movs	r3, #0
 800322a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800322e:	e086      	b.n	800333e <UART_SetConfig+0x5a6>
 8003230:	2304      	movs	r3, #4
 8003232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003236:	e082      	b.n	800333e <UART_SetConfig+0x5a6>
 8003238:	2308      	movs	r3, #8
 800323a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800323e:	e07e      	b.n	800333e <UART_SetConfig+0x5a6>
 8003240:	2310      	movs	r3, #16
 8003242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003246:	e07a      	b.n	800333e <UART_SetConfig+0x5a6>
 8003248:	2320      	movs	r3, #32
 800324a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800324e:	e076      	b.n	800333e <UART_SetConfig+0x5a6>
 8003250:	2340      	movs	r3, #64	@ 0x40
 8003252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003256:	e072      	b.n	800333e <UART_SetConfig+0x5a6>
 8003258:	2380      	movs	r3, #128	@ 0x80
 800325a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800325e:	e06e      	b.n	800333e <UART_SetConfig+0x5a6>
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a75      	ldr	r2, [pc, #468]	@ (800343c <UART_SetConfig+0x6a4>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d130      	bne.n	80032cc <UART_SetConfig+0x534>
 800326a:	4b72      	ldr	r3, [pc, #456]	@ (8003434 <UART_SetConfig+0x69c>)
 800326c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	2b05      	cmp	r3, #5
 8003274:	d826      	bhi.n	80032c4 <UART_SetConfig+0x52c>
 8003276:	a201      	add	r2, pc, #4	@ (adr r2, 800327c <UART_SetConfig+0x4e4>)
 8003278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800327c:	08003295 	.word	0x08003295
 8003280:	0800329d 	.word	0x0800329d
 8003284:	080032a5 	.word	0x080032a5
 8003288:	080032ad 	.word	0x080032ad
 800328c:	080032b5 	.word	0x080032b5
 8003290:	080032bd 	.word	0x080032bd
 8003294:	2300      	movs	r3, #0
 8003296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800329a:	e050      	b.n	800333e <UART_SetConfig+0x5a6>
 800329c:	2304      	movs	r3, #4
 800329e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032a2:	e04c      	b.n	800333e <UART_SetConfig+0x5a6>
 80032a4:	2308      	movs	r3, #8
 80032a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032aa:	e048      	b.n	800333e <UART_SetConfig+0x5a6>
 80032ac:	2310      	movs	r3, #16
 80032ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032b2:	e044      	b.n	800333e <UART_SetConfig+0x5a6>
 80032b4:	2320      	movs	r3, #32
 80032b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032ba:	e040      	b.n	800333e <UART_SetConfig+0x5a6>
 80032bc:	2340      	movs	r3, #64	@ 0x40
 80032be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032c2:	e03c      	b.n	800333e <UART_SetConfig+0x5a6>
 80032c4:	2380      	movs	r3, #128	@ 0x80
 80032c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032ca:	e038      	b.n	800333e <UART_SetConfig+0x5a6>
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a5b      	ldr	r2, [pc, #364]	@ (8003440 <UART_SetConfig+0x6a8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d130      	bne.n	8003338 <UART_SetConfig+0x5a0>
 80032d6:	4b57      	ldr	r3, [pc, #348]	@ (8003434 <UART_SetConfig+0x69c>)
 80032d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	2b05      	cmp	r3, #5
 80032e0:	d826      	bhi.n	8003330 <UART_SetConfig+0x598>
 80032e2:	a201      	add	r2, pc, #4	@ (adr r2, 80032e8 <UART_SetConfig+0x550>)
 80032e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e8:	08003301 	.word	0x08003301
 80032ec:	08003309 	.word	0x08003309
 80032f0:	08003311 	.word	0x08003311
 80032f4:	08003319 	.word	0x08003319
 80032f8:	08003321 	.word	0x08003321
 80032fc:	08003329 	.word	0x08003329
 8003300:	2302      	movs	r3, #2
 8003302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003306:	e01a      	b.n	800333e <UART_SetConfig+0x5a6>
 8003308:	2304      	movs	r3, #4
 800330a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800330e:	e016      	b.n	800333e <UART_SetConfig+0x5a6>
 8003310:	2308      	movs	r3, #8
 8003312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003316:	e012      	b.n	800333e <UART_SetConfig+0x5a6>
 8003318:	2310      	movs	r3, #16
 800331a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800331e:	e00e      	b.n	800333e <UART_SetConfig+0x5a6>
 8003320:	2320      	movs	r3, #32
 8003322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003326:	e00a      	b.n	800333e <UART_SetConfig+0x5a6>
 8003328:	2340      	movs	r3, #64	@ 0x40
 800332a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800332e:	e006      	b.n	800333e <UART_SetConfig+0x5a6>
 8003330:	2380      	movs	r3, #128	@ 0x80
 8003332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003336:	e002      	b.n	800333e <UART_SetConfig+0x5a6>
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a3f      	ldr	r2, [pc, #252]	@ (8003440 <UART_SetConfig+0x6a8>)
 8003344:	4293      	cmp	r3, r2
 8003346:	f040 80f8 	bne.w	800353a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800334a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800334e:	2b20      	cmp	r3, #32
 8003350:	dc46      	bgt.n	80033e0 <UART_SetConfig+0x648>
 8003352:	2b02      	cmp	r3, #2
 8003354:	f2c0 8082 	blt.w	800345c <UART_SetConfig+0x6c4>
 8003358:	3b02      	subs	r3, #2
 800335a:	2b1e      	cmp	r3, #30
 800335c:	d87e      	bhi.n	800345c <UART_SetConfig+0x6c4>
 800335e:	a201      	add	r2, pc, #4	@ (adr r2, 8003364 <UART_SetConfig+0x5cc>)
 8003360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003364:	080033e7 	.word	0x080033e7
 8003368:	0800345d 	.word	0x0800345d
 800336c:	080033ef 	.word	0x080033ef
 8003370:	0800345d 	.word	0x0800345d
 8003374:	0800345d 	.word	0x0800345d
 8003378:	0800345d 	.word	0x0800345d
 800337c:	080033ff 	.word	0x080033ff
 8003380:	0800345d 	.word	0x0800345d
 8003384:	0800345d 	.word	0x0800345d
 8003388:	0800345d 	.word	0x0800345d
 800338c:	0800345d 	.word	0x0800345d
 8003390:	0800345d 	.word	0x0800345d
 8003394:	0800345d 	.word	0x0800345d
 8003398:	0800345d 	.word	0x0800345d
 800339c:	0800340f 	.word	0x0800340f
 80033a0:	0800345d 	.word	0x0800345d
 80033a4:	0800345d 	.word	0x0800345d
 80033a8:	0800345d 	.word	0x0800345d
 80033ac:	0800345d 	.word	0x0800345d
 80033b0:	0800345d 	.word	0x0800345d
 80033b4:	0800345d 	.word	0x0800345d
 80033b8:	0800345d 	.word	0x0800345d
 80033bc:	0800345d 	.word	0x0800345d
 80033c0:	0800345d 	.word	0x0800345d
 80033c4:	0800345d 	.word	0x0800345d
 80033c8:	0800345d 	.word	0x0800345d
 80033cc:	0800345d 	.word	0x0800345d
 80033d0:	0800345d 	.word	0x0800345d
 80033d4:	0800345d 	.word	0x0800345d
 80033d8:	0800345d 	.word	0x0800345d
 80033dc:	0800344f 	.word	0x0800344f
 80033e0:	2b40      	cmp	r3, #64	@ 0x40
 80033e2:	d037      	beq.n	8003454 <UART_SetConfig+0x6bc>
 80033e4:	e03a      	b.n	800345c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80033e6:	f7ff f9bf 	bl	8002768 <HAL_RCCEx_GetD3PCLK1Freq>
 80033ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80033ec:	e03c      	b.n	8003468 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80033ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff f9ce 	bl	8002794 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80033f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80033fc:	e034      	b.n	8003468 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80033fe:	f107 0318 	add.w	r3, r7, #24
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff fb1a 	bl	8002a3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800340c:	e02c      	b.n	8003468 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800340e:	4b09      	ldr	r3, [pc, #36]	@ (8003434 <UART_SetConfig+0x69c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b00      	cmp	r3, #0
 8003418:	d016      	beq.n	8003448 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800341a:	4b06      	ldr	r3, [pc, #24]	@ (8003434 <UART_SetConfig+0x69c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	08db      	lsrs	r3, r3, #3
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	4a07      	ldr	r2, [pc, #28]	@ (8003444 <UART_SetConfig+0x6ac>)
 8003426:	fa22 f303 	lsr.w	r3, r2, r3
 800342a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800342c:	e01c      	b.n	8003468 <UART_SetConfig+0x6d0>
 800342e:	bf00      	nop
 8003430:	40011400 	.word	0x40011400
 8003434:	58024400 	.word	0x58024400
 8003438:	40007800 	.word	0x40007800
 800343c:	40007c00 	.word	0x40007c00
 8003440:	58000c00 	.word	0x58000c00
 8003444:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8003448:	4b9d      	ldr	r3, [pc, #628]	@ (80036c0 <UART_SetConfig+0x928>)
 800344a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800344c:	e00c      	b.n	8003468 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800344e:	4b9d      	ldr	r3, [pc, #628]	@ (80036c4 <UART_SetConfig+0x92c>)
 8003450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003452:	e009      	b.n	8003468 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003454:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003458:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800345a:	e005      	b.n	8003468 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003466:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 81de 	beq.w	800382c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003474:	4a94      	ldr	r2, [pc, #592]	@ (80036c8 <UART_SetConfig+0x930>)
 8003476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800347a:	461a      	mov	r2, r3
 800347c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800347e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003482:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	4413      	add	r3, r2
 800348e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003490:	429a      	cmp	r2, r3
 8003492:	d305      	bcc.n	80034a0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800349a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800349c:	429a      	cmp	r2, r3
 800349e:	d903      	bls.n	80034a8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80034a6:	e1c1      	b.n	800382c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034aa:	2200      	movs	r2, #0
 80034ac:	60bb      	str	r3, [r7, #8]
 80034ae:	60fa      	str	r2, [r7, #12]
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b4:	4a84      	ldr	r2, [pc, #528]	@ (80036c8 <UART_SetConfig+0x930>)
 80034b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2200      	movs	r2, #0
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034ca:	f7fc ff05 	bl	80002d8 <__aeabi_uldivmod>
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	4610      	mov	r0, r2
 80034d4:	4619      	mov	r1, r3
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	020b      	lsls	r3, r1, #8
 80034e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80034e4:	0202      	lsls	r2, r0, #8
 80034e6:	6979      	ldr	r1, [r7, #20]
 80034e8:	6849      	ldr	r1, [r1, #4]
 80034ea:	0849      	lsrs	r1, r1, #1
 80034ec:	2000      	movs	r0, #0
 80034ee:	460c      	mov	r4, r1
 80034f0:	4605      	mov	r5, r0
 80034f2:	eb12 0804 	adds.w	r8, r2, r4
 80034f6:	eb43 0905 	adc.w	r9, r3, r5
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	469a      	mov	sl, r3
 8003502:	4693      	mov	fp, r2
 8003504:	4652      	mov	r2, sl
 8003506:	465b      	mov	r3, fp
 8003508:	4640      	mov	r0, r8
 800350a:	4649      	mov	r1, r9
 800350c:	f7fc fee4 	bl	80002d8 <__aeabi_uldivmod>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4613      	mov	r3, r2
 8003516:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800351a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800351e:	d308      	bcc.n	8003532 <UART_SetConfig+0x79a>
 8003520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003522:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003526:	d204      	bcs.n	8003532 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800352e:	60da      	str	r2, [r3, #12]
 8003530:	e17c      	b.n	800382c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003538:	e178      	b.n	800382c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003542:	f040 80c5 	bne.w	80036d0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8003546:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800354a:	2b20      	cmp	r3, #32
 800354c:	dc48      	bgt.n	80035e0 <UART_SetConfig+0x848>
 800354e:	2b00      	cmp	r3, #0
 8003550:	db7b      	blt.n	800364a <UART_SetConfig+0x8b2>
 8003552:	2b20      	cmp	r3, #32
 8003554:	d879      	bhi.n	800364a <UART_SetConfig+0x8b2>
 8003556:	a201      	add	r2, pc, #4	@ (adr r2, 800355c <UART_SetConfig+0x7c4>)
 8003558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355c:	080035e7 	.word	0x080035e7
 8003560:	080035ef 	.word	0x080035ef
 8003564:	0800364b 	.word	0x0800364b
 8003568:	0800364b 	.word	0x0800364b
 800356c:	080035f7 	.word	0x080035f7
 8003570:	0800364b 	.word	0x0800364b
 8003574:	0800364b 	.word	0x0800364b
 8003578:	0800364b 	.word	0x0800364b
 800357c:	08003607 	.word	0x08003607
 8003580:	0800364b 	.word	0x0800364b
 8003584:	0800364b 	.word	0x0800364b
 8003588:	0800364b 	.word	0x0800364b
 800358c:	0800364b 	.word	0x0800364b
 8003590:	0800364b 	.word	0x0800364b
 8003594:	0800364b 	.word	0x0800364b
 8003598:	0800364b 	.word	0x0800364b
 800359c:	08003617 	.word	0x08003617
 80035a0:	0800364b 	.word	0x0800364b
 80035a4:	0800364b 	.word	0x0800364b
 80035a8:	0800364b 	.word	0x0800364b
 80035ac:	0800364b 	.word	0x0800364b
 80035b0:	0800364b 	.word	0x0800364b
 80035b4:	0800364b 	.word	0x0800364b
 80035b8:	0800364b 	.word	0x0800364b
 80035bc:	0800364b 	.word	0x0800364b
 80035c0:	0800364b 	.word	0x0800364b
 80035c4:	0800364b 	.word	0x0800364b
 80035c8:	0800364b 	.word	0x0800364b
 80035cc:	0800364b 	.word	0x0800364b
 80035d0:	0800364b 	.word	0x0800364b
 80035d4:	0800364b 	.word	0x0800364b
 80035d8:	0800364b 	.word	0x0800364b
 80035dc:	0800363d 	.word	0x0800363d
 80035e0:	2b40      	cmp	r3, #64	@ 0x40
 80035e2:	d02e      	beq.n	8003642 <UART_SetConfig+0x8aa>
 80035e4:	e031      	b.n	800364a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035e6:	f7ff f893 	bl	8002710 <HAL_RCC_GetPCLK1Freq>
 80035ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80035ec:	e033      	b.n	8003656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035ee:	f7ff f8a5 	bl	800273c <HAL_RCC_GetPCLK2Freq>
 80035f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80035f4:	e02f      	b.n	8003656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80035f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff f8ca 	bl	8002794 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003604:	e027      	b.n	8003656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003606:	f107 0318 	add.w	r3, r7, #24
 800360a:	4618      	mov	r0, r3
 800360c:	f7ff fa16 	bl	8002a3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003614:	e01f      	b.n	8003656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003616:	4b2d      	ldr	r3, [pc, #180]	@ (80036cc <UART_SetConfig+0x934>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0320 	and.w	r3, r3, #32
 800361e:	2b00      	cmp	r3, #0
 8003620:	d009      	beq.n	8003636 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003622:	4b2a      	ldr	r3, [pc, #168]	@ (80036cc <UART_SetConfig+0x934>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	08db      	lsrs	r3, r3, #3
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	4a24      	ldr	r2, [pc, #144]	@ (80036c0 <UART_SetConfig+0x928>)
 800362e:	fa22 f303 	lsr.w	r3, r2, r3
 8003632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003634:	e00f      	b.n	8003656 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8003636:	4b22      	ldr	r3, [pc, #136]	@ (80036c0 <UART_SetConfig+0x928>)
 8003638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800363a:	e00c      	b.n	8003656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800363c:	4b21      	ldr	r3, [pc, #132]	@ (80036c4 <UART_SetConfig+0x92c>)
 800363e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003640:	e009      	b.n	8003656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003642:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003648:	e005      	b.n	8003656 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003654:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80e7 	beq.w	800382c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003662:	4a19      	ldr	r2, [pc, #100]	@ (80036c8 <UART_SetConfig+0x930>)
 8003664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003668:	461a      	mov	r2, r3
 800366a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800366c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003670:	005a      	lsls	r2, r3, #1
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	085b      	lsrs	r3, r3, #1
 8003678:	441a      	add	r2, r3
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003682:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003686:	2b0f      	cmp	r3, #15
 8003688:	d916      	bls.n	80036b8 <UART_SetConfig+0x920>
 800368a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800368c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003690:	d212      	bcs.n	80036b8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003694:	b29b      	uxth	r3, r3
 8003696:	f023 030f 	bic.w	r3, r3, #15
 800369a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800369c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800369e:	085b      	lsrs	r3, r3, #1
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	f003 0307 	and.w	r3, r3, #7
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80036aa:	4313      	orrs	r3, r2
 80036ac:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80036b4:	60da      	str	r2, [r3, #12]
 80036b6:	e0b9      	b.n	800382c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80036be:	e0b5      	b.n	800382c <UART_SetConfig+0xa94>
 80036c0:	03d09000 	.word	0x03d09000
 80036c4:	003d0900 	.word	0x003d0900
 80036c8:	08003d34 	.word	0x08003d34
 80036cc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80036d0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	dc49      	bgt.n	800376c <UART_SetConfig+0x9d4>
 80036d8:	2b00      	cmp	r3, #0
 80036da:	db7c      	blt.n	80037d6 <UART_SetConfig+0xa3e>
 80036dc:	2b20      	cmp	r3, #32
 80036de:	d87a      	bhi.n	80037d6 <UART_SetConfig+0xa3e>
 80036e0:	a201      	add	r2, pc, #4	@ (adr r2, 80036e8 <UART_SetConfig+0x950>)
 80036e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e6:	bf00      	nop
 80036e8:	08003773 	.word	0x08003773
 80036ec:	0800377b 	.word	0x0800377b
 80036f0:	080037d7 	.word	0x080037d7
 80036f4:	080037d7 	.word	0x080037d7
 80036f8:	08003783 	.word	0x08003783
 80036fc:	080037d7 	.word	0x080037d7
 8003700:	080037d7 	.word	0x080037d7
 8003704:	080037d7 	.word	0x080037d7
 8003708:	08003793 	.word	0x08003793
 800370c:	080037d7 	.word	0x080037d7
 8003710:	080037d7 	.word	0x080037d7
 8003714:	080037d7 	.word	0x080037d7
 8003718:	080037d7 	.word	0x080037d7
 800371c:	080037d7 	.word	0x080037d7
 8003720:	080037d7 	.word	0x080037d7
 8003724:	080037d7 	.word	0x080037d7
 8003728:	080037a3 	.word	0x080037a3
 800372c:	080037d7 	.word	0x080037d7
 8003730:	080037d7 	.word	0x080037d7
 8003734:	080037d7 	.word	0x080037d7
 8003738:	080037d7 	.word	0x080037d7
 800373c:	080037d7 	.word	0x080037d7
 8003740:	080037d7 	.word	0x080037d7
 8003744:	080037d7 	.word	0x080037d7
 8003748:	080037d7 	.word	0x080037d7
 800374c:	080037d7 	.word	0x080037d7
 8003750:	080037d7 	.word	0x080037d7
 8003754:	080037d7 	.word	0x080037d7
 8003758:	080037d7 	.word	0x080037d7
 800375c:	080037d7 	.word	0x080037d7
 8003760:	080037d7 	.word	0x080037d7
 8003764:	080037d7 	.word	0x080037d7
 8003768:	080037c9 	.word	0x080037c9
 800376c:	2b40      	cmp	r3, #64	@ 0x40
 800376e:	d02e      	beq.n	80037ce <UART_SetConfig+0xa36>
 8003770:	e031      	b.n	80037d6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003772:	f7fe ffcd 	bl	8002710 <HAL_RCC_GetPCLK1Freq>
 8003776:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003778:	e033      	b.n	80037e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800377a:	f7fe ffdf 	bl	800273c <HAL_RCC_GetPCLK2Freq>
 800377e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003780:	e02f      	b.n	80037e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff f804 	bl	8002794 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800378c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003790:	e027      	b.n	80037e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003792:	f107 0318 	add.w	r3, r7, #24
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff f950 	bl	8002a3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80037a0:	e01f      	b.n	80037e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003858 <UART_SetConfig+0xac0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d009      	beq.n	80037c2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80037ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003858 <UART_SetConfig+0xac0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	08db      	lsrs	r3, r3, #3
 80037b4:	f003 0303 	and.w	r3, r3, #3
 80037b8:	4a28      	ldr	r2, [pc, #160]	@ (800385c <UART_SetConfig+0xac4>)
 80037ba:	fa22 f303 	lsr.w	r3, r2, r3
 80037be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80037c0:	e00f      	b.n	80037e2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80037c2:	4b26      	ldr	r3, [pc, #152]	@ (800385c <UART_SetConfig+0xac4>)
 80037c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80037c6:	e00c      	b.n	80037e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80037c8:	4b25      	ldr	r3, [pc, #148]	@ (8003860 <UART_SetConfig+0xac8>)
 80037ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80037cc:	e009      	b.n	80037e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80037d4:	e005      	b.n	80037e2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80037e0:	bf00      	nop
    }

    if (pclk != 0U)
 80037e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d021      	beq.n	800382c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003864 <UART_SetConfig+0xacc>)
 80037ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037f2:	461a      	mov	r2, r3
 80037f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	085b      	lsrs	r3, r3, #1
 8003800:	441a      	add	r2, r3
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	fbb2 f3f3 	udiv	r3, r2, r3
 800380a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800380c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800380e:	2b0f      	cmp	r3, #15
 8003810:	d909      	bls.n	8003826 <UART_SetConfig+0xa8e>
 8003812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003818:	d205      	bcs.n	8003826 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800381a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800381c:	b29a      	uxth	r2, r3
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	60da      	str	r2, [r3, #12]
 8003824:	e002      	b.n	800382c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2201      	movs	r2, #1
 8003830:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2201      	movs	r2, #1
 8003838:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2200      	movs	r2, #0
 8003840:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	2200      	movs	r2, #0
 8003846:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003848:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800384c:	4618      	mov	r0, r3
 800384e:	3748      	adds	r7, #72	@ 0x48
 8003850:	46bd      	mov	sp, r7
 8003852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003856:	bf00      	nop
 8003858:	58024400 	.word	0x58024400
 800385c:	03d09000 	.word	0x03d09000
 8003860:	003d0900 	.word	0x003d0900
 8003864:	08003d34 	.word	0x08003d34

08003868 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00a      	beq.n	8003892 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	430a      	orrs	r2, r1
 80038b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00a      	beq.n	80038d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fc:	f003 0310 	and.w	r3, r3, #16
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00a      	beq.n	800391a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003944:	2b00      	cmp	r3, #0
 8003946:	d01a      	beq.n	800397e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003962:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003966:	d10a      	bne.n	800397e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	605a      	str	r2, [r3, #4]
  }
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b098      	sub	sp, #96	@ 0x60
 80039b0:	af02      	add	r7, sp, #8
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039bc:	f7fd faf0 	bl	8000fa0 <HAL_GetTick>
 80039c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0308 	and.w	r3, r3, #8
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d12f      	bne.n	8003a30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d8:	2200      	movs	r2, #0
 80039da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f88e 	bl	8003b00 <UART_WaitOnFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d022      	beq.n	8003a30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f2:	e853 3f00 	ldrex	r3, [r3]
 80039f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a08:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a0a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a10:	e841 2300 	strex	r3, r2, [r1]
 8003a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1e6      	bne.n	80039ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e063      	b.n	8003af8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d149      	bne.n	8003ad2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a3e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a46:	2200      	movs	r2, #0
 8003a48:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f857 	bl	8003b00 <UART_WaitOnFlagUntilTimeout>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d03c      	beq.n	8003ad2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a60:	e853 3f00 	ldrex	r3, [r3]
 8003a64:	623b      	str	r3, [r7, #32]
   return(result);
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a76:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a78:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e6      	bne.n	8003a58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3308      	adds	r3, #8
 8003a90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003aaa:	61fa      	str	r2, [r7, #28]
 8003aac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	69b9      	ldr	r1, [r7, #24]
 8003ab0:	69fa      	ldr	r2, [r7, #28]
 8003ab2:	e841 2300 	strex	r3, r2, [r1]
 8003ab6:	617b      	str	r3, [r7, #20]
   return(result);
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e5      	bne.n	8003a8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e012      	b.n	8003af8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2220      	movs	r2, #32
 8003ad6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3758      	adds	r7, #88	@ 0x58
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b10:	e04f      	b.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b18:	d04b      	beq.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b1a:	f7fd fa41 	bl	8000fa0 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d302      	bcc.n	8003b30 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e04e      	b.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0304 	and.w	r3, r3, #4
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d037      	beq.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	2b80      	cmp	r3, #128	@ 0x80
 8003b46:	d034      	beq.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b40      	cmp	r3, #64	@ 0x40
 8003b4c:	d031      	beq.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b08      	cmp	r3, #8
 8003b5a:	d110      	bne.n	8003b7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2208      	movs	r2, #8
 8003b62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f839 	bl	8003bdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2208      	movs	r2, #8
 8003b6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e029      	b.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	69db      	ldr	r3, [r3, #28]
 8003b84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b8c:	d111      	bne.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 f81f 	bl	8003bdc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e00f      	b.n	8003bd2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	69da      	ldr	r2, [r3, #28]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	68ba      	ldr	r2, [r7, #8]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	bf0c      	ite	eq
 8003bc2:	2301      	moveq	r3, #1
 8003bc4:	2300      	movne	r3, #0
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	79fb      	ldrb	r3, [r7, #7]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d0a0      	beq.n	8003b12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b095      	sub	sp, #84	@ 0x54
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c02:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c04:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c08:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1e6      	bne.n	8003be4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3308      	adds	r3, #8
 8003c1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	e853 3f00 	ldrex	r3, [r3]
 8003c24:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c26:	69fa      	ldr	r2, [r7, #28]
 8003c28:	4b1e      	ldr	r3, [pc, #120]	@ (8003ca4 <UART_EndRxTransfer+0xc8>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3308      	adds	r3, #8
 8003c34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c3e:	e841 2300 	strex	r3, r2, [r1]
 8003c42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1e5      	bne.n	8003c16 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d118      	bne.n	8003c84 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	e853 3f00 	ldrex	r3, [r3]
 8003c5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f023 0310 	bic.w	r3, r3, #16
 8003c66:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c70:	61bb      	str	r3, [r7, #24]
 8003c72:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c74:	6979      	ldr	r1, [r7, #20]
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	e841 2300 	strex	r3, r2, [r1]
 8003c7c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e6      	bne.n	8003c52 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003c98:	bf00      	nop
 8003c9a:	3754      	adds	r7, #84	@ 0x54
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	effffffe 	.word	0xeffffffe

08003ca8 <memset>:
 8003ca8:	4402      	add	r2, r0
 8003caa:	4603      	mov	r3, r0
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d100      	bne.n	8003cb2 <memset+0xa>
 8003cb0:	4770      	bx	lr
 8003cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003cb6:	e7f9      	b.n	8003cac <memset+0x4>

08003cb8 <__libc_init_array>:
 8003cb8:	b570      	push	{r4, r5, r6, lr}
 8003cba:	4d0d      	ldr	r5, [pc, #52]	@ (8003cf0 <__libc_init_array+0x38>)
 8003cbc:	4c0d      	ldr	r4, [pc, #52]	@ (8003cf4 <__libc_init_array+0x3c>)
 8003cbe:	1b64      	subs	r4, r4, r5
 8003cc0:	10a4      	asrs	r4, r4, #2
 8003cc2:	2600      	movs	r6, #0
 8003cc4:	42a6      	cmp	r6, r4
 8003cc6:	d109      	bne.n	8003cdc <__libc_init_array+0x24>
 8003cc8:	4d0b      	ldr	r5, [pc, #44]	@ (8003cf8 <__libc_init_array+0x40>)
 8003cca:	4c0c      	ldr	r4, [pc, #48]	@ (8003cfc <__libc_init_array+0x44>)
 8003ccc:	f000 f818 	bl	8003d00 <_init>
 8003cd0:	1b64      	subs	r4, r4, r5
 8003cd2:	10a4      	asrs	r4, r4, #2
 8003cd4:	2600      	movs	r6, #0
 8003cd6:	42a6      	cmp	r6, r4
 8003cd8:	d105      	bne.n	8003ce6 <__libc_init_array+0x2e>
 8003cda:	bd70      	pop	{r4, r5, r6, pc}
 8003cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce0:	4798      	blx	r3
 8003ce2:	3601      	adds	r6, #1
 8003ce4:	e7ee      	b.n	8003cc4 <__libc_init_array+0xc>
 8003ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cea:	4798      	blx	r3
 8003cec:	3601      	adds	r6, #1
 8003cee:	e7f2      	b.n	8003cd6 <__libc_init_array+0x1e>
 8003cf0:	08003d54 	.word	0x08003d54
 8003cf4:	08003d54 	.word	0x08003d54
 8003cf8:	08003d54 	.word	0x08003d54
 8003cfc:	08003d58 	.word	0x08003d58

08003d00 <_init>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	bf00      	nop
 8003d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d06:	bc08      	pop	{r3}
 8003d08:	469e      	mov	lr, r3
 8003d0a:	4770      	bx	lr

08003d0c <_fini>:
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	bf00      	nop
 8003d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d12:	bc08      	pop	{r3}
 8003d14:	469e      	mov	lr, r3
 8003d16:	4770      	bx	lr
