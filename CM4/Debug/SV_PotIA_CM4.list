
SV_PotIA_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f38  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  081091d8  081091d8  0000a1d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08109590  08109590  0000a590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08109598  08109598  0000a598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0810959c  0810959c  0000a59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  10000000  081095a0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000728  100001dc  0810977c  0000b1dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  10000904  0810977c  0000b904  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000b1dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018214  00000000  00000000  0000b20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ead  00000000  00000000  00023420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001238  00000000  00000000  000262d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000dcb  00000000  00000000  00027508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ba52  00000000  00000000  000282d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000166d1  00000000  00000000  00063d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00181ce2  00000000  00000000  0007a3f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001fc0d8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005cfc  00000000  00000000  001fc11c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  00201e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001dc 	.word	0x100001dc
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081091c0 	.word	0x081091c0

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001e0 	.word	0x100001e0
 81002dc:	081091c0 	.word	0x081091c0

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	@ 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_uldivmod>:
 8100cb8:	b953      	cbnz	r3, 8100cd0 <__aeabi_uldivmod+0x18>
 8100cba:	b94a      	cbnz	r2, 8100cd0 <__aeabi_uldivmod+0x18>
 8100cbc:	2900      	cmp	r1, #0
 8100cbe:	bf08      	it	eq
 8100cc0:	2800      	cmpeq	r0, #0
 8100cc2:	bf1c      	itt	ne
 8100cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8100cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8100ccc:	f000 b96a 	b.w	8100fa4 <__aeabi_idiv0>
 8100cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100cd8:	f000 f806 	bl	8100ce8 <__udivmoddi4>
 8100cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100ce4:	b004      	add	sp, #16
 8100ce6:	4770      	bx	lr

08100ce8 <__udivmoddi4>:
 8100ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100cec:	9d08      	ldr	r5, [sp, #32]
 8100cee:	460c      	mov	r4, r1
 8100cf0:	2b00      	cmp	r3, #0
 8100cf2:	d14e      	bne.n	8100d92 <__udivmoddi4+0xaa>
 8100cf4:	4694      	mov	ip, r2
 8100cf6:	458c      	cmp	ip, r1
 8100cf8:	4686      	mov	lr, r0
 8100cfa:	fab2 f282 	clz	r2, r2
 8100cfe:	d962      	bls.n	8100dc6 <__udivmoddi4+0xde>
 8100d00:	b14a      	cbz	r2, 8100d16 <__udivmoddi4+0x2e>
 8100d02:	f1c2 0320 	rsb	r3, r2, #32
 8100d06:	4091      	lsls	r1, r2
 8100d08:	fa20 f303 	lsr.w	r3, r0, r3
 8100d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8100d10:	4319      	orrs	r1, r3
 8100d12:	fa00 fe02 	lsl.w	lr, r0, r2
 8100d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100d1a:	fa1f f68c 	uxth.w	r6, ip
 8100d1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8100d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100d26:	fb07 1114 	mls	r1, r7, r4, r1
 8100d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100d2e:	fb04 f106 	mul.w	r1, r4, r6
 8100d32:	4299      	cmp	r1, r3
 8100d34:	d90a      	bls.n	8100d4c <__udivmoddi4+0x64>
 8100d36:	eb1c 0303 	adds.w	r3, ip, r3
 8100d3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8100d3e:	f080 8112 	bcs.w	8100f66 <__udivmoddi4+0x27e>
 8100d42:	4299      	cmp	r1, r3
 8100d44:	f240 810f 	bls.w	8100f66 <__udivmoddi4+0x27e>
 8100d48:	3c02      	subs	r4, #2
 8100d4a:	4463      	add	r3, ip
 8100d4c:	1a59      	subs	r1, r3, r1
 8100d4e:	fa1f f38e 	uxth.w	r3, lr
 8100d52:	fbb1 f0f7 	udiv	r0, r1, r7
 8100d56:	fb07 1110 	mls	r1, r7, r0, r1
 8100d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100d5e:	fb00 f606 	mul.w	r6, r0, r6
 8100d62:	429e      	cmp	r6, r3
 8100d64:	d90a      	bls.n	8100d7c <__udivmoddi4+0x94>
 8100d66:	eb1c 0303 	adds.w	r3, ip, r3
 8100d6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8100d6e:	f080 80fc 	bcs.w	8100f6a <__udivmoddi4+0x282>
 8100d72:	429e      	cmp	r6, r3
 8100d74:	f240 80f9 	bls.w	8100f6a <__udivmoddi4+0x282>
 8100d78:	4463      	add	r3, ip
 8100d7a:	3802      	subs	r0, #2
 8100d7c:	1b9b      	subs	r3, r3, r6
 8100d7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8100d82:	2100      	movs	r1, #0
 8100d84:	b11d      	cbz	r5, 8100d8e <__udivmoddi4+0xa6>
 8100d86:	40d3      	lsrs	r3, r2
 8100d88:	2200      	movs	r2, #0
 8100d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8100d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100d92:	428b      	cmp	r3, r1
 8100d94:	d905      	bls.n	8100da2 <__udivmoddi4+0xba>
 8100d96:	b10d      	cbz	r5, 8100d9c <__udivmoddi4+0xb4>
 8100d98:	e9c5 0100 	strd	r0, r1, [r5]
 8100d9c:	2100      	movs	r1, #0
 8100d9e:	4608      	mov	r0, r1
 8100da0:	e7f5      	b.n	8100d8e <__udivmoddi4+0xa6>
 8100da2:	fab3 f183 	clz	r1, r3
 8100da6:	2900      	cmp	r1, #0
 8100da8:	d146      	bne.n	8100e38 <__udivmoddi4+0x150>
 8100daa:	42a3      	cmp	r3, r4
 8100dac:	d302      	bcc.n	8100db4 <__udivmoddi4+0xcc>
 8100dae:	4290      	cmp	r0, r2
 8100db0:	f0c0 80f0 	bcc.w	8100f94 <__udivmoddi4+0x2ac>
 8100db4:	1a86      	subs	r6, r0, r2
 8100db6:	eb64 0303 	sbc.w	r3, r4, r3
 8100dba:	2001      	movs	r0, #1
 8100dbc:	2d00      	cmp	r5, #0
 8100dbe:	d0e6      	beq.n	8100d8e <__udivmoddi4+0xa6>
 8100dc0:	e9c5 6300 	strd	r6, r3, [r5]
 8100dc4:	e7e3      	b.n	8100d8e <__udivmoddi4+0xa6>
 8100dc6:	2a00      	cmp	r2, #0
 8100dc8:	f040 8090 	bne.w	8100eec <__udivmoddi4+0x204>
 8100dcc:	eba1 040c 	sub.w	r4, r1, ip
 8100dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100dd4:	fa1f f78c 	uxth.w	r7, ip
 8100dd8:	2101      	movs	r1, #1
 8100dda:	fbb4 f6f8 	udiv	r6, r4, r8
 8100dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100de2:	fb08 4416 	mls	r4, r8, r6, r4
 8100de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100dea:	fb07 f006 	mul.w	r0, r7, r6
 8100dee:	4298      	cmp	r0, r3
 8100df0:	d908      	bls.n	8100e04 <__udivmoddi4+0x11c>
 8100df2:	eb1c 0303 	adds.w	r3, ip, r3
 8100df6:	f106 34ff 	add.w	r4, r6, #4294967295
 8100dfa:	d202      	bcs.n	8100e02 <__udivmoddi4+0x11a>
 8100dfc:	4298      	cmp	r0, r3
 8100dfe:	f200 80cd 	bhi.w	8100f9c <__udivmoddi4+0x2b4>
 8100e02:	4626      	mov	r6, r4
 8100e04:	1a1c      	subs	r4, r3, r0
 8100e06:	fa1f f38e 	uxth.w	r3, lr
 8100e0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8100e0e:	fb08 4410 	mls	r4, r8, r0, r4
 8100e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100e16:	fb00 f707 	mul.w	r7, r0, r7
 8100e1a:	429f      	cmp	r7, r3
 8100e1c:	d908      	bls.n	8100e30 <__udivmoddi4+0x148>
 8100e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8100e22:	f100 34ff 	add.w	r4, r0, #4294967295
 8100e26:	d202      	bcs.n	8100e2e <__udivmoddi4+0x146>
 8100e28:	429f      	cmp	r7, r3
 8100e2a:	f200 80b0 	bhi.w	8100f8e <__udivmoddi4+0x2a6>
 8100e2e:	4620      	mov	r0, r4
 8100e30:	1bdb      	subs	r3, r3, r7
 8100e32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100e36:	e7a5      	b.n	8100d84 <__udivmoddi4+0x9c>
 8100e38:	f1c1 0620 	rsb	r6, r1, #32
 8100e3c:	408b      	lsls	r3, r1
 8100e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8100e42:	431f      	orrs	r7, r3
 8100e44:	fa20 fc06 	lsr.w	ip, r0, r6
 8100e48:	fa04 f301 	lsl.w	r3, r4, r1
 8100e4c:	ea43 030c 	orr.w	r3, r3, ip
 8100e50:	40f4      	lsrs	r4, r6
 8100e52:	fa00 f801 	lsl.w	r8, r0, r1
 8100e56:	0c38      	lsrs	r0, r7, #16
 8100e58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100e5c:	fbb4 fef0 	udiv	lr, r4, r0
 8100e60:	fa1f fc87 	uxth.w	ip, r7
 8100e64:	fb00 441e 	mls	r4, r0, lr, r4
 8100e68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100e6c:	fb0e f90c 	mul.w	r9, lr, ip
 8100e70:	45a1      	cmp	r9, r4
 8100e72:	fa02 f201 	lsl.w	r2, r2, r1
 8100e76:	d90a      	bls.n	8100e8e <__udivmoddi4+0x1a6>
 8100e78:	193c      	adds	r4, r7, r4
 8100e7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100e7e:	f080 8084 	bcs.w	8100f8a <__udivmoddi4+0x2a2>
 8100e82:	45a1      	cmp	r9, r4
 8100e84:	f240 8081 	bls.w	8100f8a <__udivmoddi4+0x2a2>
 8100e88:	f1ae 0e02 	sub.w	lr, lr, #2
 8100e8c:	443c      	add	r4, r7
 8100e8e:	eba4 0409 	sub.w	r4, r4, r9
 8100e92:	fa1f f983 	uxth.w	r9, r3
 8100e96:	fbb4 f3f0 	udiv	r3, r4, r0
 8100e9a:	fb00 4413 	mls	r4, r0, r3, r4
 8100e9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100ea2:	fb03 fc0c 	mul.w	ip, r3, ip
 8100ea6:	45a4      	cmp	ip, r4
 8100ea8:	d907      	bls.n	8100eba <__udivmoddi4+0x1d2>
 8100eaa:	193c      	adds	r4, r7, r4
 8100eac:	f103 30ff 	add.w	r0, r3, #4294967295
 8100eb0:	d267      	bcs.n	8100f82 <__udivmoddi4+0x29a>
 8100eb2:	45a4      	cmp	ip, r4
 8100eb4:	d965      	bls.n	8100f82 <__udivmoddi4+0x29a>
 8100eb6:	3b02      	subs	r3, #2
 8100eb8:	443c      	add	r4, r7
 8100eba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8100ebe:	fba0 9302 	umull	r9, r3, r0, r2
 8100ec2:	eba4 040c 	sub.w	r4, r4, ip
 8100ec6:	429c      	cmp	r4, r3
 8100ec8:	46ce      	mov	lr, r9
 8100eca:	469c      	mov	ip, r3
 8100ecc:	d351      	bcc.n	8100f72 <__udivmoddi4+0x28a>
 8100ece:	d04e      	beq.n	8100f6e <__udivmoddi4+0x286>
 8100ed0:	b155      	cbz	r5, 8100ee8 <__udivmoddi4+0x200>
 8100ed2:	ebb8 030e 	subs.w	r3, r8, lr
 8100ed6:	eb64 040c 	sbc.w	r4, r4, ip
 8100eda:	fa04 f606 	lsl.w	r6, r4, r6
 8100ede:	40cb      	lsrs	r3, r1
 8100ee0:	431e      	orrs	r6, r3
 8100ee2:	40cc      	lsrs	r4, r1
 8100ee4:	e9c5 6400 	strd	r6, r4, [r5]
 8100ee8:	2100      	movs	r1, #0
 8100eea:	e750      	b.n	8100d8e <__udivmoddi4+0xa6>
 8100eec:	f1c2 0320 	rsb	r3, r2, #32
 8100ef0:	fa20 f103 	lsr.w	r1, r0, r3
 8100ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8100ef8:	fa24 f303 	lsr.w	r3, r4, r3
 8100efc:	4094      	lsls	r4, r2
 8100efe:	430c      	orrs	r4, r1
 8100f00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100f04:	fa00 fe02 	lsl.w	lr, r0, r2
 8100f08:	fa1f f78c 	uxth.w	r7, ip
 8100f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100f10:	fb08 3110 	mls	r1, r8, r0, r3
 8100f14:	0c23      	lsrs	r3, r4, #16
 8100f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100f1a:	fb00 f107 	mul.w	r1, r0, r7
 8100f1e:	4299      	cmp	r1, r3
 8100f20:	d908      	bls.n	8100f34 <__udivmoddi4+0x24c>
 8100f22:	eb1c 0303 	adds.w	r3, ip, r3
 8100f26:	f100 36ff 	add.w	r6, r0, #4294967295
 8100f2a:	d22c      	bcs.n	8100f86 <__udivmoddi4+0x29e>
 8100f2c:	4299      	cmp	r1, r3
 8100f2e:	d92a      	bls.n	8100f86 <__udivmoddi4+0x29e>
 8100f30:	3802      	subs	r0, #2
 8100f32:	4463      	add	r3, ip
 8100f34:	1a5b      	subs	r3, r3, r1
 8100f36:	b2a4      	uxth	r4, r4
 8100f38:	fbb3 f1f8 	udiv	r1, r3, r8
 8100f3c:	fb08 3311 	mls	r3, r8, r1, r3
 8100f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100f44:	fb01 f307 	mul.w	r3, r1, r7
 8100f48:	42a3      	cmp	r3, r4
 8100f4a:	d908      	bls.n	8100f5e <__udivmoddi4+0x276>
 8100f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8100f50:	f101 36ff 	add.w	r6, r1, #4294967295
 8100f54:	d213      	bcs.n	8100f7e <__udivmoddi4+0x296>
 8100f56:	42a3      	cmp	r3, r4
 8100f58:	d911      	bls.n	8100f7e <__udivmoddi4+0x296>
 8100f5a:	3902      	subs	r1, #2
 8100f5c:	4464      	add	r4, ip
 8100f5e:	1ae4      	subs	r4, r4, r3
 8100f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8100f64:	e739      	b.n	8100dda <__udivmoddi4+0xf2>
 8100f66:	4604      	mov	r4, r0
 8100f68:	e6f0      	b.n	8100d4c <__udivmoddi4+0x64>
 8100f6a:	4608      	mov	r0, r1
 8100f6c:	e706      	b.n	8100d7c <__udivmoddi4+0x94>
 8100f6e:	45c8      	cmp	r8, r9
 8100f70:	d2ae      	bcs.n	8100ed0 <__udivmoddi4+0x1e8>
 8100f72:	ebb9 0e02 	subs.w	lr, r9, r2
 8100f76:	eb63 0c07 	sbc.w	ip, r3, r7
 8100f7a:	3801      	subs	r0, #1
 8100f7c:	e7a8      	b.n	8100ed0 <__udivmoddi4+0x1e8>
 8100f7e:	4631      	mov	r1, r6
 8100f80:	e7ed      	b.n	8100f5e <__udivmoddi4+0x276>
 8100f82:	4603      	mov	r3, r0
 8100f84:	e799      	b.n	8100eba <__udivmoddi4+0x1d2>
 8100f86:	4630      	mov	r0, r6
 8100f88:	e7d4      	b.n	8100f34 <__udivmoddi4+0x24c>
 8100f8a:	46d6      	mov	lr, sl
 8100f8c:	e77f      	b.n	8100e8e <__udivmoddi4+0x1a6>
 8100f8e:	4463      	add	r3, ip
 8100f90:	3802      	subs	r0, #2
 8100f92:	e74d      	b.n	8100e30 <__udivmoddi4+0x148>
 8100f94:	4606      	mov	r6, r0
 8100f96:	4623      	mov	r3, r4
 8100f98:	4608      	mov	r0, r1
 8100f9a:	e70f      	b.n	8100dbc <__udivmoddi4+0xd4>
 8100f9c:	3e02      	subs	r6, #2
 8100f9e:	4463      	add	r3, ip
 8100fa0:	e730      	b.n	8100e04 <__udivmoddi4+0x11c>
 8100fa2:	bf00      	nop

08100fa4 <__aeabi_idiv0>:
 8100fa4:	4770      	bx	lr
 8100fa6:	bf00      	nop

08100fa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100fa8:	b480      	push	{r7}
 8100faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100fac:	4b09      	ldr	r3, [pc, #36]	@ (8100fd4 <SystemInit+0x2c>)
 8100fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8100fb2:	4a08      	ldr	r2, [pc, #32]	@ (8100fd4 <SystemInit+0x2c>)
 8100fb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8100fb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100fbc:	4b05      	ldr	r3, [pc, #20]	@ (8100fd4 <SystemInit+0x2c>)
 8100fbe:	691b      	ldr	r3, [r3, #16]
 8100fc0:	4a04      	ldr	r2, [pc, #16]	@ (8100fd4 <SystemInit+0x2c>)
 8100fc2:	f043 0310 	orr.w	r3, r3, #16
 8100fc6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100fc8:	bf00      	nop
 8100fca:	46bd      	mov	sp, r7
 8100fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fd0:	4770      	bx	lr
 8100fd2:	bf00      	nop
 8100fd4:	e000ed00 	.word	0xe000ed00

08100fd8 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8100fd8:	b580      	push	{r7, lr}
 8100fda:	b088      	sub	sp, #32
 8100fdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100fde:	f107 030c 	add.w	r3, r7, #12
 8100fe2:	2200      	movs	r2, #0
 8100fe4:	601a      	str	r2, [r3, #0]
 8100fe6:	605a      	str	r2, [r3, #4]
 8100fe8:	609a      	str	r2, [r3, #8]
 8100fea:	60da      	str	r2, [r3, #12]
 8100fec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100fee:	4b22      	ldr	r3, [pc, #136]	@ (8101078 <MX_GPIO_Init+0xa0>)
 8100ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100ff4:	4a20      	ldr	r2, [pc, #128]	@ (8101078 <MX_GPIO_Init+0xa0>)
 8100ff6:	f043 0310 	orr.w	r3, r3, #16
 8100ffa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8101078 <MX_GPIO_Init+0xa0>)
 8101000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101004:	f003 0310 	and.w	r3, r3, #16
 8101008:	60bb      	str	r3, [r7, #8]
 810100a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810100c:	4b1a      	ldr	r3, [pc, #104]	@ (8101078 <MX_GPIO_Init+0xa0>)
 810100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101012:	4a19      	ldr	r2, [pc, #100]	@ (8101078 <MX_GPIO_Init+0xa0>)
 8101014:	f043 0301 	orr.w	r3, r3, #1
 8101018:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810101c:	4b16      	ldr	r3, [pc, #88]	@ (8101078 <MX_GPIO_Init+0xa0>)
 810101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101022:	f003 0301 	and.w	r3, r3, #1
 8101026:	607b      	str	r3, [r7, #4]
 8101028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 810102a:	4b13      	ldr	r3, [pc, #76]	@ (8101078 <MX_GPIO_Init+0xa0>)
 810102c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101030:	4a11      	ldr	r2, [pc, #68]	@ (8101078 <MX_GPIO_Init+0xa0>)
 8101032:	f043 0304 	orr.w	r3, r3, #4
 8101036:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810103a:	4b0f      	ldr	r3, [pc, #60]	@ (8101078 <MX_GPIO_Init+0xa0>)
 810103c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101040:	f003 0304 	and.w	r3, r3, #4
 8101044:	603b      	str	r3, [r7, #0]
 8101046:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8101048:	2201      	movs	r2, #1
 810104a:	2110      	movs	r1, #16
 810104c:	480b      	ldr	r0, [pc, #44]	@ (810107c <MX_GPIO_Init+0xa4>)
 810104e:	f001 f9d3 	bl	81023f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8101052:	2310      	movs	r3, #16
 8101054:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8101056:	2301      	movs	r3, #1
 8101058:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810105a:	2300      	movs	r3, #0
 810105c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810105e:	2303      	movs	r3, #3
 8101060:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8101062:	f107 030c 	add.w	r3, r7, #12
 8101066:	4619      	mov	r1, r3
 8101068:	4804      	ldr	r0, [pc, #16]	@ (810107c <MX_GPIO_Init+0xa4>)
 810106a:	f001 f815 	bl	8102098 <HAL_GPIO_Init>

}
 810106e:	bf00      	nop
 8101070:	3720      	adds	r7, #32
 8101072:	46bd      	mov	sp, r7
 8101074:	bd80      	pop	{r7, pc}
 8101076:	bf00      	nop
 8101078:	58024400 	.word	0x58024400
 810107c:	58020000 	.word	0x58020000

08101080 <lis2dh12_read_reg>:
  *
  */
int32_t __weak lis2dh12_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8101080:	b590      	push	{r4, r7, lr}
 8101082:	b087      	sub	sp, #28
 8101084:	af00      	add	r7, sp, #0
 8101086:	60f8      	str	r0, [r7, #12]
 8101088:	607a      	str	r2, [r7, #4]
 810108a:	461a      	mov	r2, r3
 810108c:	460b      	mov	r3, r1
 810108e:	72fb      	strb	r3, [r7, #11]
 8101090:	4613      	mov	r3, r2
 8101092:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8101094:	68fb      	ldr	r3, [r7, #12]
 8101096:	2b00      	cmp	r3, #0
 8101098:	d102      	bne.n	81010a0 <lis2dh12_read_reg+0x20>
  {
    return -1;
 810109a:	f04f 33ff 	mov.w	r3, #4294967295
 810109e:	e009      	b.n	81010b4 <lis2dh12_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 81010a0:	68fb      	ldr	r3, [r7, #12]
 81010a2:	685c      	ldr	r4, [r3, #4]
 81010a4:	68fb      	ldr	r3, [r7, #12]
 81010a6:	68d8      	ldr	r0, [r3, #12]
 81010a8:	893b      	ldrh	r3, [r7, #8]
 81010aa:	7af9      	ldrb	r1, [r7, #11]
 81010ac:	687a      	ldr	r2, [r7, #4]
 81010ae:	47a0      	blx	r4
 81010b0:	6178      	str	r0, [r7, #20]

  return ret;
 81010b2:	697b      	ldr	r3, [r7, #20]
}
 81010b4:	4618      	mov	r0, r3
 81010b6:	371c      	adds	r7, #28
 81010b8:	46bd      	mov	sp, r7
 81010ba:	bd90      	pop	{r4, r7, pc}

081010bc <lis2dh12_write_reg>:
  *
  */
int32_t __weak lis2dh12_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                  uint8_t *data,
                                  uint16_t len)
{
 81010bc:	b590      	push	{r4, r7, lr}
 81010be:	b087      	sub	sp, #28
 81010c0:	af00      	add	r7, sp, #0
 81010c2:	60f8      	str	r0, [r7, #12]
 81010c4:	607a      	str	r2, [r7, #4]
 81010c6:	461a      	mov	r2, r3
 81010c8:	460b      	mov	r3, r1
 81010ca:	72fb      	strb	r3, [r7, #11]
 81010cc:	4613      	mov	r3, r2
 81010ce:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 81010d0:	68fb      	ldr	r3, [r7, #12]
 81010d2:	2b00      	cmp	r3, #0
 81010d4:	d102      	bne.n	81010dc <lis2dh12_write_reg+0x20>
  {
    return -1;
 81010d6:	f04f 33ff 	mov.w	r3, #4294967295
 81010da:	e009      	b.n	81010f0 <lis2dh12_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 81010dc:	68fb      	ldr	r3, [r7, #12]
 81010de:	681c      	ldr	r4, [r3, #0]
 81010e0:	68fb      	ldr	r3, [r7, #12]
 81010e2:	68d8      	ldr	r0, [r3, #12]
 81010e4:	893b      	ldrh	r3, [r7, #8]
 81010e6:	7af9      	ldrb	r1, [r7, #11]
 81010e8:	687a      	ldr	r2, [r7, #4]
 81010ea:	47a0      	blx	r4
 81010ec:	6178      	str	r0, [r7, #20]

  return ret;
 81010ee:	697b      	ldr	r3, [r7, #20]
}
 81010f0:	4618      	mov	r0, r3
 81010f2:	371c      	adds	r7, #28
 81010f4:	46bd      	mov	sp, r7
 81010f6:	bd90      	pop	{r4, r7, pc}

081010f8 <lis2dh12_from_fs2_hr_to_mg>:
  * @{
  *
  */

float_t lis2dh12_from_fs2_hr_to_mg(int16_t lsb)
{
 81010f8:	b480      	push	{r7}
 81010fa:	b083      	sub	sp, #12
 81010fc:	af00      	add	r7, sp, #0
 81010fe:	4603      	mov	r3, r0
 8101100:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb / 16.0f) * 1.0f;
 8101102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101106:	ee07 3a90 	vmov	s15, r3
 810110a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810110e:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8101112:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8101116:	eef0 7a66 	vmov.f32	s15, s13
}
 810111a:	eeb0 0a67 	vmov.f32	s0, s15
 810111e:	370c      	adds	r7, #12
 8101120:	46bd      	mov	sp, r7
 8101122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101126:	4770      	bx	lr

08101128 <lis2dh12_temperature_meas_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_temperature_meas_set(const stmdev_ctx_t *ctx,
                                      lis2dh12_temp_en_t val)
{
 8101128:	b580      	push	{r7, lr}
 810112a:	b084      	sub	sp, #16
 810112c:	af00      	add	r7, sp, #0
 810112e:	6078      	str	r0, [r7, #4]
 8101130:	460b      	mov	r3, r1
 8101132:	70fb      	strb	r3, [r7, #3]
  lis2dh12_temp_cfg_reg_t temp_cfg_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_TEMP_CFG_REG,
 8101134:	f107 0208 	add.w	r2, r7, #8
 8101138:	2301      	movs	r3, #1
 810113a:	211f      	movs	r1, #31
 810113c:	6878      	ldr	r0, [r7, #4]
 810113e:	f7ff ff9f 	bl	8101080 <lis2dh12_read_reg>
 8101142:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&temp_cfg_reg, 1);

  if (ret == 0)
 8101144:	68fb      	ldr	r3, [r7, #12]
 8101146:	2b00      	cmp	r3, #0
 8101148:	d10f      	bne.n	810116a <lis2dh12_temperature_meas_set+0x42>
  {
    temp_cfg_reg.temp_en = (uint8_t) val;
 810114a:	78fb      	ldrb	r3, [r7, #3]
 810114c:	f003 0303 	and.w	r3, r3, #3
 8101150:	b2da      	uxtb	r2, r3
 8101152:	7a3b      	ldrb	r3, [r7, #8]
 8101154:	f362 1387 	bfi	r3, r2, #6, #2
 8101158:	723b      	strb	r3, [r7, #8]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_TEMP_CFG_REG,
 810115a:	f107 0208 	add.w	r2, r7, #8
 810115e:	2301      	movs	r3, #1
 8101160:	211f      	movs	r1, #31
 8101162:	6878      	ldr	r0, [r7, #4]
 8101164:	f7ff ffaa 	bl	81010bc <lis2dh12_write_reg>
 8101168:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&temp_cfg_reg, 1);
  }

  return ret;
 810116a:	68fb      	ldr	r3, [r7, #12]
}
 810116c:	4618      	mov	r0, r3
 810116e:	3710      	adds	r7, #16
 8101170:	46bd      	mov	sp, r7
 8101172:	bd80      	pop	{r7, pc}

08101174 <lis2dh12_operating_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_operating_mode_set(const stmdev_ctx_t *ctx,
                                    lis2dh12_op_md_t val)
{
 8101174:	b580      	push	{r7, lr}
 8101176:	b086      	sub	sp, #24
 8101178:	af00      	add	r7, sp, #0
 810117a:	6078      	str	r0, [r7, #4]
 810117c:	460b      	mov	r3, r1
 810117e:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
 8101180:	f107 0210 	add.w	r2, r7, #16
 8101184:	2301      	movs	r3, #1
 8101186:	2120      	movs	r1, #32
 8101188:	6878      	ldr	r0, [r7, #4]
 810118a:	f7ff ff79 	bl	8101080 <lis2dh12_read_reg>
 810118e:	6178      	str	r0, [r7, #20]
                          (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 8101190:	697b      	ldr	r3, [r7, #20]
 8101192:	2b00      	cmp	r3, #0
 8101194:	d107      	bne.n	81011a6 <lis2dh12_operating_mode_set+0x32>
  {
    ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
 8101196:	f107 020c 	add.w	r2, r7, #12
 810119a:	2301      	movs	r3, #1
 810119c:	2123      	movs	r1, #35	@ 0x23
 810119e:	6878      	ldr	r0, [r7, #4]
 81011a0:	f7ff ff6e 	bl	8101080 <lis2dh12_read_reg>
 81011a4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&ctrl_reg4, 1);
  }

  if (ret == 0)
 81011a6:	697b      	ldr	r3, [r7, #20]
 81011a8:	2b00      	cmp	r3, #0
 81011aa:	d128      	bne.n	81011fe <lis2dh12_operating_mode_set+0x8a>
  {
    if (val == LIS2DH12_HR_12bit)
 81011ac:	78fb      	ldrb	r3, [r7, #3]
 81011ae:	2b00      	cmp	r3, #0
 81011b0:	d107      	bne.n	81011c2 <lis2dh12_operating_mode_set+0x4e>
    {
      ctrl_reg1.lpen = 0;
 81011b2:	7c3b      	ldrb	r3, [r7, #16]
 81011b4:	f36f 03c3 	bfc	r3, #3, #1
 81011b8:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 1;
 81011ba:	7b3b      	ldrb	r3, [r7, #12]
 81011bc:	f043 0308 	orr.w	r3, r3, #8
 81011c0:	733b      	strb	r3, [r7, #12]
    }

    if (val == LIS2DH12_NM_10bit)
 81011c2:	78fb      	ldrb	r3, [r7, #3]
 81011c4:	2b01      	cmp	r3, #1
 81011c6:	d107      	bne.n	81011d8 <lis2dh12_operating_mode_set+0x64>
    {
      ctrl_reg1.lpen = 0;
 81011c8:	7c3b      	ldrb	r3, [r7, #16]
 81011ca:	f36f 03c3 	bfc	r3, #3, #1
 81011ce:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 0;
 81011d0:	7b3b      	ldrb	r3, [r7, #12]
 81011d2:	f36f 03c3 	bfc	r3, #3, #1
 81011d6:	733b      	strb	r3, [r7, #12]
    }

    if (val == LIS2DH12_LP_8bit)
 81011d8:	78fb      	ldrb	r3, [r7, #3]
 81011da:	2b02      	cmp	r3, #2
 81011dc:	d107      	bne.n	81011ee <lis2dh12_operating_mode_set+0x7a>
    {
      ctrl_reg1.lpen = 1;
 81011de:	7c3b      	ldrb	r3, [r7, #16]
 81011e0:	f043 0308 	orr.w	r3, r3, #8
 81011e4:	743b      	strb	r3, [r7, #16]
      ctrl_reg4.hr   = 0;
 81011e6:	7b3b      	ldrb	r3, [r7, #12]
 81011e8:	f36f 03c3 	bfc	r3, #3, #1
 81011ec:	733b      	strb	r3, [r7, #12]
    }

    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1,
 81011ee:	f107 0210 	add.w	r2, r7, #16
 81011f2:	2301      	movs	r3, #1
 81011f4:	2120      	movs	r1, #32
 81011f6:	6878      	ldr	r0, [r7, #4]
 81011f8:	f7ff ff60 	bl	81010bc <lis2dh12_write_reg>
 81011fc:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg1, 1);
  }

  if (ret == 0)
 81011fe:	697b      	ldr	r3, [r7, #20]
 8101200:	2b00      	cmp	r3, #0
 8101202:	d107      	bne.n	8101214 <lis2dh12_operating_mode_set+0xa0>
  {
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4,
 8101204:	f107 020c 	add.w	r2, r7, #12
 8101208:	2301      	movs	r3, #1
 810120a:	2123      	movs	r1, #35	@ 0x23
 810120c:	6878      	ldr	r0, [r7, #4]
 810120e:	f7ff ff55 	bl	81010bc <lis2dh12_write_reg>
 8101212:	6178      	str	r0, [r7, #20]
                             (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 8101214:	697b      	ldr	r3, [r7, #20]
}
 8101216:	4618      	mov	r0, r3
 8101218:	3718      	adds	r7, #24
 810121a:	46bd      	mov	sp, r7
 810121c:	bd80      	pop	{r7, pc}

0810121e <lis2dh12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_data_rate_set(const stmdev_ctx_t *ctx, lis2dh12_odr_t val)
{
 810121e:	b580      	push	{r7, lr}
 8101220:	b084      	sub	sp, #16
 8101222:	af00      	add	r7, sp, #0
 8101224:	6078      	str	r0, [r7, #4]
 8101226:	460b      	mov	r3, r1
 8101228:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG1,
 810122a:	f107 0208 	add.w	r2, r7, #8
 810122e:	2301      	movs	r3, #1
 8101230:	2120      	movs	r1, #32
 8101232:	6878      	ldr	r0, [r7, #4]
 8101234:	f7ff ff24 	bl	8101080 <lis2dh12_read_reg>
 8101238:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 810123a:	68fb      	ldr	r3, [r7, #12]
 810123c:	2b00      	cmp	r3, #0
 810123e:	d10f      	bne.n	8101260 <lis2dh12_data_rate_set+0x42>
  {
    ctrl_reg1.odr = (uint8_t)val;
 8101240:	78fb      	ldrb	r3, [r7, #3]
 8101242:	f003 030f 	and.w	r3, r3, #15
 8101246:	b2da      	uxtb	r2, r3
 8101248:	7a3b      	ldrb	r3, [r7, #8]
 810124a:	f362 1307 	bfi	r3, r2, #4, #4
 810124e:	723b      	strb	r3, [r7, #8]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG1,
 8101250:	f107 0208 	add.w	r2, r7, #8
 8101254:	2301      	movs	r3, #1
 8101256:	2120      	movs	r1, #32
 8101258:	6878      	ldr	r0, [r7, #4]
 810125a:	f7ff ff2f 	bl	81010bc <lis2dh12_write_reg>
 810125e:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl_reg1, 1);
  }

  return ret;
 8101260:	68fb      	ldr	r3, [r7, #12]
}
 8101262:	4618      	mov	r0, r3
 8101264:	3710      	adds	r7, #16
 8101266:	46bd      	mov	sp, r7
 8101268:	bd80      	pop	{r7, pc}

0810126a <lis2dh12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_full_scale_set(const stmdev_ctx_t *ctx, lis2dh12_fs_t val)
{
 810126a:	b580      	push	{r7, lr}
 810126c:	b084      	sub	sp, #16
 810126e:	af00      	add	r7, sp, #0
 8101270:	6078      	str	r0, [r7, #4]
 8101272:	460b      	mov	r3, r1
 8101274:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
 8101276:	f107 0208 	add.w	r2, r7, #8
 810127a:	2301      	movs	r3, #1
 810127c:	2123      	movs	r1, #35	@ 0x23
 810127e:	6878      	ldr	r0, [r7, #4]
 8101280:	f7ff fefe 	bl	8101080 <lis2dh12_read_reg>
 8101284:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
 8101286:	68fb      	ldr	r3, [r7, #12]
 8101288:	2b00      	cmp	r3, #0
 810128a:	d10f      	bne.n	81012ac <lis2dh12_full_scale_set+0x42>
  {
    ctrl_reg4.fs = (uint8_t)val;
 810128c:	78fb      	ldrb	r3, [r7, #3]
 810128e:	f003 0303 	and.w	r3, r3, #3
 8101292:	b2da      	uxtb	r2, r3
 8101294:	7a3b      	ldrb	r3, [r7, #8]
 8101296:	f362 1305 	bfi	r3, r2, #4, #2
 810129a:	723b      	strb	r3, [r7, #8]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4,
 810129c:	f107 0208 	add.w	r2, r7, #8
 81012a0:	2301      	movs	r3, #1
 81012a2:	2123      	movs	r1, #35	@ 0x23
 81012a4:	6878      	ldr	r0, [r7, #4]
 81012a6:	f7ff ff09 	bl	81010bc <lis2dh12_write_reg>
 81012aa:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 81012ac:	68fb      	ldr	r3, [r7, #12]
}
 81012ae:	4618      	mov	r0, r3
 81012b0:	3710      	adds	r7, #16
 81012b2:	46bd      	mov	sp, r7
 81012b4:	bd80      	pop	{r7, pc}

081012b6 <lis2dh12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG4
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 81012b6:	b580      	push	{r7, lr}
 81012b8:	b084      	sub	sp, #16
 81012ba:	af00      	add	r7, sp, #0
 81012bc:	6078      	str	r0, [r7, #4]
 81012be:	460b      	mov	r3, r1
 81012c0:	70fb      	strb	r3, [r7, #3]
  lis2dh12_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_CTRL_REG4,
 81012c2:	f107 0208 	add.w	r2, r7, #8
 81012c6:	2301      	movs	r3, #1
 81012c8:	2123      	movs	r1, #35	@ 0x23
 81012ca:	6878      	ldr	r0, [r7, #4]
 81012cc:	f7ff fed8 	bl	8101080 <lis2dh12_read_reg>
 81012d0:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
 81012d2:	68fb      	ldr	r3, [r7, #12]
 81012d4:	2b00      	cmp	r3, #0
 81012d6:	d10f      	bne.n	81012f8 <lis2dh12_block_data_update_set+0x42>
  {
    ctrl_reg4.bdu = val;
 81012d8:	78fb      	ldrb	r3, [r7, #3]
 81012da:	f003 0301 	and.w	r3, r3, #1
 81012de:	b2da      	uxtb	r2, r3
 81012e0:	7a3b      	ldrb	r3, [r7, #8]
 81012e2:	f362 13c7 	bfi	r3, r2, #7, #1
 81012e6:	723b      	strb	r3, [r7, #8]
    ret = lis2dh12_write_reg(ctx, LIS2DH12_CTRL_REG4,
 81012e8:	f107 0208 	add.w	r2, r7, #8
 81012ec:	2301      	movs	r3, #1
 81012ee:	2123      	movs	r1, #35	@ 0x23
 81012f0:	6878      	ldr	r0, [r7, #4]
 81012f2:	f7ff fee3 	bl	81010bc <lis2dh12_write_reg>
 81012f6:	60f8      	str	r0, [r7, #12]
                             (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 81012f8:	68fb      	ldr	r3, [r7, #12]
}
 81012fa:	4618      	mov	r0, r3
 81012fc:	3710      	adds	r7, #16
 81012fe:	46bd      	mov	sp, r7
 8101300:	bd80      	pop	{r7, pc}

08101302 <lis2dh12_xl_data_ready_get>:
  * @param  val      change the values of zyxda in reg STATUS_REG
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_xl_data_ready_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8101302:	b580      	push	{r7, lr}
 8101304:	b084      	sub	sp, #16
 8101306:	af00      	add	r7, sp, #0
 8101308:	6078      	str	r0, [r7, #4]
 810130a:	6039      	str	r1, [r7, #0]
  lis2dh12_status_reg_t status_reg;
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_STATUS_REG,
 810130c:	f107 0208 	add.w	r2, r7, #8
 8101310:	2301      	movs	r3, #1
 8101312:	2127      	movs	r1, #39	@ 0x27
 8101314:	6878      	ldr	r0, [r7, #4]
 8101316:	f7ff feb3 	bl	8101080 <lis2dh12_read_reg>
 810131a:	60f8      	str	r0, [r7, #12]
                          (uint8_t *)&status_reg, 1);
  *val = status_reg.zyxda;
 810131c:	7a3b      	ldrb	r3, [r7, #8]
 810131e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8101322:	b2db      	uxtb	r3, r3
 8101324:	461a      	mov	r2, r3
 8101326:	683b      	ldr	r3, [r7, #0]
 8101328:	701a      	strb	r2, [r3, #0]

  return ret;
 810132a:	68fb      	ldr	r3, [r7, #12]
}
 810132c:	4618      	mov	r0, r3
 810132e:	3710      	adds	r7, #16
 8101330:	46bd      	mov	sp, r7
 8101332:	bd80      	pop	{r7, pc}

08101334 <lis2dh12_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8101334:	b580      	push	{r7, lr}
 8101336:	b086      	sub	sp, #24
 8101338:	af00      	add	r7, sp, #0
 810133a:	6078      	str	r0, [r7, #4]
 810133c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_OUT_X_L, buff, 6);
 810133e:	f107 020c 	add.w	r2, r7, #12
 8101342:	2306      	movs	r3, #6
 8101344:	2128      	movs	r1, #40	@ 0x28
 8101346:	6878      	ldr	r0, [r7, #4]
 8101348:	f7ff fe9a 	bl	8101080 <lis2dh12_read_reg>
 810134c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 810134e:	7b7b      	ldrb	r3, [r7, #13]
 8101350:	b21a      	sxth	r2, r3
 8101352:	683b      	ldr	r3, [r7, #0]
 8101354:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8101356:	683b      	ldr	r3, [r7, #0]
 8101358:	f9b3 3000 	ldrsh.w	r3, [r3]
 810135c:	b29b      	uxth	r3, r3
 810135e:	021b      	lsls	r3, r3, #8
 8101360:	b29b      	uxth	r3, r3
 8101362:	7b3a      	ldrb	r2, [r7, #12]
 8101364:	4413      	add	r3, r2
 8101366:	b29b      	uxth	r3, r3
 8101368:	b21a      	sxth	r2, r3
 810136a:	683b      	ldr	r3, [r7, #0]
 810136c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 810136e:	7bfa      	ldrb	r2, [r7, #15]
 8101370:	683b      	ldr	r3, [r7, #0]
 8101372:	3302      	adds	r3, #2
 8101374:	b212      	sxth	r2, r2
 8101376:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8101378:	683b      	ldr	r3, [r7, #0]
 810137a:	3302      	adds	r3, #2
 810137c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8101380:	b29b      	uxth	r3, r3
 8101382:	021b      	lsls	r3, r3, #8
 8101384:	b29b      	uxth	r3, r3
 8101386:	7bba      	ldrb	r2, [r7, #14]
 8101388:	4413      	add	r3, r2
 810138a:	b29a      	uxth	r2, r3
 810138c:	683b      	ldr	r3, [r7, #0]
 810138e:	3302      	adds	r3, #2
 8101390:	b212      	sxth	r2, r2
 8101392:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8101394:	7c7a      	ldrb	r2, [r7, #17]
 8101396:	683b      	ldr	r3, [r7, #0]
 8101398:	3304      	adds	r3, #4
 810139a:	b212      	sxth	r2, r2
 810139c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 810139e:	683b      	ldr	r3, [r7, #0]
 81013a0:	3304      	adds	r3, #4
 81013a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 81013a6:	b29b      	uxth	r3, r3
 81013a8:	021b      	lsls	r3, r3, #8
 81013aa:	b29b      	uxth	r3, r3
 81013ac:	7c3a      	ldrb	r2, [r7, #16]
 81013ae:	4413      	add	r3, r2
 81013b0:	b29a      	uxth	r2, r3
 81013b2:	683b      	ldr	r3, [r7, #0]
 81013b4:	3304      	adds	r3, #4
 81013b6:	b212      	sxth	r2, r2
 81013b8:	801a      	strh	r2, [r3, #0]

  return ret;
 81013ba:	697b      	ldr	r3, [r7, #20]
}
 81013bc:	4618      	mov	r0, r3
 81013be:	3718      	adds	r7, #24
 81013c0:	46bd      	mov	sp, r7
 81013c2:	bd80      	pop	{r7, pc}

081013c4 <lis2dh12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dh12_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 81013c4:	b580      	push	{r7, lr}
 81013c6:	b084      	sub	sp, #16
 81013c8:	af00      	add	r7, sp, #0
 81013ca:	6078      	str	r0, [r7, #4]
 81013cc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dh12_read_reg(ctx, LIS2DH12_WHO_AM_I, buff, 1);
 81013ce:	2301      	movs	r3, #1
 81013d0:	683a      	ldr	r2, [r7, #0]
 81013d2:	210f      	movs	r1, #15
 81013d4:	6878      	ldr	r0, [r7, #4]
 81013d6:	f7ff fe53 	bl	8101080 <lis2dh12_read_reg>
 81013da:	60f8      	str	r0, [r7, #12]

  return ret;
 81013dc:	68fb      	ldr	r3, [r7, #12]
}
 81013de:	4618      	mov	r0, r3
 81013e0:	3710      	adds	r7, #16
 81013e2:	46bd      	mov	sp, r7
 81013e4:	bd80      	pop	{r7, pc}
	...

081013e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81013e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 81013ec:	b08e      	sub	sp, #56	@ 0x38
 81013ee:	af06      	add	r7, sp, #24

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 81013f0:	4b76      	ldr	r3, [pc, #472]	@ (81015cc <main+0x1e4>)
 81013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013f6:	4a75      	ldr	r2, [pc, #468]	@ (81015cc <main+0x1e4>)
 81013f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81013fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101400:	4b72      	ldr	r3, [pc, #456]	@ (81015cc <main+0x1e4>)
 8101402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 810140a:	60fb      	str	r3, [r7, #12]
 810140c:	68fb      	ldr	r3, [r7, #12]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810140e:	2001      	movs	r0, #1
 8101410:	f001 f80c 	bl	810242c <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101414:	f001 f896 	bl	8102544 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101418:	2201      	movs	r2, #1
 810141a:	2102      	movs	r1, #2
 810141c:	2000      	movs	r0, #0
 810141e:	f001 f817 	bl	8102450 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101422:	4b6b      	ldr	r3, [pc, #428]	@ (81015d0 <main+0x1e8>)
 8101424:	681b      	ldr	r3, [r3, #0]
 8101426:	091b      	lsrs	r3, r3, #4
 8101428:	f003 030f 	and.w	r3, r3, #15
 810142c:	2b07      	cmp	r3, #7
 810142e:	d108      	bne.n	8101442 <main+0x5a>
 8101430:	4b68      	ldr	r3, [pc, #416]	@ (81015d4 <main+0x1ec>)
 8101432:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8101436:	4a67      	ldr	r2, [pc, #412]	@ (81015d4 <main+0x1ec>)
 8101438:	f043 0301 	orr.w	r3, r3, #1
 810143c:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8101440:	e007      	b.n	8101452 <main+0x6a>
 8101442:	4b64      	ldr	r3, [pc, #400]	@ (81015d4 <main+0x1ec>)
 8101444:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8101448:	4a62      	ldr	r2, [pc, #392]	@ (81015d4 <main+0x1ec>)
 810144a:	f043 0301 	orr.w	r3, r3, #1
 810144e:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101452:	f000 fc51 	bl	8101cf8 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101456:	f7ff fdbf 	bl	8100fd8 <MX_GPIO_Init>
  MX_SPI4_Init();
 810145a:	f000 f95b 	bl	8101714 <MX_SPI4_Init>
  MX_UART4_Init();
 810145e:	f000 fb29 	bl	8101ab4 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
 8101462:	4b5d      	ldr	r3, [pc, #372]	@ (81015d8 <main+0x1f0>)
 8101464:	613b      	str	r3, [r7, #16]
  dev_ctx.read_reg = platform_read;
 8101466:	4b5d      	ldr	r3, [pc, #372]	@ (81015dc <main+0x1f4>)
 8101468:	617b      	str	r3, [r7, #20]
  dev_ctx.mdelay = platform_delay;
 810146a:	4b5d      	ldr	r3, [pc, #372]	@ (81015e0 <main+0x1f8>)
 810146c:	61bb      	str	r3, [r7, #24]
  dev_ctx.handle = &SENSOR_BUS;
 810146e:	4b5d      	ldr	r3, [pc, #372]	@ (81015e4 <main+0x1fc>)
 8101470:	61fb      	str	r3, [r7, #28]
  /* Wait sensor boot time */
  platform_delay(BOOT_TIME);
 8101472:	2005      	movs	r0, #5
 8101474:	f000 f93c 	bl	81016f0 <platform_delay>
  /* Check device ID */
  lis2dh12_device_id_get(&dev_ctx, &whoamI);
 8101478:	f107 0310 	add.w	r3, r7, #16
 810147c:	495a      	ldr	r1, [pc, #360]	@ (81015e8 <main+0x200>)
 810147e:	4618      	mov	r0, r3
 8101480:	f7ff ffa0 	bl	81013c4 <lis2dh12_device_id_get>
  /* Enable Block Data Update. */
  lis2dh12_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8101484:	f107 0310 	add.w	r3, r7, #16
 8101488:	2101      	movs	r1, #1
 810148a:	4618      	mov	r0, r3
 810148c:	f7ff ff13 	bl	81012b6 <lis2dh12_block_data_update_set>
  /* Set Output Data Rate to 1Hz. */
  lis2dh12_data_rate_set(&dev_ctx, LIS2DH12_ODR_100Hz);
 8101490:	f107 0310 	add.w	r3, r7, #16
 8101494:	2105      	movs	r1, #5
 8101496:	4618      	mov	r0, r3
 8101498:	f7ff fec1 	bl	810121e <lis2dh12_data_rate_set>
  /* Set full scale to 2g. */
  lis2dh12_full_scale_set(&dev_ctx, LIS2DH12_2g);
 810149c:	f107 0310 	add.w	r3, r7, #16
 81014a0:	2100      	movs	r1, #0
 81014a2:	4618      	mov	r0, r3
 81014a4:	f7ff fee1 	bl	810126a <lis2dh12_full_scale_set>
  /* Enable temperature sensor. */
  lis2dh12_temperature_meas_set(&dev_ctx, LIS2DH12_TEMP_ENABLE);
 81014a8:	f107 0310 	add.w	r3, r7, #16
 81014ac:	2103      	movs	r1, #3
 81014ae:	4618      	mov	r0, r3
 81014b0:	f7ff fe3a 	bl	8101128 <lis2dh12_temperature_meas_set>
  /* Set device in continuous mode with 12 bit resol. */
  lis2dh12_operating_mode_set(&dev_ctx, LIS2DH12_HR_12bit);
 81014b4:	f107 0310 	add.w	r3, r7, #16
 81014b8:	2100      	movs	r1, #0
 81014ba:	4618      	mov	r0, r3
 81014bc:	f7ff fe5a 	bl	8101174 <lis2dh12_operating_mode_set>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lis2dh12_reg_t reg;
	  /* Read output only if new value available */
	  lis2dh12_xl_data_ready_get(&dev_ctx, &reg.byte);
 81014c0:	f107 0208 	add.w	r2, r7, #8
 81014c4:	f107 0310 	add.w	r3, r7, #16
 81014c8:	4611      	mov	r1, r2
 81014ca:	4618      	mov	r0, r3
 81014cc:	f7ff ff19 	bl	8101302 <lis2dh12_xl_data_ready_get>
	  if (reg.byte) {
 81014d0:	7a3b      	ldrb	r3, [r7, #8]
 81014d2:	2b00      	cmp	r3, #0
 81014d4:	d076      	beq.n	81015c4 <main+0x1dc>
		  /* Read accelerometer data */
		  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 81014d6:	2206      	movs	r2, #6
 81014d8:	2100      	movs	r1, #0
 81014da:	4844      	ldr	r0, [pc, #272]	@ (81015ec <main+0x204>)
 81014dc:	f005 fda5 	bl	810702a <memset>
		  lis2dh12_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 81014e0:	f107 0310 	add.w	r3, r7, #16
 81014e4:	4941      	ldr	r1, [pc, #260]	@ (81015ec <main+0x204>)
 81014e6:	4618      	mov	r0, r3
 81014e8:	f7ff ff24 	bl	8101334 <lis2dh12_acceleration_raw_get>
		  acceleration_mg[0] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[0]);
 81014ec:	4b3f      	ldr	r3, [pc, #252]	@ (81015ec <main+0x204>)
 81014ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 81014f2:	4618      	mov	r0, r3
 81014f4:	f7ff fe00 	bl	81010f8 <lis2dh12_from_fs2_hr_to_mg>
 81014f8:	eef0 7a40 	vmov.f32	s15, s0
 81014fc:	4b3c      	ldr	r3, [pc, #240]	@ (81015f0 <main+0x208>)
 81014fe:	edc3 7a00 	vstr	s15, [r3]
		  acceleration_mg[1] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[1]);
 8101502:	4b3a      	ldr	r3, [pc, #232]	@ (81015ec <main+0x204>)
 8101504:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8101508:	4618      	mov	r0, r3
 810150a:	f7ff fdf5 	bl	81010f8 <lis2dh12_from_fs2_hr_to_mg>
 810150e:	eef0 7a40 	vmov.f32	s15, s0
 8101512:	4b37      	ldr	r3, [pc, #220]	@ (81015f0 <main+0x208>)
 8101514:	edc3 7a01 	vstr	s15, [r3, #4]
		  acceleration_mg[2] = lis2dh12_from_fs2_hr_to_mg(data_raw_acceleration[2]);
 8101518:	4b34      	ldr	r3, [pc, #208]	@ (81015ec <main+0x204>)
 810151a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 810151e:	4618      	mov	r0, r3
 8101520:	f7ff fdea 	bl	81010f8 <lis2dh12_from_fs2_hr_to_mg>
 8101524:	eef0 7a40 	vmov.f32	s15, s0
 8101528:	4b31      	ldr	r3, [pc, #196]	@ (81015f0 <main+0x208>)
 810152a:	edc3 7a02 	vstr	s15, [r3, #8]
		  x_value = acceleration_mg[0];
 810152e:	4b30      	ldr	r3, [pc, #192]	@ (81015f0 <main+0x208>)
 8101530:	edd3 7a00 	vldr	s15, [r3]
 8101534:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101538:	edc7 7a01 	vstr	s15, [r7, #4]
 810153c:	793b      	ldrb	r3, [r7, #4]
 810153e:	b2da      	uxtb	r2, r3
 8101540:	4b2c      	ldr	r3, [pc, #176]	@ (81015f4 <main+0x20c>)
 8101542:	701a      	strb	r2, [r3, #0]
		  y_value = acceleration_mg[1];
 8101544:	4b2a      	ldr	r3, [pc, #168]	@ (81015f0 <main+0x208>)
 8101546:	edd3 7a01 	vldr	s15, [r3, #4]
 810154a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810154e:	edc7 7a01 	vstr	s15, [r7, #4]
 8101552:	793b      	ldrb	r3, [r7, #4]
 8101554:	b2da      	uxtb	r2, r3
 8101556:	4b28      	ldr	r3, [pc, #160]	@ (81015f8 <main+0x210>)
 8101558:	701a      	strb	r2, [r3, #0]
		  z_value = acceleration_mg[2];
 810155a:	4b25      	ldr	r3, [pc, #148]	@ (81015f0 <main+0x208>)
 810155c:	edd3 7a02 	vldr	s15, [r3, #8]
 8101560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8101564:	edc7 7a01 	vstr	s15, [r7, #4]
 8101568:	793b      	ldrb	r3, [r7, #4]
 810156a:	b2da      	uxtb	r2, r3
 810156c:	4b23      	ldr	r3, [pc, #140]	@ (81015fc <main+0x214>)
 810156e:	701a      	strb	r2, [r3, #0]
		  snprintf((char *)tx_buffer, sizeof(tx_buffer),"%d %d %d; \r\n",acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8101570:	4b1f      	ldr	r3, [pc, #124]	@ (81015f0 <main+0x208>)
 8101572:	681b      	ldr	r3, [r3, #0]
 8101574:	4618      	mov	r0, r3
 8101576:	f7ff f86f 	bl	8100658 <__aeabi_f2d>
 810157a:	4604      	mov	r4, r0
 810157c:	460d      	mov	r5, r1
 810157e:	4b1c      	ldr	r3, [pc, #112]	@ (81015f0 <main+0x208>)
 8101580:	685b      	ldr	r3, [r3, #4]
 8101582:	4618      	mov	r0, r3
 8101584:	f7ff f868 	bl	8100658 <__aeabi_f2d>
 8101588:	4680      	mov	r8, r0
 810158a:	4689      	mov	r9, r1
 810158c:	4b18      	ldr	r3, [pc, #96]	@ (81015f0 <main+0x208>)
 810158e:	689b      	ldr	r3, [r3, #8]
 8101590:	4618      	mov	r0, r3
 8101592:	f7ff f861 	bl	8100658 <__aeabi_f2d>
 8101596:	4602      	mov	r2, r0
 8101598:	460b      	mov	r3, r1
 810159a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 810159e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 81015a2:	e9cd 4500 	strd	r4, r5, [sp]
 81015a6:	4a16      	ldr	r2, [pc, #88]	@ (8101600 <main+0x218>)
 81015a8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 81015ac:	4815      	ldr	r0, [pc, #84]	@ (8101604 <main+0x21c>)
 81015ae:	f005 fcc5 	bl	8106f3c <sniprintf>
		  tx_com(tx_buffer, strlen((char const *)tx_buffer));
 81015b2:	4814      	ldr	r0, [pc, #80]	@ (8101604 <main+0x21c>)
 81015b4:	f7fe fee4 	bl	8100380 <strlen>
 81015b8:	4603      	mov	r3, r0
 81015ba:	b29b      	uxth	r3, r3
 81015bc:	4619      	mov	r1, r3
 81015be:	4811      	ldr	r0, [pc, #68]	@ (8101604 <main+0x21c>)
 81015c0:	f000 f882 	bl	81016c8 <tx_com>
	  }
	  HAL_Delay(10);
 81015c4:	200a      	movs	r0, #10
 81015c6:	f000 fc4b 	bl	8101e60 <HAL_Delay>
  {
 81015ca:	e779      	b.n	81014c0 <main+0xd8>
 81015cc:	58024400 	.word	0x58024400
 81015d0:	e000ed00 	.word	0xe000ed00
 81015d4:	58026400 	.word	0x58026400
 81015d8:	08101609 	.word	0x08101609
 81015dc:	08101669 	.word	0x08101669
 81015e0:	081016f1 	.word	0x081016f1
 81015e4:	100005fc 	.word	0x100005fc
 81015e8:	1000020c 	.word	0x1000020c
 81015ec:	100001f8 	.word	0x100001f8
 81015f0:	10000200 	.word	0x10000200
 81015f4:	10000008 	.word	0x10000008
 81015f8:	100005f8 	.word	0x100005f8
 81015fc:	100005f9 	.word	0x100005f9
 8101600:	081091d8 	.word	0x081091d8
 8101604:	10000210 	.word	0x10000210

08101608 <platform_write>:
}

/* USER CODE BEGIN 4 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8101608:	b580      	push	{r7, lr}
 810160a:	b084      	sub	sp, #16
 810160c:	af00      	add	r7, sp, #0
 810160e:	60f8      	str	r0, [r7, #12]
 8101610:	607a      	str	r2, [r7, #4]
 8101612:	461a      	mov	r2, r3
 8101614:	460b      	mov	r3, r1
 8101616:	72fb      	strb	r3, [r7, #11]
 8101618:	4613      	mov	r3, r2
 810161a:	813b      	strh	r3, [r7, #8]
  /* Write multiple command */
  reg |= 0x40;
 810161c:	7afb      	ldrb	r3, [r7, #11]
 810161e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8101622:	b2db      	uxtb	r3, r3
 8101624:	72fb      	strb	r3, [r7, #11]
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8101626:	2200      	movs	r2, #0
 8101628:	2110      	movs	r1, #16
 810162a:	480e      	ldr	r0, [pc, #56]	@ (8101664 <platform_write+0x5c>)
 810162c:	f000 fee4 	bl	81023f8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8101630:	f107 010b 	add.w	r1, r7, #11
 8101634:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8101638:	2201      	movs	r2, #1
 810163a:	68f8      	ldr	r0, [r7, #12]
 810163c:	f003 f8b8 	bl	81047b0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 8101640:	893a      	ldrh	r2, [r7, #8]
 8101642:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8101646:	6879      	ldr	r1, [r7, #4]
 8101648:	68f8      	ldr	r0, [r7, #12]
 810164a:	f003 f8b1 	bl	81047b0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 810164e:	2201      	movs	r2, #1
 8101650:	2110      	movs	r1, #16
 8101652:	4804      	ldr	r0, [pc, #16]	@ (8101664 <platform_write+0x5c>)
 8101654:	f000 fed0 	bl	81023f8 <HAL_GPIO_WritePin>
  return 0;
 8101658:	2300      	movs	r3, #0
}
 810165a:	4618      	mov	r0, r3
 810165c:	3710      	adds	r7, #16
 810165e:	46bd      	mov	sp, r7
 8101660:	bd80      	pop	{r7, pc}
 8101662:	bf00      	nop
 8101664:	58020000 	.word	0x58020000

08101668 <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8101668:	b580      	push	{r7, lr}
 810166a:	b084      	sub	sp, #16
 810166c:	af00      	add	r7, sp, #0
 810166e:	60f8      	str	r0, [r7, #12]
 8101670:	607a      	str	r2, [r7, #4]
 8101672:	461a      	mov	r2, r3
 8101674:	460b      	mov	r3, r1
 8101676:	72fb      	strb	r3, [r7, #11]
 8101678:	4613      	mov	r3, r2
 810167a:	813b      	strh	r3, [r7, #8]
  /* Read multiple command */
  reg |= 0xC0;
 810167c:	7afb      	ldrb	r3, [r7, #11]
 810167e:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8101682:	b2db      	uxtb	r3, r3
 8101684:	72fb      	strb	r3, [r7, #11]
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8101686:	2200      	movs	r2, #0
 8101688:	2110      	movs	r1, #16
 810168a:	480e      	ldr	r0, [pc, #56]	@ (81016c4 <platform_read+0x5c>)
 810168c:	f000 feb4 	bl	81023f8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8101690:	f107 010b 	add.w	r1, r7, #11
 8101694:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8101698:	2201      	movs	r2, #1
 810169a:	68f8      	ldr	r0, [r7, #12]
 810169c:	f003 f888 	bl	81047b0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(handle, bufp, len, 1000);
 81016a0:	893a      	ldrh	r2, [r7, #8]
 81016a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 81016a6:	6879      	ldr	r1, [r7, #4]
 81016a8:	68f8      	ldr	r0, [r7, #12]
 81016aa:	f003 fa6c 	bl	8104b86 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 81016ae:	2201      	movs	r2, #1
 81016b0:	2110      	movs	r1, #16
 81016b2:	4804      	ldr	r0, [pc, #16]	@ (81016c4 <platform_read+0x5c>)
 81016b4:	f000 fea0 	bl	81023f8 <HAL_GPIO_WritePin>
  return 0;
 81016b8:	2300      	movs	r3, #0
}
 81016ba:	4618      	mov	r0, r3
 81016bc:	3710      	adds	r7, #16
 81016be:	46bd      	mov	sp, r7
 81016c0:	bd80      	pop	{r7, pc}
 81016c2:	bf00      	nop
 81016c4:	58020000 	.word	0x58020000

081016c8 <tx_com>:
 * @param  tx_buffer     buffer to transmit
 * @param  len           number of byte to send
 *
 */
static void tx_com(uint8_t *tx_buffer, uint16_t len)
{
 81016c8:	b580      	push	{r7, lr}
 81016ca:	b082      	sub	sp, #8
 81016cc:	af00      	add	r7, sp, #0
 81016ce:	6078      	str	r0, [r7, #4]
 81016d0:	460b      	mov	r3, r1
 81016d2:	807b      	strh	r3, [r7, #2]
  HAL_UART_Transmit(&huart4, tx_buffer, len, 1000);
 81016d4:	887a      	ldrh	r2, [r7, #2]
 81016d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 81016da:	6879      	ldr	r1, [r7, #4]
 81016dc:	4803      	ldr	r0, [pc, #12]	@ (81016ec <tx_com+0x24>)
 81016de:	f003 fdfb 	bl	81052d8 <HAL_UART_Transmit>
}
 81016e2:	bf00      	nop
 81016e4:	3708      	adds	r7, #8
 81016e6:	46bd      	mov	sp, r7
 81016e8:	bd80      	pop	{r7, pc}
 81016ea:	bf00      	nop
 81016ec:	10000688 	.word	0x10000688

081016f0 <platform_delay>:

static void platform_delay(uint32_t ms)
{
 81016f0:	b580      	push	{r7, lr}
 81016f2:	b082      	sub	sp, #8
 81016f4:	af00      	add	r7, sp, #0
 81016f6:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 81016f8:	6878      	ldr	r0, [r7, #4]
 81016fa:	f000 fbb1 	bl	8101e60 <HAL_Delay>
}
 81016fe:	bf00      	nop
 8101700:	3708      	adds	r7, #8
 8101702:	46bd      	mov	sp, r7
 8101704:	bd80      	pop	{r7, pc}

08101706 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101706:	b480      	push	{r7}
 8101708:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810170a:	b672      	cpsid	i
}
 810170c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810170e:	bf00      	nop
 8101710:	e7fd      	b.n	810170e <Error_Handler+0x8>
	...

08101714 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8101714:	b580      	push	{r7, lr}
 8101716:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8101718:	4b28      	ldr	r3, [pc, #160]	@ (81017bc <MX_SPI4_Init+0xa8>)
 810171a:	4a29      	ldr	r2, [pc, #164]	@ (81017c0 <MX_SPI4_Init+0xac>)
 810171c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 810171e:	4b27      	ldr	r3, [pc, #156]	@ (81017bc <MX_SPI4_Init+0xa8>)
 8101720:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8101724:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8101726:	4b25      	ldr	r3, [pc, #148]	@ (81017bc <MX_SPI4_Init+0xa8>)
 8101728:	2200      	movs	r2, #0
 810172a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 810172c:	4b23      	ldr	r3, [pc, #140]	@ (81017bc <MX_SPI4_Init+0xa8>)
 810172e:	2207      	movs	r2, #7
 8101730:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8101732:	4b22      	ldr	r3, [pc, #136]	@ (81017bc <MX_SPI4_Init+0xa8>)
 8101734:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8101738:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 810173a:	4b20      	ldr	r3, [pc, #128]	@ (81017bc <MX_SPI4_Init+0xa8>)
 810173c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8101740:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8101742:	4b1e      	ldr	r3, [pc, #120]	@ (81017bc <MX_SPI4_Init+0xa8>)
 8101744:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8101748:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 810174a:	4b1c      	ldr	r3, [pc, #112]	@ (81017bc <MX_SPI4_Init+0xa8>)
 810174c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8101750:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8101752:	4b1a      	ldr	r3, [pc, #104]	@ (81017bc <MX_SPI4_Init+0xa8>)
 8101754:	2200      	movs	r2, #0
 8101756:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8101758:	4b18      	ldr	r3, [pc, #96]	@ (81017bc <MX_SPI4_Init+0xa8>)
 810175a:	2200      	movs	r2, #0
 810175c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810175e:	4b17      	ldr	r3, [pc, #92]	@ (81017bc <MX_SPI4_Init+0xa8>)
 8101760:	2200      	movs	r2, #0
 8101762:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8101764:	4b15      	ldr	r3, [pc, #84]	@ (81017bc <MX_SPI4_Init+0xa8>)
 8101766:	2200      	movs	r2, #0
 8101768:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 810176a:	4b14      	ldr	r3, [pc, #80]	@ (81017bc <MX_SPI4_Init+0xa8>)
 810176c:	2200      	movs	r2, #0
 810176e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8101770:	4b12      	ldr	r3, [pc, #72]	@ (81017bc <MX_SPI4_Init+0xa8>)
 8101772:	2200      	movs	r2, #0
 8101774:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8101776:	4b11      	ldr	r3, [pc, #68]	@ (81017bc <MX_SPI4_Init+0xa8>)
 8101778:	2200      	movs	r2, #0
 810177a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 810177c:	4b0f      	ldr	r3, [pc, #60]	@ (81017bc <MX_SPI4_Init+0xa8>)
 810177e:	2200      	movs	r2, #0
 8101780:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8101782:	4b0e      	ldr	r3, [pc, #56]	@ (81017bc <MX_SPI4_Init+0xa8>)
 8101784:	2200      	movs	r2, #0
 8101786:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8101788:	4b0c      	ldr	r3, [pc, #48]	@ (81017bc <MX_SPI4_Init+0xa8>)
 810178a:	2200      	movs	r2, #0
 810178c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 810178e:	4b0b      	ldr	r3, [pc, #44]	@ (81017bc <MX_SPI4_Init+0xa8>)
 8101790:	2200      	movs	r2, #0
 8101792:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8101794:	4b09      	ldr	r3, [pc, #36]	@ (81017bc <MX_SPI4_Init+0xa8>)
 8101796:	2200      	movs	r2, #0
 8101798:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 810179a:	4b08      	ldr	r3, [pc, #32]	@ (81017bc <MX_SPI4_Init+0xa8>)
 810179c:	2200      	movs	r2, #0
 810179e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 81017a0:	4b06      	ldr	r3, [pc, #24]	@ (81017bc <MX_SPI4_Init+0xa8>)
 81017a2:	2200      	movs	r2, #0
 81017a4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 81017a6:	4805      	ldr	r0, [pc, #20]	@ (81017bc <MX_SPI4_Init+0xa8>)
 81017a8:	f002 fede 	bl	8104568 <HAL_SPI_Init>
 81017ac:	4603      	mov	r3, r0
 81017ae:	2b00      	cmp	r3, #0
 81017b0:	d001      	beq.n	81017b6 <MX_SPI4_Init+0xa2>
  {
    Error_Handler();
 81017b2:	f7ff ffa8 	bl	8101706 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 81017b6:	bf00      	nop
 81017b8:	bd80      	pop	{r7, pc}
 81017ba:	bf00      	nop
 81017bc:	100005fc 	.word	0x100005fc
 81017c0:	40013400 	.word	0x40013400

081017c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 81017c4:	b580      	push	{r7, lr}
 81017c6:	b0ba      	sub	sp, #232	@ 0xe8
 81017c8:	af00      	add	r7, sp, #0
 81017ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81017cc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81017d0:	2200      	movs	r2, #0
 81017d2:	601a      	str	r2, [r3, #0]
 81017d4:	605a      	str	r2, [r3, #4]
 81017d6:	609a      	str	r2, [r3, #8]
 81017d8:	60da      	str	r2, [r3, #12]
 81017da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81017dc:	f107 0310 	add.w	r3, r7, #16
 81017e0:	22c0      	movs	r2, #192	@ 0xc0
 81017e2:	2100      	movs	r1, #0
 81017e4:	4618      	mov	r0, r3
 81017e6:	f005 fc20 	bl	810702a <memset>
  if(spiHandle->Instance==SPI4)
 81017ea:	687b      	ldr	r3, [r7, #4]
 81017ec:	681b      	ldr	r3, [r3, #0]
 81017ee:	4a26      	ldr	r2, [pc, #152]	@ (8101888 <HAL_SPI_MspInit+0xc4>)
 81017f0:	4293      	cmp	r3, r2
 81017f2:	d144      	bne.n	810187e <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 81017f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 81017f8:	f04f 0300 	mov.w	r3, #0
 81017fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8101800:	2300      	movs	r3, #0
 8101802:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101804:	f107 0310 	add.w	r3, r7, #16
 8101808:	4618      	mov	r0, r3
 810180a:	f001 f881 	bl	8102910 <HAL_RCCEx_PeriphCLKConfig>
 810180e:	4603      	mov	r3, r0
 8101810:	2b00      	cmp	r3, #0
 8101812:	d001      	beq.n	8101818 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8101814:	f7ff ff77 	bl	8101706 <Error_Handler>
    }

    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8101818:	4b1c      	ldr	r3, [pc, #112]	@ (810188c <HAL_SPI_MspInit+0xc8>)
 810181a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810181e:	4a1b      	ldr	r2, [pc, #108]	@ (810188c <HAL_SPI_MspInit+0xc8>)
 8101820:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8101824:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101828:	4b18      	ldr	r3, [pc, #96]	@ (810188c <HAL_SPI_MspInit+0xc8>)
 810182a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810182e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8101832:	60fb      	str	r3, [r7, #12]
 8101834:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8101836:	4b15      	ldr	r3, [pc, #84]	@ (810188c <HAL_SPI_MspInit+0xc8>)
 8101838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810183c:	4a13      	ldr	r2, [pc, #76]	@ (810188c <HAL_SPI_MspInit+0xc8>)
 810183e:	f043 0310 	orr.w	r3, r3, #16
 8101842:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101846:	4b11      	ldr	r3, [pc, #68]	@ (810188c <HAL_SPI_MspInit+0xc8>)
 8101848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810184c:	f003 0310 	and.w	r3, r3, #16
 8101850:	60bb      	str	r3, [r7, #8]
 8101852:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8101854:	2364      	movs	r3, #100	@ 0x64
 8101856:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810185a:	2302      	movs	r3, #2
 810185c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101860:	2300      	movs	r3, #0
 8101862:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101866:	2300      	movs	r3, #0
 8101868:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 810186c:	2305      	movs	r3, #5
 810186e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8101872:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8101876:	4619      	mov	r1, r3
 8101878:	4805      	ldr	r0, [pc, #20]	@ (8101890 <HAL_SPI_MspInit+0xcc>)
 810187a:	f000 fc0d 	bl	8102098 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 810187e:	bf00      	nop
 8101880:	37e8      	adds	r7, #232	@ 0xe8
 8101882:	46bd      	mov	sp, r7
 8101884:	bd80      	pop	{r7, pc}
 8101886:	bf00      	nop
 8101888:	40013400 	.word	0x40013400
 810188c:	58024400 	.word	0x58024400
 8101890:	58021000 	.word	0x58021000

08101894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101894:	b480      	push	{r7}
 8101896:	b083      	sub	sp, #12
 8101898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810189a:	4b0a      	ldr	r3, [pc, #40]	@ (81018c4 <HAL_MspInit+0x30>)
 810189c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81018a0:	4a08      	ldr	r2, [pc, #32]	@ (81018c4 <HAL_MspInit+0x30>)
 81018a2:	f043 0302 	orr.w	r3, r3, #2
 81018a6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81018aa:	4b06      	ldr	r3, [pc, #24]	@ (81018c4 <HAL_MspInit+0x30>)
 81018ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81018b0:	f003 0302 	and.w	r3, r3, #2
 81018b4:	607b      	str	r3, [r7, #4]
 81018b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81018b8:	bf00      	nop
 81018ba:	370c      	adds	r7, #12
 81018bc:	46bd      	mov	sp, r7
 81018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018c2:	4770      	bx	lr
 81018c4:	58024400 	.word	0x58024400

081018c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81018c8:	b480      	push	{r7}
 81018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 81018cc:	bf00      	nop
 81018ce:	e7fd      	b.n	81018cc <NMI_Handler+0x4>

081018d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81018d0:	b480      	push	{r7}
 81018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81018d4:	bf00      	nop
 81018d6:	e7fd      	b.n	81018d4 <HardFault_Handler+0x4>

081018d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81018d8:	b480      	push	{r7}
 81018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81018dc:	bf00      	nop
 81018de:	e7fd      	b.n	81018dc <MemManage_Handler+0x4>

081018e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81018e0:	b480      	push	{r7}
 81018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81018e4:	bf00      	nop
 81018e6:	e7fd      	b.n	81018e4 <BusFault_Handler+0x4>

081018e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81018e8:	b480      	push	{r7}
 81018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81018ec:	bf00      	nop
 81018ee:	e7fd      	b.n	81018ec <UsageFault_Handler+0x4>

081018f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81018f0:	b480      	push	{r7}
 81018f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81018f4:	bf00      	nop
 81018f6:	46bd      	mov	sp, r7
 81018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018fc:	4770      	bx	lr

081018fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81018fe:	b480      	push	{r7}
 8101900:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101902:	bf00      	nop
 8101904:	46bd      	mov	sp, r7
 8101906:	f85d 7b04 	ldr.w	r7, [sp], #4
 810190a:	4770      	bx	lr

0810190c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810190c:	b480      	push	{r7}
 810190e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101910:	bf00      	nop
 8101912:	46bd      	mov	sp, r7
 8101914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101918:	4770      	bx	lr

0810191a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810191a:	b580      	push	{r7, lr}
 810191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810191e:	f000 fa7f 	bl	8101e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101922:	bf00      	nop
 8101924:	bd80      	pop	{r7, pc}

08101926 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101926:	b480      	push	{r7}
 8101928:	af00      	add	r7, sp, #0
  return 1;
 810192a:	2301      	movs	r3, #1
}
 810192c:	4618      	mov	r0, r3
 810192e:	46bd      	mov	sp, r7
 8101930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101934:	4770      	bx	lr

08101936 <_kill>:

int _kill(int pid, int sig)
{
 8101936:	b580      	push	{r7, lr}
 8101938:	b082      	sub	sp, #8
 810193a:	af00      	add	r7, sp, #0
 810193c:	6078      	str	r0, [r7, #4]
 810193e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8101940:	f005 fbc6 	bl	81070d0 <__errno>
 8101944:	4603      	mov	r3, r0
 8101946:	2216      	movs	r2, #22
 8101948:	601a      	str	r2, [r3, #0]
  return -1;
 810194a:	f04f 33ff 	mov.w	r3, #4294967295
}
 810194e:	4618      	mov	r0, r3
 8101950:	3708      	adds	r7, #8
 8101952:	46bd      	mov	sp, r7
 8101954:	bd80      	pop	{r7, pc}

08101956 <_exit>:

void _exit (int status)
{
 8101956:	b580      	push	{r7, lr}
 8101958:	b082      	sub	sp, #8
 810195a:	af00      	add	r7, sp, #0
 810195c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 810195e:	f04f 31ff 	mov.w	r1, #4294967295
 8101962:	6878      	ldr	r0, [r7, #4]
 8101964:	f7ff ffe7 	bl	8101936 <_kill>
  while (1) {}    /* Make sure we hang here */
 8101968:	bf00      	nop
 810196a:	e7fd      	b.n	8101968 <_exit+0x12>

0810196c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 810196c:	b580      	push	{r7, lr}
 810196e:	b086      	sub	sp, #24
 8101970:	af00      	add	r7, sp, #0
 8101972:	60f8      	str	r0, [r7, #12]
 8101974:	60b9      	str	r1, [r7, #8]
 8101976:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101978:	2300      	movs	r3, #0
 810197a:	617b      	str	r3, [r7, #20]
 810197c:	e00a      	b.n	8101994 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 810197e:	f3af 8000 	nop.w
 8101982:	4601      	mov	r1, r0
 8101984:	68bb      	ldr	r3, [r7, #8]
 8101986:	1c5a      	adds	r2, r3, #1
 8101988:	60ba      	str	r2, [r7, #8]
 810198a:	b2ca      	uxtb	r2, r1
 810198c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810198e:	697b      	ldr	r3, [r7, #20]
 8101990:	3301      	adds	r3, #1
 8101992:	617b      	str	r3, [r7, #20]
 8101994:	697a      	ldr	r2, [r7, #20]
 8101996:	687b      	ldr	r3, [r7, #4]
 8101998:	429a      	cmp	r2, r3
 810199a:	dbf0      	blt.n	810197e <_read+0x12>
  }

  return len;
 810199c:	687b      	ldr	r3, [r7, #4]
}
 810199e:	4618      	mov	r0, r3
 81019a0:	3718      	adds	r7, #24
 81019a2:	46bd      	mov	sp, r7
 81019a4:	bd80      	pop	{r7, pc}

081019a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 81019a6:	b580      	push	{r7, lr}
 81019a8:	b086      	sub	sp, #24
 81019aa:	af00      	add	r7, sp, #0
 81019ac:	60f8      	str	r0, [r7, #12]
 81019ae:	60b9      	str	r1, [r7, #8]
 81019b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81019b2:	2300      	movs	r3, #0
 81019b4:	617b      	str	r3, [r7, #20]
 81019b6:	e009      	b.n	81019cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 81019b8:	68bb      	ldr	r3, [r7, #8]
 81019ba:	1c5a      	adds	r2, r3, #1
 81019bc:	60ba      	str	r2, [r7, #8]
 81019be:	781b      	ldrb	r3, [r3, #0]
 81019c0:	4618      	mov	r0, r3
 81019c2:	f000 f97d 	bl	8101cc0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81019c6:	697b      	ldr	r3, [r7, #20]
 81019c8:	3301      	adds	r3, #1
 81019ca:	617b      	str	r3, [r7, #20]
 81019cc:	697a      	ldr	r2, [r7, #20]
 81019ce:	687b      	ldr	r3, [r7, #4]
 81019d0:	429a      	cmp	r2, r3
 81019d2:	dbf1      	blt.n	81019b8 <_write+0x12>
  }
  return len;
 81019d4:	687b      	ldr	r3, [r7, #4]
}
 81019d6:	4618      	mov	r0, r3
 81019d8:	3718      	adds	r7, #24
 81019da:	46bd      	mov	sp, r7
 81019dc:	bd80      	pop	{r7, pc}

081019de <_close>:

int _close(int file)
{
 81019de:	b480      	push	{r7}
 81019e0:	b083      	sub	sp, #12
 81019e2:	af00      	add	r7, sp, #0
 81019e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 81019e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 81019ea:	4618      	mov	r0, r3
 81019ec:	370c      	adds	r7, #12
 81019ee:	46bd      	mov	sp, r7
 81019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019f4:	4770      	bx	lr

081019f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 81019f6:	b480      	push	{r7}
 81019f8:	b083      	sub	sp, #12
 81019fa:	af00      	add	r7, sp, #0
 81019fc:	6078      	str	r0, [r7, #4]
 81019fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8101a00:	683b      	ldr	r3, [r7, #0]
 8101a02:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8101a06:	605a      	str	r2, [r3, #4]
  return 0;
 8101a08:	2300      	movs	r3, #0
}
 8101a0a:	4618      	mov	r0, r3
 8101a0c:	370c      	adds	r7, #12
 8101a0e:	46bd      	mov	sp, r7
 8101a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a14:	4770      	bx	lr

08101a16 <_isatty>:

int _isatty(int file)
{
 8101a16:	b480      	push	{r7}
 8101a18:	b083      	sub	sp, #12
 8101a1a:	af00      	add	r7, sp, #0
 8101a1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8101a1e:	2301      	movs	r3, #1
}
 8101a20:	4618      	mov	r0, r3
 8101a22:	370c      	adds	r7, #12
 8101a24:	46bd      	mov	sp, r7
 8101a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a2a:	4770      	bx	lr

08101a2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101a2c:	b480      	push	{r7}
 8101a2e:	b085      	sub	sp, #20
 8101a30:	af00      	add	r7, sp, #0
 8101a32:	60f8      	str	r0, [r7, #12]
 8101a34:	60b9      	str	r1, [r7, #8]
 8101a36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8101a38:	2300      	movs	r3, #0
}
 8101a3a:	4618      	mov	r0, r3
 8101a3c:	3714      	adds	r7, #20
 8101a3e:	46bd      	mov	sp, r7
 8101a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a44:	4770      	bx	lr
	...

08101a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101a48:	b580      	push	{r7, lr}
 8101a4a:	b086      	sub	sp, #24
 8101a4c:	af00      	add	r7, sp, #0
 8101a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101a50:	4a14      	ldr	r2, [pc, #80]	@ (8101aa4 <_sbrk+0x5c>)
 8101a52:	4b15      	ldr	r3, [pc, #84]	@ (8101aa8 <_sbrk+0x60>)
 8101a54:	1ad3      	subs	r3, r2, r3
 8101a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101a58:	697b      	ldr	r3, [r7, #20]
 8101a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101a5c:	4b13      	ldr	r3, [pc, #76]	@ (8101aac <_sbrk+0x64>)
 8101a5e:	681b      	ldr	r3, [r3, #0]
 8101a60:	2b00      	cmp	r3, #0
 8101a62:	d102      	bne.n	8101a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101a64:	4b11      	ldr	r3, [pc, #68]	@ (8101aac <_sbrk+0x64>)
 8101a66:	4a12      	ldr	r2, [pc, #72]	@ (8101ab0 <_sbrk+0x68>)
 8101a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101a6a:	4b10      	ldr	r3, [pc, #64]	@ (8101aac <_sbrk+0x64>)
 8101a6c:	681a      	ldr	r2, [r3, #0]
 8101a6e:	687b      	ldr	r3, [r7, #4]
 8101a70:	4413      	add	r3, r2
 8101a72:	693a      	ldr	r2, [r7, #16]
 8101a74:	429a      	cmp	r2, r3
 8101a76:	d207      	bcs.n	8101a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101a78:	f005 fb2a 	bl	81070d0 <__errno>
 8101a7c:	4603      	mov	r3, r0
 8101a7e:	220c      	movs	r2, #12
 8101a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101a82:	f04f 33ff 	mov.w	r3, #4294967295
 8101a86:	e009      	b.n	8101a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101a88:	4b08      	ldr	r3, [pc, #32]	@ (8101aac <_sbrk+0x64>)
 8101a8a:	681b      	ldr	r3, [r3, #0]
 8101a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101a8e:	4b07      	ldr	r3, [pc, #28]	@ (8101aac <_sbrk+0x64>)
 8101a90:	681a      	ldr	r2, [r3, #0]
 8101a92:	687b      	ldr	r3, [r7, #4]
 8101a94:	4413      	add	r3, r2
 8101a96:	4a05      	ldr	r2, [pc, #20]	@ (8101aac <_sbrk+0x64>)
 8101a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101a9a:	68fb      	ldr	r3, [r7, #12]
}
 8101a9c:	4618      	mov	r0, r3
 8101a9e:	3718      	adds	r7, #24
 8101aa0:	46bd      	mov	sp, r7
 8101aa2:	bd80      	pop	{r7, pc}
 8101aa4:	10048000 	.word	0x10048000
 8101aa8:	00000400 	.word	0x00000400
 8101aac:	10000684 	.word	0x10000684
 8101ab0:	10000908 	.word	0x10000908

08101ab4 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8101ab4:	b580      	push	{r7, lr}
 8101ab6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8101ab8:	4b22      	ldr	r3, [pc, #136]	@ (8101b44 <MX_UART4_Init+0x90>)
 8101aba:	4a23      	ldr	r2, [pc, #140]	@ (8101b48 <MX_UART4_Init+0x94>)
 8101abc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 921600;
 8101abe:	4b21      	ldr	r3, [pc, #132]	@ (8101b44 <MX_UART4_Init+0x90>)
 8101ac0:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8101ac4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8101ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8101b44 <MX_UART4_Init+0x90>)
 8101ac8:	2200      	movs	r2, #0
 8101aca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8101acc:	4b1d      	ldr	r3, [pc, #116]	@ (8101b44 <MX_UART4_Init+0x90>)
 8101ace:	2200      	movs	r2, #0
 8101ad0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8101ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8101b44 <MX_UART4_Init+0x90>)
 8101ad4:	2200      	movs	r2, #0
 8101ad6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8101ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8101b44 <MX_UART4_Init+0x90>)
 8101ada:	220c      	movs	r2, #12
 8101adc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101ade:	4b19      	ldr	r3, [pc, #100]	@ (8101b44 <MX_UART4_Init+0x90>)
 8101ae0:	2200      	movs	r2, #0
 8101ae2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8101ae4:	4b17      	ldr	r3, [pc, #92]	@ (8101b44 <MX_UART4_Init+0x90>)
 8101ae6:	2200      	movs	r2, #0
 8101ae8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101aea:	4b16      	ldr	r3, [pc, #88]	@ (8101b44 <MX_UART4_Init+0x90>)
 8101aec:	2200      	movs	r2, #0
 8101aee:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101af0:	4b14      	ldr	r3, [pc, #80]	@ (8101b44 <MX_UART4_Init+0x90>)
 8101af2:	2200      	movs	r2, #0
 8101af4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101af6:	4b13      	ldr	r3, [pc, #76]	@ (8101b44 <MX_UART4_Init+0x90>)
 8101af8:	2200      	movs	r2, #0
 8101afa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8101afc:	4811      	ldr	r0, [pc, #68]	@ (8101b44 <MX_UART4_Init+0x90>)
 8101afe:	f003 fb9b 	bl	8105238 <HAL_UART_Init>
 8101b02:	4603      	mov	r3, r0
 8101b04:	2b00      	cmp	r3, #0
 8101b06:	d001      	beq.n	8101b0c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8101b08:	f7ff fdfd 	bl	8101706 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101b0c:	2100      	movs	r1, #0
 8101b0e:	480d      	ldr	r0, [pc, #52]	@ (8101b44 <MX_UART4_Init+0x90>)
 8101b10:	f004 fc30 	bl	8106374 <HAL_UARTEx_SetTxFifoThreshold>
 8101b14:	4603      	mov	r3, r0
 8101b16:	2b00      	cmp	r3, #0
 8101b18:	d001      	beq.n	8101b1e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8101b1a:	f7ff fdf4 	bl	8101706 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101b1e:	2100      	movs	r1, #0
 8101b20:	4808      	ldr	r0, [pc, #32]	@ (8101b44 <MX_UART4_Init+0x90>)
 8101b22:	f004 fc65 	bl	81063f0 <HAL_UARTEx_SetRxFifoThreshold>
 8101b26:	4603      	mov	r3, r0
 8101b28:	2b00      	cmp	r3, #0
 8101b2a:	d001      	beq.n	8101b30 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8101b2c:	f7ff fdeb 	bl	8101706 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8101b30:	4804      	ldr	r0, [pc, #16]	@ (8101b44 <MX_UART4_Init+0x90>)
 8101b32:	f004 fbe6 	bl	8106302 <HAL_UARTEx_DisableFifoMode>
 8101b36:	4603      	mov	r3, r0
 8101b38:	2b00      	cmp	r3, #0
 8101b3a:	d001      	beq.n	8101b40 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8101b3c:	f7ff fde3 	bl	8101706 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8101b40:	bf00      	nop
 8101b42:	bd80      	pop	{r7, pc}
 8101b44:	10000688 	.word	0x10000688
 8101b48:	40004c00 	.word	0x40004c00

08101b4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8101b4c:	b580      	push	{r7, lr}
 8101b4e:	b0bc      	sub	sp, #240	@ 0xf0
 8101b50:	af00      	add	r7, sp, #0
 8101b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101b54:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101b58:	2200      	movs	r2, #0
 8101b5a:	601a      	str	r2, [r3, #0]
 8101b5c:	605a      	str	r2, [r3, #4]
 8101b5e:	609a      	str	r2, [r3, #8]
 8101b60:	60da      	str	r2, [r3, #12]
 8101b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101b64:	f107 0318 	add.w	r3, r7, #24
 8101b68:	22c0      	movs	r2, #192	@ 0xc0
 8101b6a:	2100      	movs	r1, #0
 8101b6c:	4618      	mov	r0, r3
 8101b6e:	f005 fa5c 	bl	810702a <memset>
  if(uartHandle->Instance==UART4)
 8101b72:	687b      	ldr	r3, [r7, #4]
 8101b74:	681b      	ldr	r3, [r3, #0]
 8101b76:	4a39      	ldr	r2, [pc, #228]	@ (8101c5c <HAL_UART_MspInit+0x110>)
 8101b78:	4293      	cmp	r3, r2
 8101b7a:	d16a      	bne.n	8101c52 <HAL_UART_MspInit+0x106>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8101b7c:	f04f 0202 	mov.w	r2, #2
 8101b80:	f04f 0300 	mov.w	r3, #0
 8101b84:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8101b88:	2300      	movs	r3, #0
 8101b8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101b8e:	f107 0318 	add.w	r3, r7, #24
 8101b92:	4618      	mov	r0, r3
 8101b94:	f000 febc 	bl	8102910 <HAL_RCCEx_PeriphCLKConfig>
 8101b98:	4603      	mov	r3, r0
 8101b9a:	2b00      	cmp	r3, #0
 8101b9c:	d001      	beq.n	8101ba2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8101b9e:	f7ff fdb2 	bl	8101706 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8101ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8101c60 <HAL_UART_MspInit+0x114>)
 8101ba4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101ba8:	4a2d      	ldr	r2, [pc, #180]	@ (8101c60 <HAL_UART_MspInit+0x114>)
 8101baa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8101bae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8101c60 <HAL_UART_MspInit+0x114>)
 8101bb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101bb8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8101bbc:	617b      	str	r3, [r7, #20]
 8101bbe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101bc0:	4b27      	ldr	r3, [pc, #156]	@ (8101c60 <HAL_UART_MspInit+0x114>)
 8101bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101bc6:	4a26      	ldr	r2, [pc, #152]	@ (8101c60 <HAL_UART_MspInit+0x114>)
 8101bc8:	f043 0301 	orr.w	r3, r3, #1
 8101bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101bd0:	4b23      	ldr	r3, [pc, #140]	@ (8101c60 <HAL_UART_MspInit+0x114>)
 8101bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101bd6:	f003 0301 	and.w	r3, r3, #1
 8101bda:	613b      	str	r3, [r7, #16]
 8101bdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101bde:	4b20      	ldr	r3, [pc, #128]	@ (8101c60 <HAL_UART_MspInit+0x114>)
 8101be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101be4:	4a1e      	ldr	r2, [pc, #120]	@ (8101c60 <HAL_UART_MspInit+0x114>)
 8101be6:	f043 0304 	orr.w	r3, r3, #4
 8101bea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101bee:	4b1c      	ldr	r3, [pc, #112]	@ (8101c60 <HAL_UART_MspInit+0x114>)
 8101bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101bf4:	f003 0304 	and.w	r3, r3, #4
 8101bf8:	60fb      	str	r3, [r7, #12]
 8101bfa:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8101bfc:	2301      	movs	r3, #1
 8101bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c02:	2302      	movs	r3, #2
 8101c04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c08:	2300      	movs	r3, #0
 8101c0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c0e:	2300      	movs	r3, #0
 8101c10:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8101c14:	2308      	movs	r3, #8
 8101c16:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101c1a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101c1e:	4619      	mov	r1, r3
 8101c20:	4810      	ldr	r0, [pc, #64]	@ (8101c64 <HAL_UART_MspInit+0x118>)
 8101c22:	f000 fa39 	bl	8102098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8101c26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8101c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c2e:	2302      	movs	r3, #2
 8101c30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c34:	2300      	movs	r3, #0
 8101c36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c3a:	2300      	movs	r3, #0
 8101c3c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8101c40:	2308      	movs	r3, #8
 8101c42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101c46:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101c4a:	4619      	mov	r1, r3
 8101c4c:	4806      	ldr	r0, [pc, #24]	@ (8101c68 <HAL_UART_MspInit+0x11c>)
 8101c4e:	f000 fa23 	bl	8102098 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8101c52:	bf00      	nop
 8101c54:	37f0      	adds	r7, #240	@ 0xf0
 8101c56:	46bd      	mov	sp, r7
 8101c58:	bd80      	pop	{r7, pc}
 8101c5a:	bf00      	nop
 8101c5c:	40004c00 	.word	0x40004c00
 8101c60:	58024400 	.word	0x58024400
 8101c64:	58020000 	.word	0x58020000
 8101c68:	58020800 	.word	0x58020800

08101c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101c6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8101ca4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101c70:	f7ff f99a 	bl	8100fa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101c74:	480c      	ldr	r0, [pc, #48]	@ (8101ca8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101c76:	490d      	ldr	r1, [pc, #52]	@ (8101cac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101c78:	4a0d      	ldr	r2, [pc, #52]	@ (8101cb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101c7c:	e002      	b.n	8101c84 <LoopCopyDataInit>

08101c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101c82:	3304      	adds	r3, #4

08101c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101c88:	d3f9      	bcc.n	8101c7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101c8a:	4a0a      	ldr	r2, [pc, #40]	@ (8101cb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101c8c:	4c0a      	ldr	r4, [pc, #40]	@ (8101cb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101c90:	e001      	b.n	8101c96 <LoopFillZerobss>

08101c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101c94:	3204      	adds	r2, #4

08101c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101c98:	d3fb      	bcc.n	8101c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101c9a:	f005 fa1f 	bl	81070dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101c9e:	f7ff fba3 	bl	81013e8 <main>
  bx  lr
 8101ca2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101ca4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101ca8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101cac:	100001dc 	.word	0x100001dc
  ldr r2, =_sidata
 8101cb0:	081095a0 	.word	0x081095a0
  ldr r2, =_sbss
 8101cb4:	100001dc 	.word	0x100001dc
  ldr r4, =_ebss
 8101cb8:	10000904 	.word	0x10000904

08101cbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101cbc:	e7fe      	b.n	8101cbc <ADC3_IRQHandler>
	...

08101cc0 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8101cc0:	b580      	push	{r7, lr}
 8101cc2:	b082      	sub	sp, #8
 8101cc4:	af00      	add	r7, sp, #0
 8101cc6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8101cc8:	4b09      	ldr	r3, [pc, #36]	@ (8101cf0 <__io_putchar+0x30>)
 8101cca:	781b      	ldrb	r3, [r3, #0]
 8101ccc:	461a      	mov	r2, r3
 8101cce:	2394      	movs	r3, #148	@ 0x94
 8101cd0:	fb02 f303 	mul.w	r3, r2, r3
 8101cd4:	4a07      	ldr	r2, [pc, #28]	@ (8101cf4 <__io_putchar+0x34>)
 8101cd6:	1898      	adds	r0, r3, r2
 8101cd8:	1d39      	adds	r1, r7, #4
 8101cda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8101cde:	2201      	movs	r2, #1
 8101ce0:	f003 fafa 	bl	81052d8 <HAL_UART_Transmit>
  return ch;
 8101ce4:	687b      	ldr	r3, [r7, #4]
}
 8101ce6:	4618      	mov	r0, r3
 8101ce8:	3708      	adds	r7, #8
 8101cea:	46bd      	mov	sp, r7
 8101cec:	bd80      	pop	{r7, pc}
 8101cee:	bf00      	nop
 8101cf0:	100007b0 	.word	0x100007b0
 8101cf4:	1000071c 	.word	0x1000071c

08101cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101cf8:	b580      	push	{r7, lr}
 8101cfa:	b082      	sub	sp, #8
 8101cfc:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101cfe:	4b28      	ldr	r3, [pc, #160]	@ (8101da0 <HAL_Init+0xa8>)
 8101d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101d04:	4a26      	ldr	r2, [pc, #152]	@ (8101da0 <HAL_Init+0xa8>)
 8101d06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8101d0a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101d0e:	4b24      	ldr	r3, [pc, #144]	@ (8101da0 <HAL_Init+0xa8>)
 8101d10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101d14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101d18:	603b      	str	r3, [r7, #0]
 8101d1a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101d1c:	4b21      	ldr	r3, [pc, #132]	@ (8101da4 <HAL_Init+0xac>)
 8101d1e:	681b      	ldr	r3, [r3, #0]
 8101d20:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8101d24:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8101d28:	4a1e      	ldr	r2, [pc, #120]	@ (8101da4 <HAL_Init+0xac>)
 8101d2a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8101d2e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101d30:	4b1c      	ldr	r3, [pc, #112]	@ (8101da4 <HAL_Init+0xac>)
 8101d32:	681b      	ldr	r3, [r3, #0]
 8101d34:	4a1b      	ldr	r2, [pc, #108]	@ (8101da4 <HAL_Init+0xac>)
 8101d36:	f043 0301 	orr.w	r3, r3, #1
 8101d3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101d3c:	2003      	movs	r0, #3
 8101d3e:	f000 f965 	bl	810200c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101d42:	f000 fc0d 	bl	8102560 <HAL_RCC_GetSysClockFreq>
 8101d46:	4602      	mov	r2, r0
 8101d48:	4b15      	ldr	r3, [pc, #84]	@ (8101da0 <HAL_Init+0xa8>)
 8101d4a:	699b      	ldr	r3, [r3, #24]
 8101d4c:	0a1b      	lsrs	r3, r3, #8
 8101d4e:	f003 030f 	and.w	r3, r3, #15
 8101d52:	4915      	ldr	r1, [pc, #84]	@ (8101da8 <HAL_Init+0xb0>)
 8101d54:	5ccb      	ldrb	r3, [r1, r3]
 8101d56:	f003 031f 	and.w	r3, r3, #31
 8101d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8101d5e:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101d60:	4b0f      	ldr	r3, [pc, #60]	@ (8101da0 <HAL_Init+0xa8>)
 8101d62:	699b      	ldr	r3, [r3, #24]
 8101d64:	f003 030f 	and.w	r3, r3, #15
 8101d68:	4a0f      	ldr	r2, [pc, #60]	@ (8101da8 <HAL_Init+0xb0>)
 8101d6a:	5cd3      	ldrb	r3, [r2, r3]
 8101d6c:	f003 031f 	and.w	r3, r3, #31
 8101d70:	687a      	ldr	r2, [r7, #4]
 8101d72:	fa22 f303 	lsr.w	r3, r2, r3
 8101d76:	4a0d      	ldr	r2, [pc, #52]	@ (8101dac <HAL_Init+0xb4>)
 8101d78:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8101dac <HAL_Init+0xb4>)
 8101d7c:	681b      	ldr	r3, [r3, #0]
 8101d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8101db0 <HAL_Init+0xb8>)
 8101d80:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101d82:	2000      	movs	r0, #0
 8101d84:	f000 f816 	bl	8101db4 <HAL_InitTick>
 8101d88:	4603      	mov	r3, r0
 8101d8a:	2b00      	cmp	r3, #0
 8101d8c:	d001      	beq.n	8101d92 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101d8e:	2301      	movs	r3, #1
 8101d90:	e002      	b.n	8101d98 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101d92:	f7ff fd7f 	bl	8101894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101d96:	2300      	movs	r3, #0
}
 8101d98:	4618      	mov	r0, r3
 8101d9a:	3708      	adds	r7, #8
 8101d9c:	46bd      	mov	sp, r7
 8101d9e:	bd80      	pop	{r7, pc}
 8101da0:	58024400 	.word	0x58024400
 8101da4:	40024400 	.word	0x40024400
 8101da8:	081091e8 	.word	0x081091e8
 8101dac:	10000004 	.word	0x10000004
 8101db0:	10000000 	.word	0x10000000

08101db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101db4:	b580      	push	{r7, lr}
 8101db6:	b082      	sub	sp, #8
 8101db8:	af00      	add	r7, sp, #0
 8101dba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101dbc:	4b15      	ldr	r3, [pc, #84]	@ (8101e14 <HAL_InitTick+0x60>)
 8101dbe:	781b      	ldrb	r3, [r3, #0]
 8101dc0:	2b00      	cmp	r3, #0
 8101dc2:	d101      	bne.n	8101dc8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101dc4:	2301      	movs	r3, #1
 8101dc6:	e021      	b.n	8101e0c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101dc8:	4b13      	ldr	r3, [pc, #76]	@ (8101e18 <HAL_InitTick+0x64>)
 8101dca:	681a      	ldr	r2, [r3, #0]
 8101dcc:	4b11      	ldr	r3, [pc, #68]	@ (8101e14 <HAL_InitTick+0x60>)
 8101dce:	781b      	ldrb	r3, [r3, #0]
 8101dd0:	4619      	mov	r1, r3
 8101dd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8101dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8101dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8101dde:	4618      	mov	r0, r3
 8101de0:	f000 f939 	bl	8102056 <HAL_SYSTICK_Config>
 8101de4:	4603      	mov	r3, r0
 8101de6:	2b00      	cmp	r3, #0
 8101de8:	d001      	beq.n	8101dee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101dea:	2301      	movs	r3, #1
 8101dec:	e00e      	b.n	8101e0c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101dee:	687b      	ldr	r3, [r7, #4]
 8101df0:	2b0f      	cmp	r3, #15
 8101df2:	d80a      	bhi.n	8101e0a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101df4:	2200      	movs	r2, #0
 8101df6:	6879      	ldr	r1, [r7, #4]
 8101df8:	f04f 30ff 	mov.w	r0, #4294967295
 8101dfc:	f000 f911 	bl	8102022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101e00:	4a06      	ldr	r2, [pc, #24]	@ (8101e1c <HAL_InitTick+0x68>)
 8101e02:	687b      	ldr	r3, [r7, #4]
 8101e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101e06:	2300      	movs	r3, #0
 8101e08:	e000      	b.n	8101e0c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101e0a:	2301      	movs	r3, #1
}
 8101e0c:	4618      	mov	r0, r3
 8101e0e:	3708      	adds	r7, #8
 8101e10:	46bd      	mov	sp, r7
 8101e12:	bd80      	pop	{r7, pc}
 8101e14:	10000010 	.word	0x10000010
 8101e18:	10000000 	.word	0x10000000
 8101e1c:	1000000c 	.word	0x1000000c

08101e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101e20:	b480      	push	{r7}
 8101e22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101e24:	4b06      	ldr	r3, [pc, #24]	@ (8101e40 <HAL_IncTick+0x20>)
 8101e26:	781b      	ldrb	r3, [r3, #0]
 8101e28:	461a      	mov	r2, r3
 8101e2a:	4b06      	ldr	r3, [pc, #24]	@ (8101e44 <HAL_IncTick+0x24>)
 8101e2c:	681b      	ldr	r3, [r3, #0]
 8101e2e:	4413      	add	r3, r2
 8101e30:	4a04      	ldr	r2, [pc, #16]	@ (8101e44 <HAL_IncTick+0x24>)
 8101e32:	6013      	str	r3, [r2, #0]
}
 8101e34:	bf00      	nop
 8101e36:	46bd      	mov	sp, r7
 8101e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e3c:	4770      	bx	lr
 8101e3e:	bf00      	nop
 8101e40:	10000010 	.word	0x10000010
 8101e44:	100007b4 	.word	0x100007b4

08101e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101e48:	b480      	push	{r7}
 8101e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8101e4c:	4b03      	ldr	r3, [pc, #12]	@ (8101e5c <HAL_GetTick+0x14>)
 8101e4e:	681b      	ldr	r3, [r3, #0]
}
 8101e50:	4618      	mov	r0, r3
 8101e52:	46bd      	mov	sp, r7
 8101e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e58:	4770      	bx	lr
 8101e5a:	bf00      	nop
 8101e5c:	100007b4 	.word	0x100007b4

08101e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101e60:	b580      	push	{r7, lr}
 8101e62:	b084      	sub	sp, #16
 8101e64:	af00      	add	r7, sp, #0
 8101e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101e68:	f7ff ffee 	bl	8101e48 <HAL_GetTick>
 8101e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101e6e:	687b      	ldr	r3, [r7, #4]
 8101e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101e72:	68fb      	ldr	r3, [r7, #12]
 8101e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8101e78:	d005      	beq.n	8101e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8101ea4 <HAL_Delay+0x44>)
 8101e7c:	781b      	ldrb	r3, [r3, #0]
 8101e7e:	461a      	mov	r2, r3
 8101e80:	68fb      	ldr	r3, [r7, #12]
 8101e82:	4413      	add	r3, r2
 8101e84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101e86:	bf00      	nop
 8101e88:	f7ff ffde 	bl	8101e48 <HAL_GetTick>
 8101e8c:	4602      	mov	r2, r0
 8101e8e:	68bb      	ldr	r3, [r7, #8]
 8101e90:	1ad3      	subs	r3, r2, r3
 8101e92:	68fa      	ldr	r2, [r7, #12]
 8101e94:	429a      	cmp	r2, r3
 8101e96:	d8f7      	bhi.n	8101e88 <HAL_Delay+0x28>
  {
  }
}
 8101e98:	bf00      	nop
 8101e9a:	bf00      	nop
 8101e9c:	3710      	adds	r7, #16
 8101e9e:	46bd      	mov	sp, r7
 8101ea0:	bd80      	pop	{r7, pc}
 8101ea2:	bf00      	nop
 8101ea4:	10000010 	.word	0x10000010

08101ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101ea8:	b480      	push	{r7}
 8101eaa:	b085      	sub	sp, #20
 8101eac:	af00      	add	r7, sp, #0
 8101eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101eb0:	687b      	ldr	r3, [r7, #4]
 8101eb2:	f003 0307 	and.w	r3, r3, #7
 8101eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8101eec <__NVIC_SetPriorityGrouping+0x44>)
 8101eba:	68db      	ldr	r3, [r3, #12]
 8101ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101ebe:	68ba      	ldr	r2, [r7, #8]
 8101ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8101ec4:	4013      	ands	r3, r2
 8101ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101ec8:	68fb      	ldr	r3, [r7, #12]
 8101eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101ecc:	68bb      	ldr	r3, [r7, #8]
 8101ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8101ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101eda:	4a04      	ldr	r2, [pc, #16]	@ (8101eec <__NVIC_SetPriorityGrouping+0x44>)
 8101edc:	68bb      	ldr	r3, [r7, #8]
 8101ede:	60d3      	str	r3, [r2, #12]
}
 8101ee0:	bf00      	nop
 8101ee2:	3714      	adds	r7, #20
 8101ee4:	46bd      	mov	sp, r7
 8101ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101eea:	4770      	bx	lr
 8101eec:	e000ed00 	.word	0xe000ed00

08101ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101ef0:	b480      	push	{r7}
 8101ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101ef4:	4b04      	ldr	r3, [pc, #16]	@ (8101f08 <__NVIC_GetPriorityGrouping+0x18>)
 8101ef6:	68db      	ldr	r3, [r3, #12]
 8101ef8:	0a1b      	lsrs	r3, r3, #8
 8101efa:	f003 0307 	and.w	r3, r3, #7
}
 8101efe:	4618      	mov	r0, r3
 8101f00:	46bd      	mov	sp, r7
 8101f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f06:	4770      	bx	lr
 8101f08:	e000ed00 	.word	0xe000ed00

08101f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101f0c:	b480      	push	{r7}
 8101f0e:	b083      	sub	sp, #12
 8101f10:	af00      	add	r7, sp, #0
 8101f12:	4603      	mov	r3, r0
 8101f14:	6039      	str	r1, [r7, #0]
 8101f16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101f18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101f1c:	2b00      	cmp	r3, #0
 8101f1e:	db0a      	blt.n	8101f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101f20:	683b      	ldr	r3, [r7, #0]
 8101f22:	b2da      	uxtb	r2, r3
 8101f24:	490c      	ldr	r1, [pc, #48]	@ (8101f58 <__NVIC_SetPriority+0x4c>)
 8101f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101f2a:	0112      	lsls	r2, r2, #4
 8101f2c:	b2d2      	uxtb	r2, r2
 8101f2e:	440b      	add	r3, r1
 8101f30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101f34:	e00a      	b.n	8101f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101f36:	683b      	ldr	r3, [r7, #0]
 8101f38:	b2da      	uxtb	r2, r3
 8101f3a:	4908      	ldr	r1, [pc, #32]	@ (8101f5c <__NVIC_SetPriority+0x50>)
 8101f3c:	88fb      	ldrh	r3, [r7, #6]
 8101f3e:	f003 030f 	and.w	r3, r3, #15
 8101f42:	3b04      	subs	r3, #4
 8101f44:	0112      	lsls	r2, r2, #4
 8101f46:	b2d2      	uxtb	r2, r2
 8101f48:	440b      	add	r3, r1
 8101f4a:	761a      	strb	r2, [r3, #24]
}
 8101f4c:	bf00      	nop
 8101f4e:	370c      	adds	r7, #12
 8101f50:	46bd      	mov	sp, r7
 8101f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f56:	4770      	bx	lr
 8101f58:	e000e100 	.word	0xe000e100
 8101f5c:	e000ed00 	.word	0xe000ed00

08101f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101f60:	b480      	push	{r7}
 8101f62:	b089      	sub	sp, #36	@ 0x24
 8101f64:	af00      	add	r7, sp, #0
 8101f66:	60f8      	str	r0, [r7, #12]
 8101f68:	60b9      	str	r1, [r7, #8]
 8101f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101f6c:	68fb      	ldr	r3, [r7, #12]
 8101f6e:	f003 0307 	and.w	r3, r3, #7
 8101f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101f74:	69fb      	ldr	r3, [r7, #28]
 8101f76:	f1c3 0307 	rsb	r3, r3, #7
 8101f7a:	2b04      	cmp	r3, #4
 8101f7c:	bf28      	it	cs
 8101f7e:	2304      	movcs	r3, #4
 8101f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101f82:	69fb      	ldr	r3, [r7, #28]
 8101f84:	3304      	adds	r3, #4
 8101f86:	2b06      	cmp	r3, #6
 8101f88:	d902      	bls.n	8101f90 <NVIC_EncodePriority+0x30>
 8101f8a:	69fb      	ldr	r3, [r7, #28]
 8101f8c:	3b03      	subs	r3, #3
 8101f8e:	e000      	b.n	8101f92 <NVIC_EncodePriority+0x32>
 8101f90:	2300      	movs	r3, #0
 8101f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101f94:	f04f 32ff 	mov.w	r2, #4294967295
 8101f98:	69bb      	ldr	r3, [r7, #24]
 8101f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8101f9e:	43da      	mvns	r2, r3
 8101fa0:	68bb      	ldr	r3, [r7, #8]
 8101fa2:	401a      	ands	r2, r3
 8101fa4:	697b      	ldr	r3, [r7, #20]
 8101fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8101fac:	697b      	ldr	r3, [r7, #20]
 8101fae:	fa01 f303 	lsl.w	r3, r1, r3
 8101fb2:	43d9      	mvns	r1, r3
 8101fb4:	687b      	ldr	r3, [r7, #4]
 8101fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101fb8:	4313      	orrs	r3, r2
         );
}
 8101fba:	4618      	mov	r0, r3
 8101fbc:	3724      	adds	r7, #36	@ 0x24
 8101fbe:	46bd      	mov	sp, r7
 8101fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fc4:	4770      	bx	lr
	...

08101fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101fc8:	b580      	push	{r7, lr}
 8101fca:	b082      	sub	sp, #8
 8101fcc:	af00      	add	r7, sp, #0
 8101fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101fd0:	687b      	ldr	r3, [r7, #4]
 8101fd2:	3b01      	subs	r3, #1
 8101fd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8101fd8:	d301      	bcc.n	8101fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101fda:	2301      	movs	r3, #1
 8101fdc:	e00f      	b.n	8101ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101fde:	4a0a      	ldr	r2, [pc, #40]	@ (8102008 <SysTick_Config+0x40>)
 8101fe0:	687b      	ldr	r3, [r7, #4]
 8101fe2:	3b01      	subs	r3, #1
 8101fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101fe6:	210f      	movs	r1, #15
 8101fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8101fec:	f7ff ff8e 	bl	8101f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101ff0:	4b05      	ldr	r3, [pc, #20]	@ (8102008 <SysTick_Config+0x40>)
 8101ff2:	2200      	movs	r2, #0
 8101ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101ff6:	4b04      	ldr	r3, [pc, #16]	@ (8102008 <SysTick_Config+0x40>)
 8101ff8:	2207      	movs	r2, #7
 8101ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101ffc:	2300      	movs	r3, #0
}
 8101ffe:	4618      	mov	r0, r3
 8102000:	3708      	adds	r7, #8
 8102002:	46bd      	mov	sp, r7
 8102004:	bd80      	pop	{r7, pc}
 8102006:	bf00      	nop
 8102008:	e000e010 	.word	0xe000e010

0810200c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810200c:	b580      	push	{r7, lr}
 810200e:	b082      	sub	sp, #8
 8102010:	af00      	add	r7, sp, #0
 8102012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102014:	6878      	ldr	r0, [r7, #4]
 8102016:	f7ff ff47 	bl	8101ea8 <__NVIC_SetPriorityGrouping>
}
 810201a:	bf00      	nop
 810201c:	3708      	adds	r7, #8
 810201e:	46bd      	mov	sp, r7
 8102020:	bd80      	pop	{r7, pc}

08102022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102022:	b580      	push	{r7, lr}
 8102024:	b086      	sub	sp, #24
 8102026:	af00      	add	r7, sp, #0
 8102028:	4603      	mov	r3, r0
 810202a:	60b9      	str	r1, [r7, #8]
 810202c:	607a      	str	r2, [r7, #4]
 810202e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102030:	f7ff ff5e 	bl	8101ef0 <__NVIC_GetPriorityGrouping>
 8102034:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102036:	687a      	ldr	r2, [r7, #4]
 8102038:	68b9      	ldr	r1, [r7, #8]
 810203a:	6978      	ldr	r0, [r7, #20]
 810203c:	f7ff ff90 	bl	8101f60 <NVIC_EncodePriority>
 8102040:	4602      	mov	r2, r0
 8102042:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102046:	4611      	mov	r1, r2
 8102048:	4618      	mov	r0, r3
 810204a:	f7ff ff5f 	bl	8101f0c <__NVIC_SetPriority>
}
 810204e:	bf00      	nop
 8102050:	3718      	adds	r7, #24
 8102052:	46bd      	mov	sp, r7
 8102054:	bd80      	pop	{r7, pc}

08102056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8102056:	b580      	push	{r7, lr}
 8102058:	b082      	sub	sp, #8
 810205a:	af00      	add	r7, sp, #0
 810205c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810205e:	6878      	ldr	r0, [r7, #4]
 8102060:	f7ff ffb2 	bl	8101fc8 <SysTick_Config>
 8102064:	4603      	mov	r3, r0
}
 8102066:	4618      	mov	r0, r3
 8102068:	3708      	adds	r7, #8
 810206a:	46bd      	mov	sp, r7
 810206c:	bd80      	pop	{r7, pc}
	...

08102070 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102070:	b480      	push	{r7}
 8102072:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102074:	4b07      	ldr	r3, [pc, #28]	@ (8102094 <HAL_GetCurrentCPUID+0x24>)
 8102076:	681b      	ldr	r3, [r3, #0]
 8102078:	091b      	lsrs	r3, r3, #4
 810207a:	f003 030f 	and.w	r3, r3, #15
 810207e:	2b07      	cmp	r3, #7
 8102080:	d101      	bne.n	8102086 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8102082:	2303      	movs	r3, #3
 8102084:	e000      	b.n	8102088 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8102086:	2301      	movs	r3, #1
  }
}
 8102088:	4618      	mov	r0, r3
 810208a:	46bd      	mov	sp, r7
 810208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102090:	4770      	bx	lr
 8102092:	bf00      	nop
 8102094:	e000ed00 	.word	0xe000ed00

08102098 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8102098:	b480      	push	{r7}
 810209a:	b089      	sub	sp, #36	@ 0x24
 810209c:	af00      	add	r7, sp, #0
 810209e:	6078      	str	r0, [r7, #4]
 81020a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81020a2:	2300      	movs	r3, #0
 81020a4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81020a6:	4b89      	ldr	r3, [pc, #548]	@ (81022cc <HAL_GPIO_Init+0x234>)
 81020a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81020aa:	e194      	b.n	81023d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81020ac:	683b      	ldr	r3, [r7, #0]
 81020ae:	681a      	ldr	r2, [r3, #0]
 81020b0:	2101      	movs	r1, #1
 81020b2:	69fb      	ldr	r3, [r7, #28]
 81020b4:	fa01 f303 	lsl.w	r3, r1, r3
 81020b8:	4013      	ands	r3, r2
 81020ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81020bc:	693b      	ldr	r3, [r7, #16]
 81020be:	2b00      	cmp	r3, #0
 81020c0:	f000 8186 	beq.w	81023d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81020c4:	683b      	ldr	r3, [r7, #0]
 81020c6:	685b      	ldr	r3, [r3, #4]
 81020c8:	f003 0303 	and.w	r3, r3, #3
 81020cc:	2b01      	cmp	r3, #1
 81020ce:	d005      	beq.n	81020dc <HAL_GPIO_Init+0x44>
 81020d0:	683b      	ldr	r3, [r7, #0]
 81020d2:	685b      	ldr	r3, [r3, #4]
 81020d4:	f003 0303 	and.w	r3, r3, #3
 81020d8:	2b02      	cmp	r3, #2
 81020da:	d130      	bne.n	810213e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81020dc:	687b      	ldr	r3, [r7, #4]
 81020de:	689b      	ldr	r3, [r3, #8]
 81020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81020e2:	69fb      	ldr	r3, [r7, #28]
 81020e4:	005b      	lsls	r3, r3, #1
 81020e6:	2203      	movs	r2, #3
 81020e8:	fa02 f303 	lsl.w	r3, r2, r3
 81020ec:	43db      	mvns	r3, r3
 81020ee:	69ba      	ldr	r2, [r7, #24]
 81020f0:	4013      	ands	r3, r2
 81020f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81020f4:	683b      	ldr	r3, [r7, #0]
 81020f6:	68da      	ldr	r2, [r3, #12]
 81020f8:	69fb      	ldr	r3, [r7, #28]
 81020fa:	005b      	lsls	r3, r3, #1
 81020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8102100:	69ba      	ldr	r2, [r7, #24]
 8102102:	4313      	orrs	r3, r2
 8102104:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102106:	687b      	ldr	r3, [r7, #4]
 8102108:	69ba      	ldr	r2, [r7, #24]
 810210a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810210c:	687b      	ldr	r3, [r7, #4]
 810210e:	685b      	ldr	r3, [r3, #4]
 8102110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102112:	2201      	movs	r2, #1
 8102114:	69fb      	ldr	r3, [r7, #28]
 8102116:	fa02 f303 	lsl.w	r3, r2, r3
 810211a:	43db      	mvns	r3, r3
 810211c:	69ba      	ldr	r2, [r7, #24]
 810211e:	4013      	ands	r3, r2
 8102120:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102122:	683b      	ldr	r3, [r7, #0]
 8102124:	685b      	ldr	r3, [r3, #4]
 8102126:	091b      	lsrs	r3, r3, #4
 8102128:	f003 0201 	and.w	r2, r3, #1
 810212c:	69fb      	ldr	r3, [r7, #28]
 810212e:	fa02 f303 	lsl.w	r3, r2, r3
 8102132:	69ba      	ldr	r2, [r7, #24]
 8102134:	4313      	orrs	r3, r2
 8102136:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102138:	687b      	ldr	r3, [r7, #4]
 810213a:	69ba      	ldr	r2, [r7, #24]
 810213c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810213e:	683b      	ldr	r3, [r7, #0]
 8102140:	685b      	ldr	r3, [r3, #4]
 8102142:	f003 0303 	and.w	r3, r3, #3
 8102146:	2b03      	cmp	r3, #3
 8102148:	d017      	beq.n	810217a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810214a:	687b      	ldr	r3, [r7, #4]
 810214c:	68db      	ldr	r3, [r3, #12]
 810214e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102150:	69fb      	ldr	r3, [r7, #28]
 8102152:	005b      	lsls	r3, r3, #1
 8102154:	2203      	movs	r2, #3
 8102156:	fa02 f303 	lsl.w	r3, r2, r3
 810215a:	43db      	mvns	r3, r3
 810215c:	69ba      	ldr	r2, [r7, #24]
 810215e:	4013      	ands	r3, r2
 8102160:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102162:	683b      	ldr	r3, [r7, #0]
 8102164:	689a      	ldr	r2, [r3, #8]
 8102166:	69fb      	ldr	r3, [r7, #28]
 8102168:	005b      	lsls	r3, r3, #1
 810216a:	fa02 f303 	lsl.w	r3, r2, r3
 810216e:	69ba      	ldr	r2, [r7, #24]
 8102170:	4313      	orrs	r3, r2
 8102172:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102174:	687b      	ldr	r3, [r7, #4]
 8102176:	69ba      	ldr	r2, [r7, #24]
 8102178:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810217a:	683b      	ldr	r3, [r7, #0]
 810217c:	685b      	ldr	r3, [r3, #4]
 810217e:	f003 0303 	and.w	r3, r3, #3
 8102182:	2b02      	cmp	r3, #2
 8102184:	d123      	bne.n	81021ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102186:	69fb      	ldr	r3, [r7, #28]
 8102188:	08da      	lsrs	r2, r3, #3
 810218a:	687b      	ldr	r3, [r7, #4]
 810218c:	3208      	adds	r2, #8
 810218e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102194:	69fb      	ldr	r3, [r7, #28]
 8102196:	f003 0307 	and.w	r3, r3, #7
 810219a:	009b      	lsls	r3, r3, #2
 810219c:	220f      	movs	r2, #15
 810219e:	fa02 f303 	lsl.w	r3, r2, r3
 81021a2:	43db      	mvns	r3, r3
 81021a4:	69ba      	ldr	r2, [r7, #24]
 81021a6:	4013      	ands	r3, r2
 81021a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81021aa:	683b      	ldr	r3, [r7, #0]
 81021ac:	691a      	ldr	r2, [r3, #16]
 81021ae:	69fb      	ldr	r3, [r7, #28]
 81021b0:	f003 0307 	and.w	r3, r3, #7
 81021b4:	009b      	lsls	r3, r3, #2
 81021b6:	fa02 f303 	lsl.w	r3, r2, r3
 81021ba:	69ba      	ldr	r2, [r7, #24]
 81021bc:	4313      	orrs	r3, r2
 81021be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81021c0:	69fb      	ldr	r3, [r7, #28]
 81021c2:	08da      	lsrs	r2, r3, #3
 81021c4:	687b      	ldr	r3, [r7, #4]
 81021c6:	3208      	adds	r2, #8
 81021c8:	69b9      	ldr	r1, [r7, #24]
 81021ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81021ce:	687b      	ldr	r3, [r7, #4]
 81021d0:	681b      	ldr	r3, [r3, #0]
 81021d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81021d4:	69fb      	ldr	r3, [r7, #28]
 81021d6:	005b      	lsls	r3, r3, #1
 81021d8:	2203      	movs	r2, #3
 81021da:	fa02 f303 	lsl.w	r3, r2, r3
 81021de:	43db      	mvns	r3, r3
 81021e0:	69ba      	ldr	r2, [r7, #24]
 81021e2:	4013      	ands	r3, r2
 81021e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81021e6:	683b      	ldr	r3, [r7, #0]
 81021e8:	685b      	ldr	r3, [r3, #4]
 81021ea:	f003 0203 	and.w	r2, r3, #3
 81021ee:	69fb      	ldr	r3, [r7, #28]
 81021f0:	005b      	lsls	r3, r3, #1
 81021f2:	fa02 f303 	lsl.w	r3, r2, r3
 81021f6:	69ba      	ldr	r2, [r7, #24]
 81021f8:	4313      	orrs	r3, r2
 81021fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81021fc:	687b      	ldr	r3, [r7, #4]
 81021fe:	69ba      	ldr	r2, [r7, #24]
 8102200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8102202:	683b      	ldr	r3, [r7, #0]
 8102204:	685b      	ldr	r3, [r3, #4]
 8102206:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810220a:	2b00      	cmp	r3, #0
 810220c:	f000 80e0 	beq.w	81023d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102210:	4b2f      	ldr	r3, [pc, #188]	@ (81022d0 <HAL_GPIO_Init+0x238>)
 8102212:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102216:	4a2e      	ldr	r2, [pc, #184]	@ (81022d0 <HAL_GPIO_Init+0x238>)
 8102218:	f043 0302 	orr.w	r3, r3, #2
 810221c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102220:	4b2b      	ldr	r3, [pc, #172]	@ (81022d0 <HAL_GPIO_Init+0x238>)
 8102222:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102226:	f003 0302 	and.w	r3, r3, #2
 810222a:	60fb      	str	r3, [r7, #12]
 810222c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810222e:	4a29      	ldr	r2, [pc, #164]	@ (81022d4 <HAL_GPIO_Init+0x23c>)
 8102230:	69fb      	ldr	r3, [r7, #28]
 8102232:	089b      	lsrs	r3, r3, #2
 8102234:	3302      	adds	r3, #2
 8102236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810223a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810223c:	69fb      	ldr	r3, [r7, #28]
 810223e:	f003 0303 	and.w	r3, r3, #3
 8102242:	009b      	lsls	r3, r3, #2
 8102244:	220f      	movs	r2, #15
 8102246:	fa02 f303 	lsl.w	r3, r2, r3
 810224a:	43db      	mvns	r3, r3
 810224c:	69ba      	ldr	r2, [r7, #24]
 810224e:	4013      	ands	r3, r2
 8102250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102252:	687b      	ldr	r3, [r7, #4]
 8102254:	4a20      	ldr	r2, [pc, #128]	@ (81022d8 <HAL_GPIO_Init+0x240>)
 8102256:	4293      	cmp	r3, r2
 8102258:	d052      	beq.n	8102300 <HAL_GPIO_Init+0x268>
 810225a:	687b      	ldr	r3, [r7, #4]
 810225c:	4a1f      	ldr	r2, [pc, #124]	@ (81022dc <HAL_GPIO_Init+0x244>)
 810225e:	4293      	cmp	r3, r2
 8102260:	d031      	beq.n	81022c6 <HAL_GPIO_Init+0x22e>
 8102262:	687b      	ldr	r3, [r7, #4]
 8102264:	4a1e      	ldr	r2, [pc, #120]	@ (81022e0 <HAL_GPIO_Init+0x248>)
 8102266:	4293      	cmp	r3, r2
 8102268:	d02b      	beq.n	81022c2 <HAL_GPIO_Init+0x22a>
 810226a:	687b      	ldr	r3, [r7, #4]
 810226c:	4a1d      	ldr	r2, [pc, #116]	@ (81022e4 <HAL_GPIO_Init+0x24c>)
 810226e:	4293      	cmp	r3, r2
 8102270:	d025      	beq.n	81022be <HAL_GPIO_Init+0x226>
 8102272:	687b      	ldr	r3, [r7, #4]
 8102274:	4a1c      	ldr	r2, [pc, #112]	@ (81022e8 <HAL_GPIO_Init+0x250>)
 8102276:	4293      	cmp	r3, r2
 8102278:	d01f      	beq.n	81022ba <HAL_GPIO_Init+0x222>
 810227a:	687b      	ldr	r3, [r7, #4]
 810227c:	4a1b      	ldr	r2, [pc, #108]	@ (81022ec <HAL_GPIO_Init+0x254>)
 810227e:	4293      	cmp	r3, r2
 8102280:	d019      	beq.n	81022b6 <HAL_GPIO_Init+0x21e>
 8102282:	687b      	ldr	r3, [r7, #4]
 8102284:	4a1a      	ldr	r2, [pc, #104]	@ (81022f0 <HAL_GPIO_Init+0x258>)
 8102286:	4293      	cmp	r3, r2
 8102288:	d013      	beq.n	81022b2 <HAL_GPIO_Init+0x21a>
 810228a:	687b      	ldr	r3, [r7, #4]
 810228c:	4a19      	ldr	r2, [pc, #100]	@ (81022f4 <HAL_GPIO_Init+0x25c>)
 810228e:	4293      	cmp	r3, r2
 8102290:	d00d      	beq.n	81022ae <HAL_GPIO_Init+0x216>
 8102292:	687b      	ldr	r3, [r7, #4]
 8102294:	4a18      	ldr	r2, [pc, #96]	@ (81022f8 <HAL_GPIO_Init+0x260>)
 8102296:	4293      	cmp	r3, r2
 8102298:	d007      	beq.n	81022aa <HAL_GPIO_Init+0x212>
 810229a:	687b      	ldr	r3, [r7, #4]
 810229c:	4a17      	ldr	r2, [pc, #92]	@ (81022fc <HAL_GPIO_Init+0x264>)
 810229e:	4293      	cmp	r3, r2
 81022a0:	d101      	bne.n	81022a6 <HAL_GPIO_Init+0x20e>
 81022a2:	2309      	movs	r3, #9
 81022a4:	e02d      	b.n	8102302 <HAL_GPIO_Init+0x26a>
 81022a6:	230a      	movs	r3, #10
 81022a8:	e02b      	b.n	8102302 <HAL_GPIO_Init+0x26a>
 81022aa:	2308      	movs	r3, #8
 81022ac:	e029      	b.n	8102302 <HAL_GPIO_Init+0x26a>
 81022ae:	2307      	movs	r3, #7
 81022b0:	e027      	b.n	8102302 <HAL_GPIO_Init+0x26a>
 81022b2:	2306      	movs	r3, #6
 81022b4:	e025      	b.n	8102302 <HAL_GPIO_Init+0x26a>
 81022b6:	2305      	movs	r3, #5
 81022b8:	e023      	b.n	8102302 <HAL_GPIO_Init+0x26a>
 81022ba:	2304      	movs	r3, #4
 81022bc:	e021      	b.n	8102302 <HAL_GPIO_Init+0x26a>
 81022be:	2303      	movs	r3, #3
 81022c0:	e01f      	b.n	8102302 <HAL_GPIO_Init+0x26a>
 81022c2:	2302      	movs	r3, #2
 81022c4:	e01d      	b.n	8102302 <HAL_GPIO_Init+0x26a>
 81022c6:	2301      	movs	r3, #1
 81022c8:	e01b      	b.n	8102302 <HAL_GPIO_Init+0x26a>
 81022ca:	bf00      	nop
 81022cc:	580000c0 	.word	0x580000c0
 81022d0:	58024400 	.word	0x58024400
 81022d4:	58000400 	.word	0x58000400
 81022d8:	58020000 	.word	0x58020000
 81022dc:	58020400 	.word	0x58020400
 81022e0:	58020800 	.word	0x58020800
 81022e4:	58020c00 	.word	0x58020c00
 81022e8:	58021000 	.word	0x58021000
 81022ec:	58021400 	.word	0x58021400
 81022f0:	58021800 	.word	0x58021800
 81022f4:	58021c00 	.word	0x58021c00
 81022f8:	58022000 	.word	0x58022000
 81022fc:	58022400 	.word	0x58022400
 8102300:	2300      	movs	r3, #0
 8102302:	69fa      	ldr	r2, [r7, #28]
 8102304:	f002 0203 	and.w	r2, r2, #3
 8102308:	0092      	lsls	r2, r2, #2
 810230a:	4093      	lsls	r3, r2
 810230c:	69ba      	ldr	r2, [r7, #24]
 810230e:	4313      	orrs	r3, r2
 8102310:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102312:	4938      	ldr	r1, [pc, #224]	@ (81023f4 <HAL_GPIO_Init+0x35c>)
 8102314:	69fb      	ldr	r3, [r7, #28]
 8102316:	089b      	lsrs	r3, r3, #2
 8102318:	3302      	adds	r3, #2
 810231a:	69ba      	ldr	r2, [r7, #24]
 810231c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102320:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102324:	681b      	ldr	r3, [r3, #0]
 8102326:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102328:	693b      	ldr	r3, [r7, #16]
 810232a:	43db      	mvns	r3, r3
 810232c:	69ba      	ldr	r2, [r7, #24]
 810232e:	4013      	ands	r3, r2
 8102330:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102332:	683b      	ldr	r3, [r7, #0]
 8102334:	685b      	ldr	r3, [r3, #4]
 8102336:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810233a:	2b00      	cmp	r3, #0
 810233c:	d003      	beq.n	8102346 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810233e:	69ba      	ldr	r2, [r7, #24]
 8102340:	693b      	ldr	r3, [r7, #16]
 8102342:	4313      	orrs	r3, r2
 8102344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102346:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810234a:	69bb      	ldr	r3, [r7, #24]
 810234c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810234e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102352:	685b      	ldr	r3, [r3, #4]
 8102354:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102356:	693b      	ldr	r3, [r7, #16]
 8102358:	43db      	mvns	r3, r3
 810235a:	69ba      	ldr	r2, [r7, #24]
 810235c:	4013      	ands	r3, r2
 810235e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102360:	683b      	ldr	r3, [r7, #0]
 8102362:	685b      	ldr	r3, [r3, #4]
 8102364:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8102368:	2b00      	cmp	r3, #0
 810236a:	d003      	beq.n	8102374 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810236c:	69ba      	ldr	r2, [r7, #24]
 810236e:	693b      	ldr	r3, [r7, #16]
 8102370:	4313      	orrs	r3, r2
 8102372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102374:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8102378:	69bb      	ldr	r3, [r7, #24]
 810237a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810237c:	697b      	ldr	r3, [r7, #20]
 810237e:	685b      	ldr	r3, [r3, #4]
 8102380:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102382:	693b      	ldr	r3, [r7, #16]
 8102384:	43db      	mvns	r3, r3
 8102386:	69ba      	ldr	r2, [r7, #24]
 8102388:	4013      	ands	r3, r2
 810238a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810238c:	683b      	ldr	r3, [r7, #0]
 810238e:	685b      	ldr	r3, [r3, #4]
 8102390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8102394:	2b00      	cmp	r3, #0
 8102396:	d003      	beq.n	81023a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102398:	69ba      	ldr	r2, [r7, #24]
 810239a:	693b      	ldr	r3, [r7, #16]
 810239c:	4313      	orrs	r3, r2
 810239e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81023a0:	697b      	ldr	r3, [r7, #20]
 81023a2:	69ba      	ldr	r2, [r7, #24]
 81023a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81023a6:	697b      	ldr	r3, [r7, #20]
 81023a8:	681b      	ldr	r3, [r3, #0]
 81023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81023ac:	693b      	ldr	r3, [r7, #16]
 81023ae:	43db      	mvns	r3, r3
 81023b0:	69ba      	ldr	r2, [r7, #24]
 81023b2:	4013      	ands	r3, r2
 81023b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81023b6:	683b      	ldr	r3, [r7, #0]
 81023b8:	685b      	ldr	r3, [r3, #4]
 81023ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81023be:	2b00      	cmp	r3, #0
 81023c0:	d003      	beq.n	81023ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81023c2:	69ba      	ldr	r2, [r7, #24]
 81023c4:	693b      	ldr	r3, [r7, #16]
 81023c6:	4313      	orrs	r3, r2
 81023c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81023ca:	697b      	ldr	r3, [r7, #20]
 81023cc:	69ba      	ldr	r2, [r7, #24]
 81023ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81023d0:	69fb      	ldr	r3, [r7, #28]
 81023d2:	3301      	adds	r3, #1
 81023d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81023d6:	683b      	ldr	r3, [r7, #0]
 81023d8:	681a      	ldr	r2, [r3, #0]
 81023da:	69fb      	ldr	r3, [r7, #28]
 81023dc:	fa22 f303 	lsr.w	r3, r2, r3
 81023e0:	2b00      	cmp	r3, #0
 81023e2:	f47f ae63 	bne.w	81020ac <HAL_GPIO_Init+0x14>
  }
}
 81023e6:	bf00      	nop
 81023e8:	bf00      	nop
 81023ea:	3724      	adds	r7, #36	@ 0x24
 81023ec:	46bd      	mov	sp, r7
 81023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023f2:	4770      	bx	lr
 81023f4:	58000400 	.word	0x58000400

081023f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 81023f8:	b480      	push	{r7}
 81023fa:	b083      	sub	sp, #12
 81023fc:	af00      	add	r7, sp, #0
 81023fe:	6078      	str	r0, [r7, #4]
 8102400:	460b      	mov	r3, r1
 8102402:	807b      	strh	r3, [r7, #2]
 8102404:	4613      	mov	r3, r2
 8102406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8102408:	787b      	ldrb	r3, [r7, #1]
 810240a:	2b00      	cmp	r3, #0
 810240c:	d003      	beq.n	8102416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810240e:	887a      	ldrh	r2, [r7, #2]
 8102410:	687b      	ldr	r3, [r7, #4]
 8102412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8102414:	e003      	b.n	810241e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8102416:	887b      	ldrh	r3, [r7, #2]
 8102418:	041a      	lsls	r2, r3, #16
 810241a:	687b      	ldr	r3, [r7, #4]
 810241c:	619a      	str	r2, [r3, #24]
}
 810241e:	bf00      	nop
 8102420:	370c      	adds	r7, #12
 8102422:	46bd      	mov	sp, r7
 8102424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102428:	4770      	bx	lr
	...

0810242c <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 810242c:	b480      	push	{r7}
 810242e:	b083      	sub	sp, #12
 8102430:	af00      	add	r7, sp, #0
 8102432:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102434:	4b05      	ldr	r3, [pc, #20]	@ (810244c <HAL_HSEM_ActivateNotification+0x20>)
 8102436:	681a      	ldr	r2, [r3, #0]
 8102438:	4904      	ldr	r1, [pc, #16]	@ (810244c <HAL_HSEM_ActivateNotification+0x20>)
 810243a:	687b      	ldr	r3, [r7, #4]
 810243c:	4313      	orrs	r3, r2
 810243e:	600b      	str	r3, [r1, #0]
#endif
}
 8102440:	bf00      	nop
 8102442:	370c      	adds	r7, #12
 8102444:	46bd      	mov	sp, r7
 8102446:	f85d 7b04 	ldr.w	r7, [sp], #4
 810244a:	4770      	bx	lr
 810244c:	58026510 	.word	0x58026510

08102450 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8102450:	b580      	push	{r7, lr}
 8102452:	b084      	sub	sp, #16
 8102454:	af00      	add	r7, sp, #0
 8102456:	60f8      	str	r0, [r7, #12]
 8102458:	460b      	mov	r3, r1
 810245a:	607a      	str	r2, [r7, #4]
 810245c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810245e:	4b37      	ldr	r3, [pc, #220]	@ (810253c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102460:	681b      	ldr	r3, [r3, #0]
 8102462:	f023 0201 	bic.w	r2, r3, #1
 8102466:	4935      	ldr	r1, [pc, #212]	@ (810253c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102468:	68fb      	ldr	r3, [r7, #12]
 810246a:	4313      	orrs	r3, r2
 810246c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810246e:	687b      	ldr	r3, [r7, #4]
 8102470:	2b00      	cmp	r3, #0
 8102472:	d123      	bne.n	81024bc <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8102474:	f7ff fdfc 	bl	8102070 <HAL_GetCurrentCPUID>
 8102478:	4603      	mov	r3, r0
 810247a:	2b03      	cmp	r3, #3
 810247c:	d158      	bne.n	8102530 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810247e:	4b2f      	ldr	r3, [pc, #188]	@ (810253c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102480:	691b      	ldr	r3, [r3, #16]
 8102482:	4a2e      	ldr	r2, [pc, #184]	@ (810253c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102484:	f023 0301 	bic.w	r3, r3, #1
 8102488:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810248a:	4b2d      	ldr	r3, [pc, #180]	@ (8102540 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810248c:	691b      	ldr	r3, [r3, #16]
 810248e:	4a2c      	ldr	r2, [pc, #176]	@ (8102540 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102490:	f043 0304 	orr.w	r3, r3, #4
 8102494:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8102496:	f3bf 8f4f 	dsb	sy
}
 810249a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810249c:	f3bf 8f6f 	isb	sy
}
 81024a0:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81024a2:	7afb      	ldrb	r3, [r7, #11]
 81024a4:	2b01      	cmp	r3, #1
 81024a6:	d101      	bne.n	81024ac <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81024a8:	bf30      	wfi
 81024aa:	e000      	b.n	81024ae <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81024ac:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81024ae:	4b24      	ldr	r3, [pc, #144]	@ (8102540 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81024b0:	691b      	ldr	r3, [r3, #16]
 81024b2:	4a23      	ldr	r2, [pc, #140]	@ (8102540 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81024b4:	f023 0304 	bic.w	r3, r3, #4
 81024b8:	6113      	str	r3, [r2, #16]
 81024ba:	e03c      	b.n	8102536 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81024bc:	687b      	ldr	r3, [r7, #4]
 81024be:	2b01      	cmp	r3, #1
 81024c0:	d123      	bne.n	810250a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81024c2:	f7ff fdd5 	bl	8102070 <HAL_GetCurrentCPUID>
 81024c6:	4603      	mov	r3, r0
 81024c8:	2b01      	cmp	r3, #1
 81024ca:	d133      	bne.n	8102534 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81024cc:	4b1b      	ldr	r3, [pc, #108]	@ (810253c <HAL_PWREx_EnterSTOPMode+0xec>)
 81024ce:	695b      	ldr	r3, [r3, #20]
 81024d0:	4a1a      	ldr	r2, [pc, #104]	@ (810253c <HAL_PWREx_EnterSTOPMode+0xec>)
 81024d2:	f023 0302 	bic.w	r3, r3, #2
 81024d6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81024d8:	4b19      	ldr	r3, [pc, #100]	@ (8102540 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81024da:	691b      	ldr	r3, [r3, #16]
 81024dc:	4a18      	ldr	r2, [pc, #96]	@ (8102540 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81024de:	f043 0304 	orr.w	r3, r3, #4
 81024e2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81024e4:	f3bf 8f4f 	dsb	sy
}
 81024e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81024ea:	f3bf 8f6f 	isb	sy
}
 81024ee:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81024f0:	7afb      	ldrb	r3, [r7, #11]
 81024f2:	2b01      	cmp	r3, #1
 81024f4:	d101      	bne.n	81024fa <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81024f6:	bf30      	wfi
 81024f8:	e000      	b.n	81024fc <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81024fa:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81024fc:	4b10      	ldr	r3, [pc, #64]	@ (8102540 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81024fe:	691b      	ldr	r3, [r3, #16]
 8102500:	4a0f      	ldr	r2, [pc, #60]	@ (8102540 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8102502:	f023 0304 	bic.w	r3, r3, #4
 8102506:	6113      	str	r3, [r2, #16]
 8102508:	e015      	b.n	8102536 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810250a:	f7ff fdb1 	bl	8102070 <HAL_GetCurrentCPUID>
 810250e:	4603      	mov	r3, r0
 8102510:	2b03      	cmp	r3, #3
 8102512:	d106      	bne.n	8102522 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8102514:	4b09      	ldr	r3, [pc, #36]	@ (810253c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102516:	691b      	ldr	r3, [r3, #16]
 8102518:	4a08      	ldr	r2, [pc, #32]	@ (810253c <HAL_PWREx_EnterSTOPMode+0xec>)
 810251a:	f023 0304 	bic.w	r3, r3, #4
 810251e:	6113      	str	r3, [r2, #16]
 8102520:	e009      	b.n	8102536 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8102522:	4b06      	ldr	r3, [pc, #24]	@ (810253c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102524:	695b      	ldr	r3, [r3, #20]
 8102526:	4a05      	ldr	r2, [pc, #20]	@ (810253c <HAL_PWREx_EnterSTOPMode+0xec>)
 8102528:	f023 0304 	bic.w	r3, r3, #4
 810252c:	6153      	str	r3, [r2, #20]
 810252e:	e002      	b.n	8102536 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102530:	bf00      	nop
 8102532:	e000      	b.n	8102536 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8102534:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8102536:	3710      	adds	r7, #16
 8102538:	46bd      	mov	sp, r7
 810253a:	bd80      	pop	{r7, pc}
 810253c:	58024800 	.word	0x58024800
 8102540:	e000ed00 	.word	0xe000ed00

08102544 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8102544:	b580      	push	{r7, lr}
 8102546:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8102548:	f7ff fd92 	bl	8102070 <HAL_GetCurrentCPUID>
 810254c:	4603      	mov	r3, r0
 810254e:	2b03      	cmp	r3, #3
 8102550:	d101      	bne.n	8102556 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8102552:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8102554:	e001      	b.n	810255a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8102556:	bf40      	sev
    __WFE ();
 8102558:	bf20      	wfe
}
 810255a:	bf00      	nop
 810255c:	bd80      	pop	{r7, pc}
	...

08102560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8102560:	b480      	push	{r7}
 8102562:	b089      	sub	sp, #36	@ 0x24
 8102564:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8102566:	4bb3      	ldr	r3, [pc, #716]	@ (8102834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102568:	691b      	ldr	r3, [r3, #16]
 810256a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810256e:	2b18      	cmp	r3, #24
 8102570:	f200 8155 	bhi.w	810281e <HAL_RCC_GetSysClockFreq+0x2be>
 8102574:	a201      	add	r2, pc, #4	@ (adr r2, 810257c <HAL_RCC_GetSysClockFreq+0x1c>)
 8102576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810257a:	bf00      	nop
 810257c:	081025e1 	.word	0x081025e1
 8102580:	0810281f 	.word	0x0810281f
 8102584:	0810281f 	.word	0x0810281f
 8102588:	0810281f 	.word	0x0810281f
 810258c:	0810281f 	.word	0x0810281f
 8102590:	0810281f 	.word	0x0810281f
 8102594:	0810281f 	.word	0x0810281f
 8102598:	0810281f 	.word	0x0810281f
 810259c:	08102607 	.word	0x08102607
 81025a0:	0810281f 	.word	0x0810281f
 81025a4:	0810281f 	.word	0x0810281f
 81025a8:	0810281f 	.word	0x0810281f
 81025ac:	0810281f 	.word	0x0810281f
 81025b0:	0810281f 	.word	0x0810281f
 81025b4:	0810281f 	.word	0x0810281f
 81025b8:	0810281f 	.word	0x0810281f
 81025bc:	0810260d 	.word	0x0810260d
 81025c0:	0810281f 	.word	0x0810281f
 81025c4:	0810281f 	.word	0x0810281f
 81025c8:	0810281f 	.word	0x0810281f
 81025cc:	0810281f 	.word	0x0810281f
 81025d0:	0810281f 	.word	0x0810281f
 81025d4:	0810281f 	.word	0x0810281f
 81025d8:	0810281f 	.word	0x0810281f
 81025dc:	08102613 	.word	0x08102613
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81025e0:	4b94      	ldr	r3, [pc, #592]	@ (8102834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81025e2:	681b      	ldr	r3, [r3, #0]
 81025e4:	f003 0320 	and.w	r3, r3, #32
 81025e8:	2b00      	cmp	r3, #0
 81025ea:	d009      	beq.n	8102600 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81025ec:	4b91      	ldr	r3, [pc, #580]	@ (8102834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81025ee:	681b      	ldr	r3, [r3, #0]
 81025f0:	08db      	lsrs	r3, r3, #3
 81025f2:	f003 0303 	and.w	r3, r3, #3
 81025f6:	4a90      	ldr	r2, [pc, #576]	@ (8102838 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81025f8:	fa22 f303 	lsr.w	r3, r2, r3
 81025fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81025fe:	e111      	b.n	8102824 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102600:	4b8d      	ldr	r3, [pc, #564]	@ (8102838 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102602:	61bb      	str	r3, [r7, #24]
      break;
 8102604:	e10e      	b.n	8102824 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8102606:	4b8d      	ldr	r3, [pc, #564]	@ (810283c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102608:	61bb      	str	r3, [r7, #24]
      break;
 810260a:	e10b      	b.n	8102824 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 810260c:	4b8c      	ldr	r3, [pc, #560]	@ (8102840 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810260e:	61bb      	str	r3, [r7, #24]
      break;
 8102610:	e108      	b.n	8102824 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102612:	4b88      	ldr	r3, [pc, #544]	@ (8102834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102616:	f003 0303 	and.w	r3, r3, #3
 810261a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 810261c:	4b85      	ldr	r3, [pc, #532]	@ (8102834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810261e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102620:	091b      	lsrs	r3, r3, #4
 8102622:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8102626:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102628:	4b82      	ldr	r3, [pc, #520]	@ (8102834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810262a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810262c:	f003 0301 	and.w	r3, r3, #1
 8102630:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8102632:	4b80      	ldr	r3, [pc, #512]	@ (8102834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8102636:	08db      	lsrs	r3, r3, #3
 8102638:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810263c:	68fa      	ldr	r2, [r7, #12]
 810263e:	fb02 f303 	mul.w	r3, r2, r3
 8102642:	ee07 3a90 	vmov	s15, r3
 8102646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810264a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810264e:	693b      	ldr	r3, [r7, #16]
 8102650:	2b00      	cmp	r3, #0
 8102652:	f000 80e1 	beq.w	8102818 <HAL_RCC_GetSysClockFreq+0x2b8>
 8102656:	697b      	ldr	r3, [r7, #20]
 8102658:	2b02      	cmp	r3, #2
 810265a:	f000 8083 	beq.w	8102764 <HAL_RCC_GetSysClockFreq+0x204>
 810265e:	697b      	ldr	r3, [r7, #20]
 8102660:	2b02      	cmp	r3, #2
 8102662:	f200 80a1 	bhi.w	81027a8 <HAL_RCC_GetSysClockFreq+0x248>
 8102666:	697b      	ldr	r3, [r7, #20]
 8102668:	2b00      	cmp	r3, #0
 810266a:	d003      	beq.n	8102674 <HAL_RCC_GetSysClockFreq+0x114>
 810266c:	697b      	ldr	r3, [r7, #20]
 810266e:	2b01      	cmp	r3, #1
 8102670:	d056      	beq.n	8102720 <HAL_RCC_GetSysClockFreq+0x1c0>
 8102672:	e099      	b.n	81027a8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102674:	4b6f      	ldr	r3, [pc, #444]	@ (8102834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102676:	681b      	ldr	r3, [r3, #0]
 8102678:	f003 0320 	and.w	r3, r3, #32
 810267c:	2b00      	cmp	r3, #0
 810267e:	d02d      	beq.n	81026dc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102680:	4b6c      	ldr	r3, [pc, #432]	@ (8102834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102682:	681b      	ldr	r3, [r3, #0]
 8102684:	08db      	lsrs	r3, r3, #3
 8102686:	f003 0303 	and.w	r3, r3, #3
 810268a:	4a6b      	ldr	r2, [pc, #428]	@ (8102838 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810268c:	fa22 f303 	lsr.w	r3, r2, r3
 8102690:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102692:	687b      	ldr	r3, [r7, #4]
 8102694:	ee07 3a90 	vmov	s15, r3
 8102698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810269c:	693b      	ldr	r3, [r7, #16]
 810269e:	ee07 3a90 	vmov	s15, r3
 81026a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81026a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81026aa:	4b62      	ldr	r3, [pc, #392]	@ (8102834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81026ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81026b2:	ee07 3a90 	vmov	s15, r3
 81026b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81026ba:	ed97 6a02 	vldr	s12, [r7, #8]
 81026be:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8102844 <HAL_RCC_GetSysClockFreq+0x2e4>
 81026c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81026c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81026ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81026ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81026d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81026d6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81026da:	e087      	b.n	81027ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81026dc:	693b      	ldr	r3, [r7, #16]
 81026de:	ee07 3a90 	vmov	s15, r3
 81026e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81026e6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8102848 <HAL_RCC_GetSysClockFreq+0x2e8>
 81026ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81026ee:	4b51      	ldr	r3, [pc, #324]	@ (8102834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81026f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81026f6:	ee07 3a90 	vmov	s15, r3
 81026fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81026fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8102702:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8102844 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810270a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810270e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102716:	ee67 7a27 	vmul.f32	s15, s14, s15
 810271a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810271e:	e065      	b.n	81027ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102720:	693b      	ldr	r3, [r7, #16]
 8102722:	ee07 3a90 	vmov	s15, r3
 8102726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810272a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 810284c <HAL_RCC_GetSysClockFreq+0x2ec>
 810272e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102732:	4b40      	ldr	r3, [pc, #256]	@ (8102834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810273a:	ee07 3a90 	vmov	s15, r3
 810273e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102742:	ed97 6a02 	vldr	s12, [r7, #8]
 8102746:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8102844 <HAL_RCC_GetSysClockFreq+0x2e4>
 810274a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810274e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810275a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810275e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102762:	e043      	b.n	81027ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102764:	693b      	ldr	r3, [r7, #16]
 8102766:	ee07 3a90 	vmov	s15, r3
 810276a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810276e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8102850 <HAL_RCC_GetSysClockFreq+0x2f0>
 8102772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102776:	4b2f      	ldr	r3, [pc, #188]	@ (8102834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810277a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810277e:	ee07 3a90 	vmov	s15, r3
 8102782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102786:	ed97 6a02 	vldr	s12, [r7, #8]
 810278a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8102844 <HAL_RCC_GetSysClockFreq+0x2e4>
 810278e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102796:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810279a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810279e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81027a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81027a6:	e021      	b.n	81027ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81027a8:	693b      	ldr	r3, [r7, #16]
 81027aa:	ee07 3a90 	vmov	s15, r3
 81027ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81027b2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 810284c <HAL_RCC_GetSysClockFreq+0x2ec>
 81027b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81027ba:	4b1e      	ldr	r3, [pc, #120]	@ (8102834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81027be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81027c2:	ee07 3a90 	vmov	s15, r3
 81027c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81027ca:	ed97 6a02 	vldr	s12, [r7, #8]
 81027ce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8102844 <HAL_RCC_GetSysClockFreq+0x2e4>
 81027d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81027d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81027da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81027de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81027e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81027e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81027ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81027ec:	4b11      	ldr	r3, [pc, #68]	@ (8102834 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81027ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81027f0:	0a5b      	lsrs	r3, r3, #9
 81027f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81027f6:	3301      	adds	r3, #1
 81027f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81027fa:	683b      	ldr	r3, [r7, #0]
 81027fc:	ee07 3a90 	vmov	s15, r3
 8102800:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102804:	edd7 6a07 	vldr	s13, [r7, #28]
 8102808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810280c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102810:	ee17 3a90 	vmov	r3, s15
 8102814:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8102816:	e005      	b.n	8102824 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8102818:	2300      	movs	r3, #0
 810281a:	61bb      	str	r3, [r7, #24]
      break;
 810281c:	e002      	b.n	8102824 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810281e:	4b07      	ldr	r3, [pc, #28]	@ (810283c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102820:	61bb      	str	r3, [r7, #24]
      break;
 8102822:	bf00      	nop
  }

  return sysclockfreq;
 8102824:	69bb      	ldr	r3, [r7, #24]
}
 8102826:	4618      	mov	r0, r3
 8102828:	3724      	adds	r7, #36	@ 0x24
 810282a:	46bd      	mov	sp, r7
 810282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102830:	4770      	bx	lr
 8102832:	bf00      	nop
 8102834:	58024400 	.word	0x58024400
 8102838:	03d09000 	.word	0x03d09000
 810283c:	003d0900 	.word	0x003d0900
 8102840:	017d7840 	.word	0x017d7840
 8102844:	46000000 	.word	0x46000000
 8102848:	4c742400 	.word	0x4c742400
 810284c:	4a742400 	.word	0x4a742400
 8102850:	4bbebc20 	.word	0x4bbebc20

08102854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8102854:	b580      	push	{r7, lr}
 8102856:	b082      	sub	sp, #8
 8102858:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810285a:	f7ff fe81 	bl	8102560 <HAL_RCC_GetSysClockFreq>
 810285e:	4602      	mov	r2, r0
 8102860:	4b11      	ldr	r3, [pc, #68]	@ (81028a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8102862:	699b      	ldr	r3, [r3, #24]
 8102864:	0a1b      	lsrs	r3, r3, #8
 8102866:	f003 030f 	and.w	r3, r3, #15
 810286a:	4910      	ldr	r1, [pc, #64]	@ (81028ac <HAL_RCC_GetHCLKFreq+0x58>)
 810286c:	5ccb      	ldrb	r3, [r1, r3]
 810286e:	f003 031f 	and.w	r3, r3, #31
 8102872:	fa22 f303 	lsr.w	r3, r2, r3
 8102876:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102878:	4b0b      	ldr	r3, [pc, #44]	@ (81028a8 <HAL_RCC_GetHCLKFreq+0x54>)
 810287a:	699b      	ldr	r3, [r3, #24]
 810287c:	f003 030f 	and.w	r3, r3, #15
 8102880:	4a0a      	ldr	r2, [pc, #40]	@ (81028ac <HAL_RCC_GetHCLKFreq+0x58>)
 8102882:	5cd3      	ldrb	r3, [r2, r3]
 8102884:	f003 031f 	and.w	r3, r3, #31
 8102888:	687a      	ldr	r2, [r7, #4]
 810288a:	fa22 f303 	lsr.w	r3, r2, r3
 810288e:	4a08      	ldr	r2, [pc, #32]	@ (81028b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102890:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102892:	4b07      	ldr	r3, [pc, #28]	@ (81028b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8102894:	681b      	ldr	r3, [r3, #0]
 8102896:	4a07      	ldr	r2, [pc, #28]	@ (81028b4 <HAL_RCC_GetHCLKFreq+0x60>)
 8102898:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810289a:	4b05      	ldr	r3, [pc, #20]	@ (81028b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 810289c:	681b      	ldr	r3, [r3, #0]
}
 810289e:	4618      	mov	r0, r3
 81028a0:	3708      	adds	r7, #8
 81028a2:	46bd      	mov	sp, r7
 81028a4:	bd80      	pop	{r7, pc}
 81028a6:	bf00      	nop
 81028a8:	58024400 	.word	0x58024400
 81028ac:	081091e8 	.word	0x081091e8
 81028b0:	10000004 	.word	0x10000004
 81028b4:	10000000 	.word	0x10000000

081028b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81028b8:	b580      	push	{r7, lr}
 81028ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81028bc:	f7ff ffca 	bl	8102854 <HAL_RCC_GetHCLKFreq>
 81028c0:	4602      	mov	r2, r0
 81028c2:	4b06      	ldr	r3, [pc, #24]	@ (81028dc <HAL_RCC_GetPCLK1Freq+0x24>)
 81028c4:	69db      	ldr	r3, [r3, #28]
 81028c6:	091b      	lsrs	r3, r3, #4
 81028c8:	f003 0307 	and.w	r3, r3, #7
 81028cc:	4904      	ldr	r1, [pc, #16]	@ (81028e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 81028ce:	5ccb      	ldrb	r3, [r1, r3]
 81028d0:	f003 031f 	and.w	r3, r3, #31
 81028d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81028d8:	4618      	mov	r0, r3
 81028da:	bd80      	pop	{r7, pc}
 81028dc:	58024400 	.word	0x58024400
 81028e0:	081091e8 	.word	0x081091e8

081028e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81028e4:	b580      	push	{r7, lr}
 81028e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81028e8:	f7ff ffb4 	bl	8102854 <HAL_RCC_GetHCLKFreq>
 81028ec:	4602      	mov	r2, r0
 81028ee:	4b06      	ldr	r3, [pc, #24]	@ (8102908 <HAL_RCC_GetPCLK2Freq+0x24>)
 81028f0:	69db      	ldr	r3, [r3, #28]
 81028f2:	0a1b      	lsrs	r3, r3, #8
 81028f4:	f003 0307 	and.w	r3, r3, #7
 81028f8:	4904      	ldr	r1, [pc, #16]	@ (810290c <HAL_RCC_GetPCLK2Freq+0x28>)
 81028fa:	5ccb      	ldrb	r3, [r1, r3]
 81028fc:	f003 031f 	and.w	r3, r3, #31
 8102900:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8102904:	4618      	mov	r0, r3
 8102906:	bd80      	pop	{r7, pc}
 8102908:	58024400 	.word	0x58024400
 810290c:	081091e8 	.word	0x081091e8

08102910 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8102914:	b0ca      	sub	sp, #296	@ 0x128
 8102916:	af00      	add	r7, sp, #0
 8102918:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810291c:	2300      	movs	r3, #0
 810291e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102922:	2300      	movs	r3, #0
 8102924:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810292c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102930:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8102934:	2500      	movs	r5, #0
 8102936:	ea54 0305 	orrs.w	r3, r4, r5
 810293a:	d049      	beq.n	81029d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 810293c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102940:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8102942:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102946:	d02f      	beq.n	81029a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8102948:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810294c:	d828      	bhi.n	81029a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810294e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102952:	d01a      	beq.n	810298a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8102954:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102958:	d822      	bhi.n	81029a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810295a:	2b00      	cmp	r3, #0
 810295c:	d003      	beq.n	8102966 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810295e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8102962:	d007      	beq.n	8102974 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8102964:	e01c      	b.n	81029a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102966:	4bb8      	ldr	r3, [pc, #736]	@ (8102c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810296a:	4ab7      	ldr	r2, [pc, #732]	@ (8102c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810296c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102970:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102972:	e01a      	b.n	81029aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102978:	3308      	adds	r3, #8
 810297a:	2102      	movs	r1, #2
 810297c:	4618      	mov	r0, r3
 810297e:	f001 fc8f 	bl	81042a0 <RCCEx_PLL2_Config>
 8102982:	4603      	mov	r3, r0
 8102984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8102988:	e00f      	b.n	81029aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810298a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810298e:	3328      	adds	r3, #40	@ 0x28
 8102990:	2102      	movs	r1, #2
 8102992:	4618      	mov	r0, r3
 8102994:	f001 fd36 	bl	8104404 <RCCEx_PLL3_Config>
 8102998:	4603      	mov	r3, r0
 810299a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810299e:	e004      	b.n	81029aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81029a0:	2301      	movs	r3, #1
 81029a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81029a6:	e000      	b.n	81029aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 81029a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81029aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81029ae:	2b00      	cmp	r3, #0
 81029b0:	d10a      	bne.n	81029c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81029b2:	4ba5      	ldr	r3, [pc, #660]	@ (8102c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81029b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81029b6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81029ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81029c0:	4aa1      	ldr	r2, [pc, #644]	@ (8102c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81029c2:	430b      	orrs	r3, r1
 81029c4:	6513      	str	r3, [r2, #80]	@ 0x50
 81029c6:	e003      	b.n	81029d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81029c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81029cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81029d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81029d8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 81029dc:	f04f 0900 	mov.w	r9, #0
 81029e0:	ea58 0309 	orrs.w	r3, r8, r9
 81029e4:	d047      	beq.n	8102a76 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 81029e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81029ec:	2b04      	cmp	r3, #4
 81029ee:	d82a      	bhi.n	8102a46 <HAL_RCCEx_PeriphCLKConfig+0x136>
 81029f0:	a201      	add	r2, pc, #4	@ (adr r2, 81029f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 81029f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81029f6:	bf00      	nop
 81029f8:	08102a0d 	.word	0x08102a0d
 81029fc:	08102a1b 	.word	0x08102a1b
 8102a00:	08102a31 	.word	0x08102a31
 8102a04:	08102a4f 	.word	0x08102a4f
 8102a08:	08102a4f 	.word	0x08102a4f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102a0c:	4b8e      	ldr	r3, [pc, #568]	@ (8102c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102a10:	4a8d      	ldr	r2, [pc, #564]	@ (8102c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102a18:	e01a      	b.n	8102a50 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a1e:	3308      	adds	r3, #8
 8102a20:	2100      	movs	r1, #0
 8102a22:	4618      	mov	r0, r3
 8102a24:	f001 fc3c 	bl	81042a0 <RCCEx_PLL2_Config>
 8102a28:	4603      	mov	r3, r0
 8102a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102a2e:	e00f      	b.n	8102a50 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a34:	3328      	adds	r3, #40	@ 0x28
 8102a36:	2100      	movs	r1, #0
 8102a38:	4618      	mov	r0, r3
 8102a3a:	f001 fce3 	bl	8104404 <RCCEx_PLL3_Config>
 8102a3e:	4603      	mov	r3, r0
 8102a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102a44:	e004      	b.n	8102a50 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102a46:	2301      	movs	r3, #1
 8102a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102a4c:	e000      	b.n	8102a50 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8102a4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102a50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102a54:	2b00      	cmp	r3, #0
 8102a56:	d10a      	bne.n	8102a6e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8102a58:	4b7b      	ldr	r3, [pc, #492]	@ (8102c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102a5c:	f023 0107 	bic.w	r1, r3, #7
 8102a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102a66:	4a78      	ldr	r2, [pc, #480]	@ (8102c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102a68:	430b      	orrs	r3, r1
 8102a6a:	6513      	str	r3, [r2, #80]	@ 0x50
 8102a6c:	e003      	b.n	8102a76 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102a72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8102a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a7e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8102a82:	f04f 0b00 	mov.w	fp, #0
 8102a86:	ea5a 030b 	orrs.w	r3, sl, fp
 8102a8a:	d04c      	beq.n	8102b26 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8102a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102a92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102a96:	d030      	beq.n	8102afa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8102a98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102a9c:	d829      	bhi.n	8102af2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102a9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8102aa0:	d02d      	beq.n	8102afe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8102aa2:	2bc0      	cmp	r3, #192	@ 0xc0
 8102aa4:	d825      	bhi.n	8102af2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102aa6:	2b80      	cmp	r3, #128	@ 0x80
 8102aa8:	d018      	beq.n	8102adc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8102aaa:	2b80      	cmp	r3, #128	@ 0x80
 8102aac:	d821      	bhi.n	8102af2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8102aae:	2b00      	cmp	r3, #0
 8102ab0:	d002      	beq.n	8102ab8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8102ab2:	2b40      	cmp	r3, #64	@ 0x40
 8102ab4:	d007      	beq.n	8102ac6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8102ab6:	e01c      	b.n	8102af2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102ab8:	4b63      	ldr	r3, [pc, #396]	@ (8102c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102abc:	4a62      	ldr	r2, [pc, #392]	@ (8102c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102ac2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102ac4:	e01c      	b.n	8102b00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102aca:	3308      	adds	r3, #8
 8102acc:	2100      	movs	r1, #0
 8102ace:	4618      	mov	r0, r3
 8102ad0:	f001 fbe6 	bl	81042a0 <RCCEx_PLL2_Config>
 8102ad4:	4603      	mov	r3, r0
 8102ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102ada:	e011      	b.n	8102b00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ae0:	3328      	adds	r3, #40	@ 0x28
 8102ae2:	2100      	movs	r1, #0
 8102ae4:	4618      	mov	r0, r3
 8102ae6:	f001 fc8d 	bl	8104404 <RCCEx_PLL3_Config>
 8102aea:	4603      	mov	r3, r0
 8102aec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102af0:	e006      	b.n	8102b00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102af2:	2301      	movs	r3, #1
 8102af4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102af8:	e002      	b.n	8102b00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8102afa:	bf00      	nop
 8102afc:	e000      	b.n	8102b00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8102afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102b00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b04:	2b00      	cmp	r3, #0
 8102b06:	d10a      	bne.n	8102b1e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8102b08:	4b4f      	ldr	r3, [pc, #316]	@ (8102c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102b0c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8102b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102b16:	4a4c      	ldr	r2, [pc, #304]	@ (8102c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102b18:	430b      	orrs	r3, r1
 8102b1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8102b1c:	e003      	b.n	8102b26 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8102b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102b2e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8102b32:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8102b36:	2300      	movs	r3, #0
 8102b38:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8102b3c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8102b40:	460b      	mov	r3, r1
 8102b42:	4313      	orrs	r3, r2
 8102b44:	d053      	beq.n	8102bee <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8102b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8102b4e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8102b52:	d035      	beq.n	8102bc0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8102b54:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8102b58:	d82e      	bhi.n	8102bb8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102b5a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8102b5e:	d031      	beq.n	8102bc4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8102b60:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8102b64:	d828      	bhi.n	8102bb8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102b66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8102b6a:	d01a      	beq.n	8102ba2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8102b6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8102b70:	d822      	bhi.n	8102bb8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8102b72:	2b00      	cmp	r3, #0
 8102b74:	d003      	beq.n	8102b7e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8102b76:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8102b7a:	d007      	beq.n	8102b8c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8102b7c:	e01c      	b.n	8102bb8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102b7e:	4b32      	ldr	r3, [pc, #200]	@ (8102c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102b82:	4a31      	ldr	r2, [pc, #196]	@ (8102c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102b88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102b8a:	e01c      	b.n	8102bc6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b90:	3308      	adds	r3, #8
 8102b92:	2100      	movs	r1, #0
 8102b94:	4618      	mov	r0, r3
 8102b96:	f001 fb83 	bl	81042a0 <RCCEx_PLL2_Config>
 8102b9a:	4603      	mov	r3, r0
 8102b9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8102ba0:	e011      	b.n	8102bc6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ba6:	3328      	adds	r3, #40	@ 0x28
 8102ba8:	2100      	movs	r1, #0
 8102baa:	4618      	mov	r0, r3
 8102bac:	f001 fc2a 	bl	8104404 <RCCEx_PLL3_Config>
 8102bb0:	4603      	mov	r3, r0
 8102bb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102bb6:	e006      	b.n	8102bc6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8102bb8:	2301      	movs	r3, #1
 8102bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102bbe:	e002      	b.n	8102bc6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8102bc0:	bf00      	nop
 8102bc2:	e000      	b.n	8102bc6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8102bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102bca:	2b00      	cmp	r3, #0
 8102bcc:	d10b      	bne.n	8102be6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102bce:	4b1e      	ldr	r3, [pc, #120]	@ (8102c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102bd2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8102bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8102bde:	4a1a      	ldr	r2, [pc, #104]	@ (8102c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102be0:	430b      	orrs	r3, r1
 8102be2:	6593      	str	r3, [r2, #88]	@ 0x58
 8102be4:	e003      	b.n	8102bee <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102bea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8102bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102bf6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8102bfa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8102bfe:	2300      	movs	r3, #0
 8102c00:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8102c04:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8102c08:	460b      	mov	r3, r1
 8102c0a:	4313      	orrs	r3, r2
 8102c0c:	d056      	beq.n	8102cbc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8102c0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8102c16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8102c1a:	d038      	beq.n	8102c8e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8102c1c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8102c20:	d831      	bhi.n	8102c86 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102c22:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8102c26:	d034      	beq.n	8102c92 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8102c28:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8102c2c:	d82b      	bhi.n	8102c86 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102c2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8102c32:	d01d      	beq.n	8102c70 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8102c34:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8102c38:	d825      	bhi.n	8102c86 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102c3a:	2b00      	cmp	r3, #0
 8102c3c:	d006      	beq.n	8102c4c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8102c3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8102c42:	d00a      	beq.n	8102c5a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8102c44:	e01f      	b.n	8102c86 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102c46:	bf00      	nop
 8102c48:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102c4c:	4ba2      	ldr	r3, [pc, #648]	@ (8102ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102c50:	4aa1      	ldr	r2, [pc, #644]	@ (8102ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102c56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102c58:	e01c      	b.n	8102c94 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c5e:	3308      	adds	r3, #8
 8102c60:	2100      	movs	r1, #0
 8102c62:	4618      	mov	r0, r3
 8102c64:	f001 fb1c 	bl	81042a0 <RCCEx_PLL2_Config>
 8102c68:	4603      	mov	r3, r0
 8102c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8102c6e:	e011      	b.n	8102c94 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c74:	3328      	adds	r3, #40	@ 0x28
 8102c76:	2100      	movs	r1, #0
 8102c78:	4618      	mov	r0, r3
 8102c7a:	f001 fbc3 	bl	8104404 <RCCEx_PLL3_Config>
 8102c7e:	4603      	mov	r3, r0
 8102c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102c84:	e006      	b.n	8102c94 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8102c86:	2301      	movs	r3, #1
 8102c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102c8c:	e002      	b.n	8102c94 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8102c8e:	bf00      	nop
 8102c90:	e000      	b.n	8102c94 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8102c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102c94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c98:	2b00      	cmp	r3, #0
 8102c9a:	d10b      	bne.n	8102cb4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8102c9c:	4b8e      	ldr	r3, [pc, #568]	@ (8102ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102ca0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8102ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ca8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8102cac:	4a8a      	ldr	r2, [pc, #552]	@ (8102ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102cae:	430b      	orrs	r3, r1
 8102cb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8102cb2:	e003      	b.n	8102cbc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102cb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102cc4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8102cc8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8102ccc:	2300      	movs	r3, #0
 8102cce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8102cd2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8102cd6:	460b      	mov	r3, r1
 8102cd8:	4313      	orrs	r3, r2
 8102cda:	d03a      	beq.n	8102d52 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8102cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102ce2:	2b30      	cmp	r3, #48	@ 0x30
 8102ce4:	d01f      	beq.n	8102d26 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8102ce6:	2b30      	cmp	r3, #48	@ 0x30
 8102ce8:	d819      	bhi.n	8102d1e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8102cea:	2b20      	cmp	r3, #32
 8102cec:	d00c      	beq.n	8102d08 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8102cee:	2b20      	cmp	r3, #32
 8102cf0:	d815      	bhi.n	8102d1e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8102cf2:	2b00      	cmp	r3, #0
 8102cf4:	d019      	beq.n	8102d2a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8102cf6:	2b10      	cmp	r3, #16
 8102cf8:	d111      	bne.n	8102d1e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102cfa:	4b77      	ldr	r3, [pc, #476]	@ (8102ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102cfe:	4a76      	ldr	r2, [pc, #472]	@ (8102ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102d04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8102d06:	e011      	b.n	8102d2c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d0c:	3308      	adds	r3, #8
 8102d0e:	2102      	movs	r1, #2
 8102d10:	4618      	mov	r0, r3
 8102d12:	f001 fac5 	bl	81042a0 <RCCEx_PLL2_Config>
 8102d16:	4603      	mov	r3, r0
 8102d18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8102d1c:	e006      	b.n	8102d2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8102d1e:	2301      	movs	r3, #1
 8102d20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102d24:	e002      	b.n	8102d2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8102d26:	bf00      	nop
 8102d28:	e000      	b.n	8102d2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8102d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102d30:	2b00      	cmp	r3, #0
 8102d32:	d10a      	bne.n	8102d4a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8102d34:	4b68      	ldr	r3, [pc, #416]	@ (8102ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102d36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102d38:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8102d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102d42:	4a65      	ldr	r2, [pc, #404]	@ (8102ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102d44:	430b      	orrs	r3, r1
 8102d46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102d48:	e003      	b.n	8102d52 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102d4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8102d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d5a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8102d5e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8102d62:	2300      	movs	r3, #0
 8102d64:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8102d68:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8102d6c:	460b      	mov	r3, r1
 8102d6e:	4313      	orrs	r3, r2
 8102d70:	d051      	beq.n	8102e16 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8102d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102d78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102d7c:	d035      	beq.n	8102dea <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8102d7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102d82:	d82e      	bhi.n	8102de2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102d84:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8102d88:	d031      	beq.n	8102dee <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8102d8a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8102d8e:	d828      	bhi.n	8102de2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102d90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102d94:	d01a      	beq.n	8102dcc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8102d96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8102d9a:	d822      	bhi.n	8102de2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8102d9c:	2b00      	cmp	r3, #0
 8102d9e:	d003      	beq.n	8102da8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8102da0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102da4:	d007      	beq.n	8102db6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8102da6:	e01c      	b.n	8102de2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102da8:	4b4b      	ldr	r3, [pc, #300]	@ (8102ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102dac:	4a4a      	ldr	r2, [pc, #296]	@ (8102ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102dae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102db2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102db4:	e01c      	b.n	8102df0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102dba:	3308      	adds	r3, #8
 8102dbc:	2100      	movs	r1, #0
 8102dbe:	4618      	mov	r0, r3
 8102dc0:	f001 fa6e 	bl	81042a0 <RCCEx_PLL2_Config>
 8102dc4:	4603      	mov	r3, r0
 8102dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102dca:	e011      	b.n	8102df0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102dd0:	3328      	adds	r3, #40	@ 0x28
 8102dd2:	2100      	movs	r1, #0
 8102dd4:	4618      	mov	r0, r3
 8102dd6:	f001 fb15 	bl	8104404 <RCCEx_PLL3_Config>
 8102dda:	4603      	mov	r3, r0
 8102ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102de0:	e006      	b.n	8102df0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102de2:	2301      	movs	r3, #1
 8102de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102de8:	e002      	b.n	8102df0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8102dea:	bf00      	nop
 8102dec:	e000      	b.n	8102df0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8102dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102df0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102df4:	2b00      	cmp	r3, #0
 8102df6:	d10a      	bne.n	8102e0e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8102df8:	4b37      	ldr	r3, [pc, #220]	@ (8102ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102dfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102dfc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8102e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102e06:	4a34      	ldr	r2, [pc, #208]	@ (8102ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102e08:	430b      	orrs	r3, r1
 8102e0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8102e0c:	e003      	b.n	8102e16 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102e12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8102e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e1e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8102e22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8102e26:	2300      	movs	r3, #0
 8102e28:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8102e2c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8102e30:	460b      	mov	r3, r1
 8102e32:	4313      	orrs	r3, r2
 8102e34:	d056      	beq.n	8102ee4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8102e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102e3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8102e40:	d033      	beq.n	8102eaa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8102e42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8102e46:	d82c      	bhi.n	8102ea2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102e48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8102e4c:	d02f      	beq.n	8102eae <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8102e4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8102e52:	d826      	bhi.n	8102ea2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102e54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8102e58:	d02b      	beq.n	8102eb2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8102e5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8102e5e:	d820      	bhi.n	8102ea2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102e60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102e64:	d012      	beq.n	8102e8c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8102e66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102e6a:	d81a      	bhi.n	8102ea2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102e6c:	2b00      	cmp	r3, #0
 8102e6e:	d022      	beq.n	8102eb6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8102e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102e74:	d115      	bne.n	8102ea2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e7a:	3308      	adds	r3, #8
 8102e7c:	2101      	movs	r1, #1
 8102e7e:	4618      	mov	r0, r3
 8102e80:	f001 fa0e 	bl	81042a0 <RCCEx_PLL2_Config>
 8102e84:	4603      	mov	r3, r0
 8102e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8102e8a:	e015      	b.n	8102eb8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e90:	3328      	adds	r3, #40	@ 0x28
 8102e92:	2101      	movs	r1, #1
 8102e94:	4618      	mov	r0, r3
 8102e96:	f001 fab5 	bl	8104404 <RCCEx_PLL3_Config>
 8102e9a:	4603      	mov	r3, r0
 8102e9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8102ea0:	e00a      	b.n	8102eb8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102ea2:	2301      	movs	r3, #1
 8102ea4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102ea8:	e006      	b.n	8102eb8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8102eaa:	bf00      	nop
 8102eac:	e004      	b.n	8102eb8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8102eae:	bf00      	nop
 8102eb0:	e002      	b.n	8102eb8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8102eb2:	bf00      	nop
 8102eb4:	e000      	b.n	8102eb8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8102eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102eb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102ebc:	2b00      	cmp	r3, #0
 8102ebe:	d10d      	bne.n	8102edc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8102ec0:	4b05      	ldr	r3, [pc, #20]	@ (8102ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102ec4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8102ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ecc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102ece:	4a02      	ldr	r2, [pc, #8]	@ (8102ed8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102ed0:	430b      	orrs	r3, r1
 8102ed2:	6513      	str	r3, [r2, #80]	@ 0x50
 8102ed4:	e006      	b.n	8102ee4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8102ed6:	bf00      	nop
 8102ed8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102edc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102ee0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8102ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102eec:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8102ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8102ef4:	2300      	movs	r3, #0
 8102ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8102efa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8102efe:	460b      	mov	r3, r1
 8102f00:	4313      	orrs	r3, r2
 8102f02:	d055      	beq.n	8102fb0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8102f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8102f0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102f10:	d033      	beq.n	8102f7a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8102f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102f16:	d82c      	bhi.n	8102f72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102f1c:	d02f      	beq.n	8102f7e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8102f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102f22:	d826      	bhi.n	8102f72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102f24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102f28:	d02b      	beq.n	8102f82 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8102f2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102f2e:	d820      	bhi.n	8102f72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102f30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102f34:	d012      	beq.n	8102f5c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8102f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102f3a:	d81a      	bhi.n	8102f72 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102f3c:	2b00      	cmp	r3, #0
 8102f3e:	d022      	beq.n	8102f86 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8102f40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102f44:	d115      	bne.n	8102f72 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f4a:	3308      	adds	r3, #8
 8102f4c:	2101      	movs	r1, #1
 8102f4e:	4618      	mov	r0, r3
 8102f50:	f001 f9a6 	bl	81042a0 <RCCEx_PLL2_Config>
 8102f54:	4603      	mov	r3, r0
 8102f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8102f5a:	e015      	b.n	8102f88 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f60:	3328      	adds	r3, #40	@ 0x28
 8102f62:	2101      	movs	r1, #1
 8102f64:	4618      	mov	r0, r3
 8102f66:	f001 fa4d 	bl	8104404 <RCCEx_PLL3_Config>
 8102f6a:	4603      	mov	r3, r0
 8102f6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8102f70:	e00a      	b.n	8102f88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8102f72:	2301      	movs	r3, #1
 8102f74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102f78:	e006      	b.n	8102f88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102f7a:	bf00      	nop
 8102f7c:	e004      	b.n	8102f88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102f7e:	bf00      	nop
 8102f80:	e002      	b.n	8102f88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102f82:	bf00      	nop
 8102f84:	e000      	b.n	8102f88 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8102f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102f8c:	2b00      	cmp	r3, #0
 8102f8e:	d10b      	bne.n	8102fa8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8102f90:	4ba4      	ldr	r3, [pc, #656]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102f94:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8102f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8102fa0:	4aa0      	ldr	r2, [pc, #640]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102fa2:	430b      	orrs	r3, r1
 8102fa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8102fa6:	e003      	b.n	8102fb0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102fac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8102fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102fb8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8102fbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8102fc0:	2300      	movs	r3, #0
 8102fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8102fc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8102fca:	460b      	mov	r3, r1
 8102fcc:	4313      	orrs	r3, r2
 8102fce:	d037      	beq.n	8103040 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8102fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102fd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102fda:	d00e      	beq.n	8102ffa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8102fdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102fe0:	d816      	bhi.n	8103010 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8102fe2:	2b00      	cmp	r3, #0
 8102fe4:	d018      	beq.n	8103018 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8102fe6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102fea:	d111      	bne.n	8103010 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102fec:	4b8d      	ldr	r3, [pc, #564]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102ff0:	4a8c      	ldr	r2, [pc, #560]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102ff2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8102ff8:	e00f      	b.n	810301a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ffe:	3308      	adds	r3, #8
 8103000:	2101      	movs	r1, #1
 8103002:	4618      	mov	r0, r3
 8103004:	f001 f94c 	bl	81042a0 <RCCEx_PLL2_Config>
 8103008:	4603      	mov	r3, r0
 810300a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810300e:	e004      	b.n	810301a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103010:	2301      	movs	r3, #1
 8103012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103016:	e000      	b.n	810301a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8103018:	bf00      	nop
    }

    if (ret == HAL_OK)
 810301a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810301e:	2b00      	cmp	r3, #0
 8103020:	d10a      	bne.n	8103038 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103022:	4b80      	ldr	r3, [pc, #512]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103026:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810302a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810302e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103030:	4a7c      	ldr	r2, [pc, #496]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103032:	430b      	orrs	r3, r1
 8103034:	6513      	str	r3, [r2, #80]	@ 0x50
 8103036:	e003      	b.n	8103040 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103038:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810303c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103048:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 810304c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8103050:	2300      	movs	r3, #0
 8103052:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8103056:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 810305a:	460b      	mov	r3, r1
 810305c:	4313      	orrs	r3, r2
 810305e:	d039      	beq.n	81030d4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8103060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103066:	2b03      	cmp	r3, #3
 8103068:	d81c      	bhi.n	81030a4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 810306a:	a201      	add	r2, pc, #4	@ (adr r2, 8103070 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 810306c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103070:	081030ad 	.word	0x081030ad
 8103074:	08103081 	.word	0x08103081
 8103078:	0810308f 	.word	0x0810308f
 810307c:	081030ad 	.word	0x081030ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103080:	4b68      	ldr	r3, [pc, #416]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103084:	4a67      	ldr	r2, [pc, #412]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103086:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810308a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 810308c:	e00f      	b.n	81030ae <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810308e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103092:	3308      	adds	r3, #8
 8103094:	2102      	movs	r1, #2
 8103096:	4618      	mov	r0, r3
 8103098:	f001 f902 	bl	81042a0 <RCCEx_PLL2_Config>
 810309c:	4603      	mov	r3, r0
 810309e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 81030a2:	e004      	b.n	81030ae <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81030a4:	2301      	movs	r3, #1
 81030a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81030aa:	e000      	b.n	81030ae <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 81030ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 81030ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81030b2:	2b00      	cmp	r3, #0
 81030b4:	d10a      	bne.n	81030cc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81030b6:	4b5b      	ldr	r3, [pc, #364]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81030b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81030ba:	f023 0103 	bic.w	r1, r3, #3
 81030be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81030c4:	4a57      	ldr	r2, [pc, #348]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81030c6:	430b      	orrs	r3, r1
 81030c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81030ca:	e003      	b.n	81030d4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81030cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81030d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81030d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81030dc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 81030e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 81030e4:	2300      	movs	r3, #0
 81030e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 81030ea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 81030ee:	460b      	mov	r3, r1
 81030f0:	4313      	orrs	r3, r2
 81030f2:	f000 809f 	beq.w	8103234 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81030f6:	4b4c      	ldr	r3, [pc, #304]	@ (8103228 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81030f8:	681b      	ldr	r3, [r3, #0]
 81030fa:	4a4b      	ldr	r2, [pc, #300]	@ (8103228 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81030fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8103100:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103102:	f7fe fea1 	bl	8101e48 <HAL_GetTick>
 8103106:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810310a:	e00b      	b.n	8103124 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 810310c:	f7fe fe9c 	bl	8101e48 <HAL_GetTick>
 8103110:	4602      	mov	r2, r0
 8103112:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8103116:	1ad3      	subs	r3, r2, r3
 8103118:	2b64      	cmp	r3, #100	@ 0x64
 810311a:	d903      	bls.n	8103124 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 810311c:	2303      	movs	r3, #3
 810311e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103122:	e005      	b.n	8103130 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103124:	4b40      	ldr	r3, [pc, #256]	@ (8103228 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8103126:	681b      	ldr	r3, [r3, #0]
 8103128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810312c:	2b00      	cmp	r3, #0
 810312e:	d0ed      	beq.n	810310c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8103130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103134:	2b00      	cmp	r3, #0
 8103136:	d179      	bne.n	810322c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103138:	4b3a      	ldr	r3, [pc, #232]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810313a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 810313c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103140:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103144:	4053      	eors	r3, r2
 8103146:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810314a:	2b00      	cmp	r3, #0
 810314c:	d015      	beq.n	810317a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810314e:	4b35      	ldr	r3, [pc, #212]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103152:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8103156:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810315a:	4b32      	ldr	r3, [pc, #200]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810315c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810315e:	4a31      	ldr	r2, [pc, #196]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8103164:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103166:	4b2f      	ldr	r3, [pc, #188]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810316a:	4a2e      	ldr	r2, [pc, #184]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810316c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8103170:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103172:	4a2c      	ldr	r2, [pc, #176]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103174:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8103178:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810317a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810317e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8103182:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103186:	d118      	bne.n	81031ba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103188:	f7fe fe5e 	bl	8101e48 <HAL_GetTick>
 810318c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103190:	e00d      	b.n	81031ae <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103192:	f7fe fe59 	bl	8101e48 <HAL_GetTick>
 8103196:	4602      	mov	r2, r0
 8103198:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 810319c:	1ad2      	subs	r2, r2, r3
 810319e:	f241 3388 	movw	r3, #5000	@ 0x1388
 81031a2:	429a      	cmp	r2, r3
 81031a4:	d903      	bls.n	81031ae <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 81031a6:	2303      	movs	r3, #3
 81031a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 81031ac:	e005      	b.n	81031ba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81031ae:	4b1d      	ldr	r3, [pc, #116]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81031b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81031b2:	f003 0302 	and.w	r3, r3, #2
 81031b6:	2b00      	cmp	r3, #0
 81031b8:	d0eb      	beq.n	8103192 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 81031ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81031be:	2b00      	cmp	r3, #0
 81031c0:	d12b      	bne.n	810321a <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81031c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81031ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81031ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81031d2:	d110      	bne.n	81031f6 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 81031d4:	4b13      	ldr	r3, [pc, #76]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81031d6:	691b      	ldr	r3, [r3, #16]
 81031d8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 81031dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81031e4:	091b      	lsrs	r3, r3, #4
 81031e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 81031ea:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 81031ee:	4a0d      	ldr	r2, [pc, #52]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81031f0:	430b      	orrs	r3, r1
 81031f2:	6113      	str	r3, [r2, #16]
 81031f4:	e005      	b.n	8103202 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 81031f6:	4b0b      	ldr	r3, [pc, #44]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81031f8:	691b      	ldr	r3, [r3, #16]
 81031fa:	4a0a      	ldr	r2, [pc, #40]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81031fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8103200:	6113      	str	r3, [r2, #16]
 8103202:	4b08      	ldr	r3, [pc, #32]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103204:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8103206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810320a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810320e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8103212:	4a04      	ldr	r2, [pc, #16]	@ (8103224 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103214:	430b      	orrs	r3, r1
 8103216:	6713      	str	r3, [r2, #112]	@ 0x70
 8103218:	e00c      	b.n	8103234 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810321a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810321e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8103222:	e007      	b.n	8103234 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8103224:	58024400 	.word	0x58024400
 8103228:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810322c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103230:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8103234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103238:	e9d3 2300 	ldrd	r2, r3, [r3]
 810323c:	f002 0301 	and.w	r3, r2, #1
 8103240:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8103244:	2300      	movs	r3, #0
 8103246:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810324a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 810324e:	460b      	mov	r3, r1
 8103250:	4313      	orrs	r3, r2
 8103252:	f000 8089 	beq.w	8103368 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8103256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810325a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810325c:	2b28      	cmp	r3, #40	@ 0x28
 810325e:	d86b      	bhi.n	8103338 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8103260:	a201      	add	r2, pc, #4	@ (adr r2, 8103268 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8103262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103266:	bf00      	nop
 8103268:	08103341 	.word	0x08103341
 810326c:	08103339 	.word	0x08103339
 8103270:	08103339 	.word	0x08103339
 8103274:	08103339 	.word	0x08103339
 8103278:	08103339 	.word	0x08103339
 810327c:	08103339 	.word	0x08103339
 8103280:	08103339 	.word	0x08103339
 8103284:	08103339 	.word	0x08103339
 8103288:	0810330d 	.word	0x0810330d
 810328c:	08103339 	.word	0x08103339
 8103290:	08103339 	.word	0x08103339
 8103294:	08103339 	.word	0x08103339
 8103298:	08103339 	.word	0x08103339
 810329c:	08103339 	.word	0x08103339
 81032a0:	08103339 	.word	0x08103339
 81032a4:	08103339 	.word	0x08103339
 81032a8:	08103323 	.word	0x08103323
 81032ac:	08103339 	.word	0x08103339
 81032b0:	08103339 	.word	0x08103339
 81032b4:	08103339 	.word	0x08103339
 81032b8:	08103339 	.word	0x08103339
 81032bc:	08103339 	.word	0x08103339
 81032c0:	08103339 	.word	0x08103339
 81032c4:	08103339 	.word	0x08103339
 81032c8:	08103341 	.word	0x08103341
 81032cc:	08103339 	.word	0x08103339
 81032d0:	08103339 	.word	0x08103339
 81032d4:	08103339 	.word	0x08103339
 81032d8:	08103339 	.word	0x08103339
 81032dc:	08103339 	.word	0x08103339
 81032e0:	08103339 	.word	0x08103339
 81032e4:	08103339 	.word	0x08103339
 81032e8:	08103341 	.word	0x08103341
 81032ec:	08103339 	.word	0x08103339
 81032f0:	08103339 	.word	0x08103339
 81032f4:	08103339 	.word	0x08103339
 81032f8:	08103339 	.word	0x08103339
 81032fc:	08103339 	.word	0x08103339
 8103300:	08103339 	.word	0x08103339
 8103304:	08103339 	.word	0x08103339
 8103308:	08103341 	.word	0x08103341
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810330c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103310:	3308      	adds	r3, #8
 8103312:	2101      	movs	r1, #1
 8103314:	4618      	mov	r0, r3
 8103316:	f000 ffc3 	bl	81042a0 <RCCEx_PLL2_Config>
 810331a:	4603      	mov	r3, r0
 810331c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8103320:	e00f      	b.n	8103342 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103326:	3328      	adds	r3, #40	@ 0x28
 8103328:	2101      	movs	r1, #1
 810332a:	4618      	mov	r0, r3
 810332c:	f001 f86a 	bl	8104404 <RCCEx_PLL3_Config>
 8103330:	4603      	mov	r3, r0
 8103332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8103336:	e004      	b.n	8103342 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103338:	2301      	movs	r3, #1
 810333a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810333e:	e000      	b.n	8103342 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8103340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103342:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103346:	2b00      	cmp	r3, #0
 8103348:	d10a      	bne.n	8103360 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810334a:	4bbf      	ldr	r3, [pc, #764]	@ (8103648 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810334c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810334e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8103352:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103356:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8103358:	4abb      	ldr	r2, [pc, #748]	@ (8103648 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810335a:	430b      	orrs	r3, r1
 810335c:	6553      	str	r3, [r2, #84]	@ 0x54
 810335e:	e003      	b.n	8103368 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103360:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103364:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8103368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103370:	f002 0302 	and.w	r3, r2, #2
 8103374:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8103378:	2300      	movs	r3, #0
 810337a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 810337e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8103382:	460b      	mov	r3, r1
 8103384:	4313      	orrs	r3, r2
 8103386:	d041      	beq.n	810340c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8103388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810338c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810338e:	2b05      	cmp	r3, #5
 8103390:	d824      	bhi.n	81033dc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8103392:	a201      	add	r2, pc, #4	@ (adr r2, 8103398 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8103394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103398:	081033e5 	.word	0x081033e5
 810339c:	081033b1 	.word	0x081033b1
 81033a0:	081033c7 	.word	0x081033c7
 81033a4:	081033e5 	.word	0x081033e5
 81033a8:	081033e5 	.word	0x081033e5
 81033ac:	081033e5 	.word	0x081033e5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81033b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033b4:	3308      	adds	r3, #8
 81033b6:	2101      	movs	r1, #1
 81033b8:	4618      	mov	r0, r3
 81033ba:	f000 ff71 	bl	81042a0 <RCCEx_PLL2_Config>
 81033be:	4603      	mov	r3, r0
 81033c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81033c4:	e00f      	b.n	81033e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81033c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033ca:	3328      	adds	r3, #40	@ 0x28
 81033cc:	2101      	movs	r1, #1
 81033ce:	4618      	mov	r0, r3
 81033d0:	f001 f818 	bl	8104404 <RCCEx_PLL3_Config>
 81033d4:	4603      	mov	r3, r0
 81033d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81033da:	e004      	b.n	81033e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81033dc:	2301      	movs	r3, #1
 81033de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81033e2:	e000      	b.n	81033e6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 81033e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81033e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81033ea:	2b00      	cmp	r3, #0
 81033ec:	d10a      	bne.n	8103404 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81033ee:	4b96      	ldr	r3, [pc, #600]	@ (8103648 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81033f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81033f2:	f023 0107 	bic.w	r1, r3, #7
 81033f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81033fc:	4a92      	ldr	r2, [pc, #584]	@ (8103648 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81033fe:	430b      	orrs	r3, r1
 8103400:	6553      	str	r3, [r2, #84]	@ 0x54
 8103402:	e003      	b.n	810340c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103404:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103408:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810340c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103414:	f002 0304 	and.w	r3, r2, #4
 8103418:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810341c:	2300      	movs	r3, #0
 810341e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8103422:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8103426:	460b      	mov	r3, r1
 8103428:	4313      	orrs	r3, r2
 810342a:	d044      	beq.n	81034b6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 810342c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103430:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8103434:	2b05      	cmp	r3, #5
 8103436:	d825      	bhi.n	8103484 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8103438:	a201      	add	r2, pc, #4	@ (adr r2, 8103440 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 810343a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810343e:	bf00      	nop
 8103440:	0810348d 	.word	0x0810348d
 8103444:	08103459 	.word	0x08103459
 8103448:	0810346f 	.word	0x0810346f
 810344c:	0810348d 	.word	0x0810348d
 8103450:	0810348d 	.word	0x0810348d
 8103454:	0810348d 	.word	0x0810348d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810345c:	3308      	adds	r3, #8
 810345e:	2101      	movs	r1, #1
 8103460:	4618      	mov	r0, r3
 8103462:	f000 ff1d 	bl	81042a0 <RCCEx_PLL2_Config>
 8103466:	4603      	mov	r3, r0
 8103468:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810346c:	e00f      	b.n	810348e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810346e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103472:	3328      	adds	r3, #40	@ 0x28
 8103474:	2101      	movs	r1, #1
 8103476:	4618      	mov	r0, r3
 8103478:	f000 ffc4 	bl	8104404 <RCCEx_PLL3_Config>
 810347c:	4603      	mov	r3, r0
 810347e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8103482:	e004      	b.n	810348e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103484:	2301      	movs	r3, #1
 8103486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810348a:	e000      	b.n	810348e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 810348c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810348e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103492:	2b00      	cmp	r3, #0
 8103494:	d10b      	bne.n	81034ae <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8103496:	4b6c      	ldr	r3, [pc, #432]	@ (8103648 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810349a:	f023 0107 	bic.w	r1, r3, #7
 810349e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81034a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81034a6:	4a68      	ldr	r2, [pc, #416]	@ (8103648 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81034a8:	430b      	orrs	r3, r1
 81034aa:	6593      	str	r3, [r2, #88]	@ 0x58
 81034ac:	e003      	b.n	81034b6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81034ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81034b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81034b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81034ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81034be:	f002 0320 	and.w	r3, r2, #32
 81034c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 81034c6:	2300      	movs	r3, #0
 81034c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 81034cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 81034d0:	460b      	mov	r3, r1
 81034d2:	4313      	orrs	r3, r2
 81034d4:	d055      	beq.n	8103582 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81034d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81034da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81034de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81034e2:	d033      	beq.n	810354c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 81034e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81034e8:	d82c      	bhi.n	8103544 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81034ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81034ee:	d02f      	beq.n	8103550 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 81034f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81034f4:	d826      	bhi.n	8103544 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81034f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81034fa:	d02b      	beq.n	8103554 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 81034fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103500:	d820      	bhi.n	8103544 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8103502:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103506:	d012      	beq.n	810352e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8103508:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810350c:	d81a      	bhi.n	8103544 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810350e:	2b00      	cmp	r3, #0
 8103510:	d022      	beq.n	8103558 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8103512:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103516:	d115      	bne.n	8103544 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810351c:	3308      	adds	r3, #8
 810351e:	2100      	movs	r1, #0
 8103520:	4618      	mov	r0, r3
 8103522:	f000 febd 	bl	81042a0 <RCCEx_PLL2_Config>
 8103526:	4603      	mov	r3, r0
 8103528:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810352c:	e015      	b.n	810355a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810352e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103532:	3328      	adds	r3, #40	@ 0x28
 8103534:	2102      	movs	r1, #2
 8103536:	4618      	mov	r0, r3
 8103538:	f000 ff64 	bl	8104404 <RCCEx_PLL3_Config>
 810353c:	4603      	mov	r3, r0
 810353e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8103542:	e00a      	b.n	810355a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103544:	2301      	movs	r3, #1
 8103546:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810354a:	e006      	b.n	810355a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810354c:	bf00      	nop
 810354e:	e004      	b.n	810355a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8103550:	bf00      	nop
 8103552:	e002      	b.n	810355a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8103554:	bf00      	nop
 8103556:	e000      	b.n	810355a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8103558:	bf00      	nop
    }

    if (ret == HAL_OK)
 810355a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810355e:	2b00      	cmp	r3, #0
 8103560:	d10b      	bne.n	810357a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8103562:	4b39      	ldr	r3, [pc, #228]	@ (8103648 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103566:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810356a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8103572:	4a35      	ldr	r2, [pc, #212]	@ (8103648 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103574:	430b      	orrs	r3, r1
 8103576:	6553      	str	r3, [r2, #84]	@ 0x54
 8103578:	e003      	b.n	8103582 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810357a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810357e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8103582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103586:	e9d3 2300 	ldrd	r2, r3, [r3]
 810358a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 810358e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8103592:	2300      	movs	r3, #0
 8103594:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8103598:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 810359c:	460b      	mov	r3, r1
 810359e:	4313      	orrs	r3, r2
 81035a0:	d058      	beq.n	8103654 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81035a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81035a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81035aa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81035ae:	d033      	beq.n	8103618 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 81035b0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81035b4:	d82c      	bhi.n	8103610 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81035b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81035ba:	d02f      	beq.n	810361c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 81035bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81035c0:	d826      	bhi.n	8103610 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81035c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81035c6:	d02b      	beq.n	8103620 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 81035c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81035cc:	d820      	bhi.n	8103610 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81035ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81035d2:	d012      	beq.n	81035fa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 81035d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81035d8:	d81a      	bhi.n	8103610 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81035da:	2b00      	cmp	r3, #0
 81035dc:	d022      	beq.n	8103624 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 81035de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81035e2:	d115      	bne.n	8103610 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81035e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81035e8:	3308      	adds	r3, #8
 81035ea:	2100      	movs	r1, #0
 81035ec:	4618      	mov	r0, r3
 81035ee:	f000 fe57 	bl	81042a0 <RCCEx_PLL2_Config>
 81035f2:	4603      	mov	r3, r0
 81035f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81035f8:	e015      	b.n	8103626 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81035fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81035fe:	3328      	adds	r3, #40	@ 0x28
 8103600:	2102      	movs	r1, #2
 8103602:	4618      	mov	r0, r3
 8103604:	f000 fefe 	bl	8104404 <RCCEx_PLL3_Config>
 8103608:	4603      	mov	r3, r0
 810360a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810360e:	e00a      	b.n	8103626 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103610:	2301      	movs	r3, #1
 8103612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103616:	e006      	b.n	8103626 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8103618:	bf00      	nop
 810361a:	e004      	b.n	8103626 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810361c:	bf00      	nop
 810361e:	e002      	b.n	8103626 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8103620:	bf00      	nop
 8103622:	e000      	b.n	8103626 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8103624:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810362a:	2b00      	cmp	r3, #0
 810362c:	d10e      	bne.n	810364c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810362e:	4b06      	ldr	r3, [pc, #24]	@ (8103648 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103632:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8103636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810363a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810363e:	4a02      	ldr	r2, [pc, #8]	@ (8103648 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8103640:	430b      	orrs	r3, r1
 8103642:	6593      	str	r3, [r2, #88]	@ 0x58
 8103644:	e006      	b.n	8103654 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8103646:	bf00      	nop
 8103648:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810364c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103650:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8103654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103658:	e9d3 2300 	ldrd	r2, r3, [r3]
 810365c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8103660:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8103664:	2300      	movs	r3, #0
 8103666:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 810366a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 810366e:	460b      	mov	r3, r1
 8103670:	4313      	orrs	r3, r2
 8103672:	d055      	beq.n	8103720 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8103674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103678:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810367c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8103680:	d033      	beq.n	81036ea <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8103682:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8103686:	d82c      	bhi.n	81036e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8103688:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810368c:	d02f      	beq.n	81036ee <HAL_RCCEx_PeriphCLKConfig+0xdde>
 810368e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8103692:	d826      	bhi.n	81036e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8103694:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8103698:	d02b      	beq.n	81036f2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 810369a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 810369e:	d820      	bhi.n	81036e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81036a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81036a4:	d012      	beq.n	81036cc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 81036a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81036aa:	d81a      	bhi.n	81036e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81036ac:	2b00      	cmp	r3, #0
 81036ae:	d022      	beq.n	81036f6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 81036b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81036b4:	d115      	bne.n	81036e2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81036b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81036ba:	3308      	adds	r3, #8
 81036bc:	2100      	movs	r1, #0
 81036be:	4618      	mov	r0, r3
 81036c0:	f000 fdee 	bl	81042a0 <RCCEx_PLL2_Config>
 81036c4:	4603      	mov	r3, r0
 81036c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81036ca:	e015      	b.n	81036f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81036cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81036d0:	3328      	adds	r3, #40	@ 0x28
 81036d2:	2102      	movs	r1, #2
 81036d4:	4618      	mov	r0, r3
 81036d6:	f000 fe95 	bl	8104404 <RCCEx_PLL3_Config>
 81036da:	4603      	mov	r3, r0
 81036dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81036e0:	e00a      	b.n	81036f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81036e2:	2301      	movs	r3, #1
 81036e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81036e8:	e006      	b.n	81036f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81036ea:	bf00      	nop
 81036ec:	e004      	b.n	81036f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81036ee:	bf00      	nop
 81036f0:	e002      	b.n	81036f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81036f2:	bf00      	nop
 81036f4:	e000      	b.n	81036f8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81036f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81036f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81036fc:	2b00      	cmp	r3, #0
 81036fe:	d10b      	bne.n	8103718 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8103700:	4ba1      	ldr	r3, [pc, #644]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103704:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8103708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810370c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8103710:	4a9d      	ldr	r2, [pc, #628]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103712:	430b      	orrs	r3, r1
 8103714:	6593      	str	r3, [r2, #88]	@ 0x58
 8103716:	e003      	b.n	8103720 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103718:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810371c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8103720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103728:	f002 0308 	and.w	r3, r2, #8
 810372c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8103730:	2300      	movs	r3, #0
 8103732:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8103736:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 810373a:	460b      	mov	r3, r1
 810373c:	4313      	orrs	r3, r2
 810373e:	d01e      	beq.n	810377e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8103740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810374c:	d10c      	bne.n	8103768 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810374e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103752:	3328      	adds	r3, #40	@ 0x28
 8103754:	2102      	movs	r1, #2
 8103756:	4618      	mov	r0, r3
 8103758:	f000 fe54 	bl	8104404 <RCCEx_PLL3_Config>
 810375c:	4603      	mov	r3, r0
 810375e:	2b00      	cmp	r3, #0
 8103760:	d002      	beq.n	8103768 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8103762:	2301      	movs	r3, #1
 8103764:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8103768:	4b87      	ldr	r3, [pc, #540]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810376a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810376c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8103770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103774:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103778:	4a83      	ldr	r2, [pc, #524]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810377a:	430b      	orrs	r3, r1
 810377c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810377e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103786:	f002 0310 	and.w	r3, r2, #16
 810378a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 810378e:	2300      	movs	r3, #0
 8103790:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8103794:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8103798:	460b      	mov	r3, r1
 810379a:	4313      	orrs	r3, r2
 810379c:	d01e      	beq.n	81037dc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 810379e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81037a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81037a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81037aa:	d10c      	bne.n	81037c6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81037ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81037b0:	3328      	adds	r3, #40	@ 0x28
 81037b2:	2102      	movs	r1, #2
 81037b4:	4618      	mov	r0, r3
 81037b6:	f000 fe25 	bl	8104404 <RCCEx_PLL3_Config>
 81037ba:	4603      	mov	r3, r0
 81037bc:	2b00      	cmp	r3, #0
 81037be:	d002      	beq.n	81037c6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 81037c0:	2301      	movs	r3, #1
 81037c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81037c6:	4b70      	ldr	r3, [pc, #448]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81037c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81037ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81037ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81037d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81037d6:	4a6c      	ldr	r2, [pc, #432]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81037d8:	430b      	orrs	r3, r1
 81037da:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81037dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81037e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81037e4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 81037e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 81037ec:	2300      	movs	r3, #0
 81037ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 81037f2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 81037f6:	460b      	mov	r3, r1
 81037f8:	4313      	orrs	r3, r2
 81037fa:	d03e      	beq.n	810387a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 81037fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103800:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8103804:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103808:	d022      	beq.n	8103850 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 810380a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810380e:	d81b      	bhi.n	8103848 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8103810:	2b00      	cmp	r3, #0
 8103812:	d003      	beq.n	810381c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8103814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103818:	d00b      	beq.n	8103832 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 810381a:	e015      	b.n	8103848 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810381c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103820:	3308      	adds	r3, #8
 8103822:	2100      	movs	r1, #0
 8103824:	4618      	mov	r0, r3
 8103826:	f000 fd3b 	bl	81042a0 <RCCEx_PLL2_Config>
 810382a:	4603      	mov	r3, r0
 810382c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103830:	e00f      	b.n	8103852 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103836:	3328      	adds	r3, #40	@ 0x28
 8103838:	2102      	movs	r1, #2
 810383a:	4618      	mov	r0, r3
 810383c:	f000 fde2 	bl	8104404 <RCCEx_PLL3_Config>
 8103840:	4603      	mov	r3, r0
 8103842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103846:	e004      	b.n	8103852 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103848:	2301      	movs	r3, #1
 810384a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810384e:	e000      	b.n	8103852 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8103850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103856:	2b00      	cmp	r3, #0
 8103858:	d10b      	bne.n	8103872 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810385a:	4b4b      	ldr	r3, [pc, #300]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810385c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810385e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8103862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103866:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810386a:	4a47      	ldr	r2, [pc, #284]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810386c:	430b      	orrs	r3, r1
 810386e:	6593      	str	r3, [r2, #88]	@ 0x58
 8103870:	e003      	b.n	810387a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103876:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810387a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103882:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8103886:	67bb      	str	r3, [r7, #120]	@ 0x78
 8103888:	2300      	movs	r3, #0
 810388a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 810388c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8103890:	460b      	mov	r3, r1
 8103892:	4313      	orrs	r3, r2
 8103894:	d03b      	beq.n	810390e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8103896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810389e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81038a2:	d01f      	beq.n	81038e4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 81038a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81038a8:	d818      	bhi.n	81038dc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 81038aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81038ae:	d003      	beq.n	81038b8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 81038b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81038b4:	d007      	beq.n	81038c6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 81038b6:	e011      	b.n	81038dc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81038b8:	4b33      	ldr	r3, [pc, #204]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81038ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81038bc:	4a32      	ldr	r2, [pc, #200]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81038be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81038c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 81038c4:	e00f      	b.n	81038e6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81038c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038ca:	3328      	adds	r3, #40	@ 0x28
 81038cc:	2101      	movs	r1, #1
 81038ce:	4618      	mov	r0, r3
 81038d0:	f000 fd98 	bl	8104404 <RCCEx_PLL3_Config>
 81038d4:	4603      	mov	r3, r0
 81038d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 81038da:	e004      	b.n	81038e6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81038dc:	2301      	movs	r3, #1
 81038de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81038e2:	e000      	b.n	81038e6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 81038e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81038e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81038ea:	2b00      	cmp	r3, #0
 81038ec:	d10b      	bne.n	8103906 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81038ee:	4b26      	ldr	r3, [pc, #152]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81038f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81038f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81038f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81038fe:	4a22      	ldr	r2, [pc, #136]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103900:	430b      	orrs	r3, r1
 8103902:	6553      	str	r3, [r2, #84]	@ 0x54
 8103904:	e003      	b.n	810390e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810390a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810390e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103916:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 810391a:	673b      	str	r3, [r7, #112]	@ 0x70
 810391c:	2300      	movs	r3, #0
 810391e:	677b      	str	r3, [r7, #116]	@ 0x74
 8103920:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8103924:	460b      	mov	r3, r1
 8103926:	4313      	orrs	r3, r2
 8103928:	d034      	beq.n	8103994 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810392a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810392e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103930:	2b00      	cmp	r3, #0
 8103932:	d003      	beq.n	810393c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8103934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103938:	d007      	beq.n	810394a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 810393a:	e011      	b.n	8103960 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810393c:	4b12      	ldr	r3, [pc, #72]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810393e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103940:	4a11      	ldr	r2, [pc, #68]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103946:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8103948:	e00e      	b.n	8103968 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810394a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810394e:	3308      	adds	r3, #8
 8103950:	2102      	movs	r1, #2
 8103952:	4618      	mov	r0, r3
 8103954:	f000 fca4 	bl	81042a0 <RCCEx_PLL2_Config>
 8103958:	4603      	mov	r3, r0
 810395a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810395e:	e003      	b.n	8103968 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8103960:	2301      	movs	r3, #1
 8103962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810396c:	2b00      	cmp	r3, #0
 810396e:	d10d      	bne.n	810398c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8103970:	4b05      	ldr	r3, [pc, #20]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103974:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8103978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810397c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810397e:	4a02      	ldr	r2, [pc, #8]	@ (8103988 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103980:	430b      	orrs	r3, r1
 8103982:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103984:	e006      	b.n	8103994 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8103986:	bf00      	nop
 8103988:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810398c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103990:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8103994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103998:	e9d3 2300 	ldrd	r2, r3, [r3]
 810399c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 81039a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 81039a2:	2300      	movs	r3, #0
 81039a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 81039a6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 81039aa:	460b      	mov	r3, r1
 81039ac:	4313      	orrs	r3, r2
 81039ae:	d00c      	beq.n	81039ca <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81039b4:	3328      	adds	r3, #40	@ 0x28
 81039b6:	2102      	movs	r1, #2
 81039b8:	4618      	mov	r0, r3
 81039ba:	f000 fd23 	bl	8104404 <RCCEx_PLL3_Config>
 81039be:	4603      	mov	r3, r0
 81039c0:	2b00      	cmp	r3, #0
 81039c2:	d002      	beq.n	81039ca <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 81039c4:	2301      	movs	r3, #1
 81039c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81039ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81039ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81039d2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 81039d6:	663b      	str	r3, [r7, #96]	@ 0x60
 81039d8:	2300      	movs	r3, #0
 81039da:	667b      	str	r3, [r7, #100]	@ 0x64
 81039dc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 81039e0:	460b      	mov	r3, r1
 81039e2:	4313      	orrs	r3, r2
 81039e4:	d038      	beq.n	8103a58 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 81039e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81039ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81039ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81039f2:	d018      	beq.n	8103a26 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 81039f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81039f8:	d811      	bhi.n	8103a1e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81039fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81039fe:	d014      	beq.n	8103a2a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8103a00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8103a04:	d80b      	bhi.n	8103a1e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8103a06:	2b00      	cmp	r3, #0
 8103a08:	d011      	beq.n	8103a2e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8103a0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103a0e:	d106      	bne.n	8103a1e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a10:	4bc3      	ldr	r3, [pc, #780]	@ (8103d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103a14:	4ac2      	ldr	r2, [pc, #776]	@ (8103d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103a1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8103a1c:	e008      	b.n	8103a30 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103a1e:	2301      	movs	r3, #1
 8103a20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103a24:	e004      	b.n	8103a30 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8103a26:	bf00      	nop
 8103a28:	e002      	b.n	8103a30 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8103a2a:	bf00      	nop
 8103a2c:	e000      	b.n	8103a30 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8103a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103a30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103a34:	2b00      	cmp	r3, #0
 8103a36:	d10b      	bne.n	8103a50 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8103a38:	4bb9      	ldr	r3, [pc, #740]	@ (8103d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103a3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103a3c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8103a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8103a48:	4ab5      	ldr	r2, [pc, #724]	@ (8103d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103a4a:	430b      	orrs	r3, r1
 8103a4c:	6553      	str	r3, [r2, #84]	@ 0x54
 8103a4e:	e003      	b.n	8103a58 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103a54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8103a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103a60:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8103a64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8103a66:	2300      	movs	r3, #0
 8103a68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8103a6a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8103a6e:	460b      	mov	r3, r1
 8103a70:	4313      	orrs	r3, r2
 8103a72:	d009      	beq.n	8103a88 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8103a74:	4baa      	ldr	r3, [pc, #680]	@ (8103d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103a76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103a78:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8103a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8103a82:	4aa7      	ldr	r2, [pc, #668]	@ (8103d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103a84:	430b      	orrs	r3, r1
 8103a86:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8103a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103a90:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8103a94:	653b      	str	r3, [r7, #80]	@ 0x50
 8103a96:	2300      	movs	r3, #0
 8103a98:	657b      	str	r3, [r7, #84]	@ 0x54
 8103a9a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8103a9e:	460b      	mov	r3, r1
 8103aa0:	4313      	orrs	r3, r2
 8103aa2:	d00a      	beq.n	8103aba <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8103aa4:	4b9e      	ldr	r3, [pc, #632]	@ (8103d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103aa6:	691b      	ldr	r3, [r3, #16]
 8103aa8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8103aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ab0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8103ab4:	4a9a      	ldr	r2, [pc, #616]	@ (8103d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103ab6:	430b      	orrs	r3, r1
 8103ab8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103ac2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8103ac6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8103ac8:	2300      	movs	r3, #0
 8103aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8103acc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8103ad0:	460b      	mov	r3, r1
 8103ad2:	4313      	orrs	r3, r2
 8103ad4:	d009      	beq.n	8103aea <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103ad6:	4b92      	ldr	r3, [pc, #584]	@ (8103d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103ad8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103ada:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8103ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103ae4:	4a8e      	ldr	r2, [pc, #568]	@ (8103d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103ae6:	430b      	orrs	r3, r1
 8103ae8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8103aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103af2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8103af6:	643b      	str	r3, [r7, #64]	@ 0x40
 8103af8:	2300      	movs	r3, #0
 8103afa:	647b      	str	r3, [r7, #68]	@ 0x44
 8103afc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8103b00:	460b      	mov	r3, r1
 8103b02:	4313      	orrs	r3, r2
 8103b04:	d00e      	beq.n	8103b24 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103b06:	4b86      	ldr	r3, [pc, #536]	@ (8103d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103b08:	691b      	ldr	r3, [r3, #16]
 8103b0a:	4a85      	ldr	r2, [pc, #532]	@ (8103d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103b0c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8103b10:	6113      	str	r3, [r2, #16]
 8103b12:	4b83      	ldr	r3, [pc, #524]	@ (8103d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103b14:	6919      	ldr	r1, [r3, #16]
 8103b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b1a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8103b1e:	4a80      	ldr	r2, [pc, #512]	@ (8103d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103b20:	430b      	orrs	r3, r1
 8103b22:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b2c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8103b30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8103b32:	2300      	movs	r3, #0
 8103b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103b36:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8103b3a:	460b      	mov	r3, r1
 8103b3c:	4313      	orrs	r3, r2
 8103b3e:	d009      	beq.n	8103b54 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103b40:	4b77      	ldr	r3, [pc, #476]	@ (8103d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103b44:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8103b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103b4e:	4a74      	ldr	r2, [pc, #464]	@ (8103d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103b50:	430b      	orrs	r3, r1
 8103b52:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b5c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8103b60:	633b      	str	r3, [r7, #48]	@ 0x30
 8103b62:	2300      	movs	r3, #0
 8103b64:	637b      	str	r3, [r7, #52]	@ 0x34
 8103b66:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8103b6a:	460b      	mov	r3, r1
 8103b6c:	4313      	orrs	r3, r2
 8103b6e:	d00a      	beq.n	8103b86 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8103b70:	4b6b      	ldr	r3, [pc, #428]	@ (8103d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103b74:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8103b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8103b80:	4a67      	ldr	r2, [pc, #412]	@ (8103d20 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103b82:	430b      	orrs	r3, r1
 8103b84:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8103b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b8e:	2100      	movs	r1, #0
 8103b90:	62b9      	str	r1, [r7, #40]	@ 0x28
 8103b92:	f003 0301 	and.w	r3, r3, #1
 8103b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8103b98:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8103b9c:	460b      	mov	r3, r1
 8103b9e:	4313      	orrs	r3, r2
 8103ba0:	d011      	beq.n	8103bc6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ba6:	3308      	adds	r3, #8
 8103ba8:	2100      	movs	r1, #0
 8103baa:	4618      	mov	r0, r3
 8103bac:	f000 fb78 	bl	81042a0 <RCCEx_PLL2_Config>
 8103bb0:	4603      	mov	r3, r0
 8103bb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103bba:	2b00      	cmp	r3, #0
 8103bbc:	d003      	beq.n	8103bc6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103bc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8103bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103bce:	2100      	movs	r1, #0
 8103bd0:	6239      	str	r1, [r7, #32]
 8103bd2:	f003 0302 	and.w	r3, r3, #2
 8103bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8103bd8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8103bdc:	460b      	mov	r3, r1
 8103bde:	4313      	orrs	r3, r2
 8103be0:	d011      	beq.n	8103c06 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103be6:	3308      	adds	r3, #8
 8103be8:	2101      	movs	r1, #1
 8103bea:	4618      	mov	r0, r3
 8103bec:	f000 fb58 	bl	81042a0 <RCCEx_PLL2_Config>
 8103bf0:	4603      	mov	r3, r0
 8103bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103bfa:	2b00      	cmp	r3, #0
 8103bfc:	d003      	beq.n	8103c06 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103bfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103c02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8103c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c0e:	2100      	movs	r1, #0
 8103c10:	61b9      	str	r1, [r7, #24]
 8103c12:	f003 0304 	and.w	r3, r3, #4
 8103c16:	61fb      	str	r3, [r7, #28]
 8103c18:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8103c1c:	460b      	mov	r3, r1
 8103c1e:	4313      	orrs	r3, r2
 8103c20:	d011      	beq.n	8103c46 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c26:	3308      	adds	r3, #8
 8103c28:	2102      	movs	r1, #2
 8103c2a:	4618      	mov	r0, r3
 8103c2c:	f000 fb38 	bl	81042a0 <RCCEx_PLL2_Config>
 8103c30:	4603      	mov	r3, r0
 8103c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103c3a:	2b00      	cmp	r3, #0
 8103c3c:	d003      	beq.n	8103c46 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103c42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8103c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c4e:	2100      	movs	r1, #0
 8103c50:	6139      	str	r1, [r7, #16]
 8103c52:	f003 0308 	and.w	r3, r3, #8
 8103c56:	617b      	str	r3, [r7, #20]
 8103c58:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8103c5c:	460b      	mov	r3, r1
 8103c5e:	4313      	orrs	r3, r2
 8103c60:	d011      	beq.n	8103c86 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c66:	3328      	adds	r3, #40	@ 0x28
 8103c68:	2100      	movs	r1, #0
 8103c6a:	4618      	mov	r0, r3
 8103c6c:	f000 fbca 	bl	8104404 <RCCEx_PLL3_Config>
 8103c70:	4603      	mov	r3, r0
 8103c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8103c76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103c7a:	2b00      	cmp	r3, #0
 8103c7c:	d003      	beq.n	8103c86 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103c82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8103c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c8e:	2100      	movs	r1, #0
 8103c90:	60b9      	str	r1, [r7, #8]
 8103c92:	f003 0310 	and.w	r3, r3, #16
 8103c96:	60fb      	str	r3, [r7, #12]
 8103c98:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8103c9c:	460b      	mov	r3, r1
 8103c9e:	4313      	orrs	r3, r2
 8103ca0:	d011      	beq.n	8103cc6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ca6:	3328      	adds	r3, #40	@ 0x28
 8103ca8:	2101      	movs	r1, #1
 8103caa:	4618      	mov	r0, r3
 8103cac:	f000 fbaa 	bl	8104404 <RCCEx_PLL3_Config>
 8103cb0:	4603      	mov	r3, r0
 8103cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103cba:	2b00      	cmp	r3, #0
 8103cbc:	d003      	beq.n	8103cc6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103cc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8103cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103cce:	2100      	movs	r1, #0
 8103cd0:	6039      	str	r1, [r7, #0]
 8103cd2:	f003 0320 	and.w	r3, r3, #32
 8103cd6:	607b      	str	r3, [r7, #4]
 8103cd8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8103cdc:	460b      	mov	r3, r1
 8103cde:	4313      	orrs	r3, r2
 8103ce0:	d011      	beq.n	8103d06 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ce6:	3328      	adds	r3, #40	@ 0x28
 8103ce8:	2102      	movs	r1, #2
 8103cea:	4618      	mov	r0, r3
 8103cec:	f000 fb8a 	bl	8104404 <RCCEx_PLL3_Config>
 8103cf0:	4603      	mov	r3, r0
 8103cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103cfa:	2b00      	cmp	r3, #0
 8103cfc:	d003      	beq.n	8103d06 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103d02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8103d06:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8103d0a:	2b00      	cmp	r3, #0
 8103d0c:	d101      	bne.n	8103d12 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8103d0e:	2300      	movs	r3, #0
 8103d10:	e000      	b.n	8103d14 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8103d12:	2301      	movs	r3, #1
}
 8103d14:	4618      	mov	r0, r3
 8103d16:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8103d1a:	46bd      	mov	sp, r7
 8103d1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8103d20:	58024400 	.word	0x58024400

08103d24 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8103d24:	b580      	push	{r7, lr}
 8103d26:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8103d28:	f7fe fd94 	bl	8102854 <HAL_RCC_GetHCLKFreq>
 8103d2c:	4602      	mov	r2, r0
 8103d2e:	4b06      	ldr	r3, [pc, #24]	@ (8103d48 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8103d30:	6a1b      	ldr	r3, [r3, #32]
 8103d32:	091b      	lsrs	r3, r3, #4
 8103d34:	f003 0307 	and.w	r3, r3, #7
 8103d38:	4904      	ldr	r1, [pc, #16]	@ (8103d4c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8103d3a:	5ccb      	ldrb	r3, [r1, r3]
 8103d3c:	f003 031f 	and.w	r3, r3, #31
 8103d40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8103d44:	4618      	mov	r0, r3
 8103d46:	bd80      	pop	{r7, pc}
 8103d48:	58024400 	.word	0x58024400
 8103d4c:	081091e8 	.word	0x081091e8

08103d50 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8103d50:	b480      	push	{r7}
 8103d52:	b089      	sub	sp, #36	@ 0x24
 8103d54:	af00      	add	r7, sp, #0
 8103d56:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103d58:	4ba1      	ldr	r3, [pc, #644]	@ (8103fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103d5c:	f003 0303 	and.w	r3, r3, #3
 8103d60:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8103d62:	4b9f      	ldr	r3, [pc, #636]	@ (8103fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103d66:	0b1b      	lsrs	r3, r3, #12
 8103d68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8103d6c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8103d6e:	4b9c      	ldr	r3, [pc, #624]	@ (8103fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103d72:	091b      	lsrs	r3, r3, #4
 8103d74:	f003 0301 	and.w	r3, r3, #1
 8103d78:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8103d7a:	4b99      	ldr	r3, [pc, #612]	@ (8103fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103d7e:	08db      	lsrs	r3, r3, #3
 8103d80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103d84:	693a      	ldr	r2, [r7, #16]
 8103d86:	fb02 f303 	mul.w	r3, r2, r3
 8103d8a:	ee07 3a90 	vmov	s15, r3
 8103d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103d92:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8103d96:	697b      	ldr	r3, [r7, #20]
 8103d98:	2b00      	cmp	r3, #0
 8103d9a:	f000 8111 	beq.w	8103fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8103d9e:	69bb      	ldr	r3, [r7, #24]
 8103da0:	2b02      	cmp	r3, #2
 8103da2:	f000 8083 	beq.w	8103eac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8103da6:	69bb      	ldr	r3, [r7, #24]
 8103da8:	2b02      	cmp	r3, #2
 8103daa:	f200 80a1 	bhi.w	8103ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8103dae:	69bb      	ldr	r3, [r7, #24]
 8103db0:	2b00      	cmp	r3, #0
 8103db2:	d003      	beq.n	8103dbc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8103db4:	69bb      	ldr	r3, [r7, #24]
 8103db6:	2b01      	cmp	r3, #1
 8103db8:	d056      	beq.n	8103e68 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8103dba:	e099      	b.n	8103ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103dbc:	4b88      	ldr	r3, [pc, #544]	@ (8103fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103dbe:	681b      	ldr	r3, [r3, #0]
 8103dc0:	f003 0320 	and.w	r3, r3, #32
 8103dc4:	2b00      	cmp	r3, #0
 8103dc6:	d02d      	beq.n	8103e24 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103dc8:	4b85      	ldr	r3, [pc, #532]	@ (8103fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103dca:	681b      	ldr	r3, [r3, #0]
 8103dcc:	08db      	lsrs	r3, r3, #3
 8103dce:	f003 0303 	and.w	r3, r3, #3
 8103dd2:	4a84      	ldr	r2, [pc, #528]	@ (8103fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8103dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8103dd8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8103dda:	68bb      	ldr	r3, [r7, #8]
 8103ddc:	ee07 3a90 	vmov	s15, r3
 8103de0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103de4:	697b      	ldr	r3, [r7, #20]
 8103de6:	ee07 3a90 	vmov	s15, r3
 8103dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103df2:	4b7b      	ldr	r3, [pc, #492]	@ (8103fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103dfa:	ee07 3a90 	vmov	s15, r3
 8103dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8103e06:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8103fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8103e22:	e087      	b.n	8103f34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8103e24:	697b      	ldr	r3, [r7, #20]
 8103e26:	ee07 3a90 	vmov	s15, r3
 8103e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e2e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8103fec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8103e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103e36:	4b6a      	ldr	r3, [pc, #424]	@ (8103fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103e3e:	ee07 3a90 	vmov	s15, r3
 8103e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8103e4a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8103fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103e62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103e66:	e065      	b.n	8103f34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8103e68:	697b      	ldr	r3, [r7, #20]
 8103e6a:	ee07 3a90 	vmov	s15, r3
 8103e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103e72:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8103ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103e7a:	4b59      	ldr	r3, [pc, #356]	@ (8103fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103e82:	ee07 3a90 	vmov	s15, r3
 8103e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8103e8e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8103fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103eaa:	e043      	b.n	8103f34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8103eac:	697b      	ldr	r3, [r7, #20]
 8103eae:	ee07 3a90 	vmov	s15, r3
 8103eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103eb6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8103ff4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8103eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103ebe:	4b48      	ldr	r3, [pc, #288]	@ (8103fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103ec6:	ee07 3a90 	vmov	s15, r3
 8103eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8103ed2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8103fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103eea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103eee:	e021      	b.n	8103f34 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8103ef0:	697b      	ldr	r3, [r7, #20]
 8103ef2:	ee07 3a90 	vmov	s15, r3
 8103ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103efa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8103ff0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103f02:	4b37      	ldr	r3, [pc, #220]	@ (8103fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103f0a:	ee07 3a90 	vmov	s15, r3
 8103f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8103f16:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8103fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103f32:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8103f34:	4b2a      	ldr	r3, [pc, #168]	@ (8103fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103f38:	0a5b      	lsrs	r3, r3, #9
 8103f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103f3e:	ee07 3a90 	vmov	s15, r3
 8103f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103f4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103f4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8103f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103f5a:	ee17 2a90 	vmov	r2, s15
 8103f5e:	687b      	ldr	r3, [r7, #4]
 8103f60:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8103f62:	4b1f      	ldr	r3, [pc, #124]	@ (8103fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103f66:	0c1b      	lsrs	r3, r3, #16
 8103f68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103f6c:	ee07 3a90 	vmov	s15, r3
 8103f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103f74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103f78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103f7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8103f80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103f88:	ee17 2a90 	vmov	r2, s15
 8103f8c:	687b      	ldr	r3, [r7, #4]
 8103f8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8103f90:	4b13      	ldr	r3, [pc, #76]	@ (8103fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103f94:	0e1b      	lsrs	r3, r3, #24
 8103f96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103f9a:	ee07 3a90 	vmov	s15, r3
 8103f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103fa2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8103fa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8103fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103fb6:	ee17 2a90 	vmov	r2, s15
 8103fba:	687b      	ldr	r3, [r7, #4]
 8103fbc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8103fbe:	e008      	b.n	8103fd2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8103fc0:	687b      	ldr	r3, [r7, #4]
 8103fc2:	2200      	movs	r2, #0
 8103fc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8103fc6:	687b      	ldr	r3, [r7, #4]
 8103fc8:	2200      	movs	r2, #0
 8103fca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8103fcc:	687b      	ldr	r3, [r7, #4]
 8103fce:	2200      	movs	r2, #0
 8103fd0:	609a      	str	r2, [r3, #8]
}
 8103fd2:	bf00      	nop
 8103fd4:	3724      	adds	r7, #36	@ 0x24
 8103fd6:	46bd      	mov	sp, r7
 8103fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103fdc:	4770      	bx	lr
 8103fde:	bf00      	nop
 8103fe0:	58024400 	.word	0x58024400
 8103fe4:	03d09000 	.word	0x03d09000
 8103fe8:	46000000 	.word	0x46000000
 8103fec:	4c742400 	.word	0x4c742400
 8103ff0:	4a742400 	.word	0x4a742400
 8103ff4:	4bbebc20 	.word	0x4bbebc20

08103ff8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8103ff8:	b480      	push	{r7}
 8103ffa:	b089      	sub	sp, #36	@ 0x24
 8103ffc:	af00      	add	r7, sp, #0
 8103ffe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104000:	4ba1      	ldr	r3, [pc, #644]	@ (8104288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104004:	f003 0303 	and.w	r3, r3, #3
 8104008:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810400a:	4b9f      	ldr	r3, [pc, #636]	@ (8104288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810400c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810400e:	0d1b      	lsrs	r3, r3, #20
 8104010:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8104014:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8104016:	4b9c      	ldr	r3, [pc, #624]	@ (8104288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810401a:	0a1b      	lsrs	r3, r3, #8
 810401c:	f003 0301 	and.w	r3, r3, #1
 8104020:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8104022:	4b99      	ldr	r3, [pc, #612]	@ (8104288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104026:	08db      	lsrs	r3, r3, #3
 8104028:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810402c:	693a      	ldr	r2, [r7, #16]
 810402e:	fb02 f303 	mul.w	r3, r2, r3
 8104032:	ee07 3a90 	vmov	s15, r3
 8104036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810403a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810403e:	697b      	ldr	r3, [r7, #20]
 8104040:	2b00      	cmp	r3, #0
 8104042:	f000 8111 	beq.w	8104268 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8104046:	69bb      	ldr	r3, [r7, #24]
 8104048:	2b02      	cmp	r3, #2
 810404a:	f000 8083 	beq.w	8104154 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810404e:	69bb      	ldr	r3, [r7, #24]
 8104050:	2b02      	cmp	r3, #2
 8104052:	f200 80a1 	bhi.w	8104198 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8104056:	69bb      	ldr	r3, [r7, #24]
 8104058:	2b00      	cmp	r3, #0
 810405a:	d003      	beq.n	8104064 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810405c:	69bb      	ldr	r3, [r7, #24]
 810405e:	2b01      	cmp	r3, #1
 8104060:	d056      	beq.n	8104110 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8104062:	e099      	b.n	8104198 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104064:	4b88      	ldr	r3, [pc, #544]	@ (8104288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104066:	681b      	ldr	r3, [r3, #0]
 8104068:	f003 0320 	and.w	r3, r3, #32
 810406c:	2b00      	cmp	r3, #0
 810406e:	d02d      	beq.n	81040cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104070:	4b85      	ldr	r3, [pc, #532]	@ (8104288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104072:	681b      	ldr	r3, [r3, #0]
 8104074:	08db      	lsrs	r3, r3, #3
 8104076:	f003 0303 	and.w	r3, r3, #3
 810407a:	4a84      	ldr	r2, [pc, #528]	@ (810428c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810407c:	fa22 f303 	lsr.w	r3, r2, r3
 8104080:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104082:	68bb      	ldr	r3, [r7, #8]
 8104084:	ee07 3a90 	vmov	s15, r3
 8104088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810408c:	697b      	ldr	r3, [r7, #20]
 810408e:	ee07 3a90 	vmov	s15, r3
 8104092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810409a:	4b7b      	ldr	r3, [pc, #492]	@ (8104288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810409e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81040a2:	ee07 3a90 	vmov	s15, r3
 81040a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81040aa:	ed97 6a03 	vldr	s12, [r7, #12]
 81040ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8104290 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81040b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81040b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81040ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81040be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81040c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81040c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81040ca:	e087      	b.n	81041dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81040cc:	697b      	ldr	r3, [r7, #20]
 81040ce:	ee07 3a90 	vmov	s15, r3
 81040d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81040d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8104294 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81040da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81040de:	4b6a      	ldr	r3, [pc, #424]	@ (8104288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81040e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81040e6:	ee07 3a90 	vmov	s15, r3
 81040ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81040ee:	ed97 6a03 	vldr	s12, [r7, #12]
 81040f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8104290 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81040f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81040fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81040fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104106:	ee67 7a27 	vmul.f32	s15, s14, s15
 810410a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810410e:	e065      	b.n	81041dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104110:	697b      	ldr	r3, [r7, #20]
 8104112:	ee07 3a90 	vmov	s15, r3
 8104116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810411a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8104298 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810411e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104122:	4b59      	ldr	r3, [pc, #356]	@ (8104288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810412a:	ee07 3a90 	vmov	s15, r3
 810412e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104132:	ed97 6a03 	vldr	s12, [r7, #12]
 8104136:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8104290 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810413a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810413e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8104146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810414a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810414e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104152:	e043      	b.n	81041dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104154:	697b      	ldr	r3, [r7, #20]
 8104156:	ee07 3a90 	vmov	s15, r3
 810415a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810415e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 810429c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8104162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104166:	4b48      	ldr	r3, [pc, #288]	@ (8104288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810416a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810416e:	ee07 3a90 	vmov	s15, r3
 8104172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104176:	ed97 6a03 	vldr	s12, [r7, #12]
 810417a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8104290 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810417e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810418a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810418e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104196:	e021      	b.n	81041dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104198:	697b      	ldr	r3, [r7, #20]
 810419a:	ee07 3a90 	vmov	s15, r3
 810419e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81041a2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8104298 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81041a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81041aa:	4b37      	ldr	r3, [pc, #220]	@ (8104288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81041ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81041b2:	ee07 3a90 	vmov	s15, r3
 81041b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81041ba:	ed97 6a03 	vldr	s12, [r7, #12]
 81041be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8104290 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81041c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81041c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81041ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81041ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81041d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81041d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81041da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81041dc:	4b2a      	ldr	r3, [pc, #168]	@ (8104288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81041de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81041e0:	0a5b      	lsrs	r3, r3, #9
 81041e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81041e6:	ee07 3a90 	vmov	s15, r3
 81041ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81041ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81041f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81041f6:	edd7 6a07 	vldr	s13, [r7, #28]
 81041fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81041fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104202:	ee17 2a90 	vmov	r2, s15
 8104206:	687b      	ldr	r3, [r7, #4]
 8104208:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810420a:	4b1f      	ldr	r3, [pc, #124]	@ (8104288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810420c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810420e:	0c1b      	lsrs	r3, r3, #16
 8104210:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104214:	ee07 3a90 	vmov	s15, r3
 8104218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810421c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8104220:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104224:	edd7 6a07 	vldr	s13, [r7, #28]
 8104228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810422c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104230:	ee17 2a90 	vmov	r2, s15
 8104234:	687b      	ldr	r3, [r7, #4]
 8104236:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8104238:	4b13      	ldr	r3, [pc, #76]	@ (8104288 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810423a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810423c:	0e1b      	lsrs	r3, r3, #24
 810423e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8104242:	ee07 3a90 	vmov	s15, r3
 8104246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810424a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810424e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104252:	edd7 6a07 	vldr	s13, [r7, #28]
 8104256:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810425a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810425e:	ee17 2a90 	vmov	r2, s15
 8104262:	687b      	ldr	r3, [r7, #4]
 8104264:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8104266:	e008      	b.n	810427a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8104268:	687b      	ldr	r3, [r7, #4]
 810426a:	2200      	movs	r2, #0
 810426c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810426e:	687b      	ldr	r3, [r7, #4]
 8104270:	2200      	movs	r2, #0
 8104272:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8104274:	687b      	ldr	r3, [r7, #4]
 8104276:	2200      	movs	r2, #0
 8104278:	609a      	str	r2, [r3, #8]
}
 810427a:	bf00      	nop
 810427c:	3724      	adds	r7, #36	@ 0x24
 810427e:	46bd      	mov	sp, r7
 8104280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104284:	4770      	bx	lr
 8104286:	bf00      	nop
 8104288:	58024400 	.word	0x58024400
 810428c:	03d09000 	.word	0x03d09000
 8104290:	46000000 	.word	0x46000000
 8104294:	4c742400 	.word	0x4c742400
 8104298:	4a742400 	.word	0x4a742400
 810429c:	4bbebc20 	.word	0x4bbebc20

081042a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81042a0:	b580      	push	{r7, lr}
 81042a2:	b084      	sub	sp, #16
 81042a4:	af00      	add	r7, sp, #0
 81042a6:	6078      	str	r0, [r7, #4]
 81042a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81042aa:	2300      	movs	r3, #0
 81042ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81042ae:	4b54      	ldr	r3, [pc, #336]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 81042b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81042b2:	f003 0303 	and.w	r3, r3, #3
 81042b6:	2b03      	cmp	r3, #3
 81042b8:	d101      	bne.n	81042be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81042ba:	2301      	movs	r3, #1
 81042bc:	e09b      	b.n	81043f6 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81042be:	4b50      	ldr	r3, [pc, #320]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 81042c0:	681b      	ldr	r3, [r3, #0]
 81042c2:	4a4f      	ldr	r2, [pc, #316]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 81042c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 81042c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81042ca:	f7fd fdbd 	bl	8101e48 <HAL_GetTick>
 81042ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81042d0:	e008      	b.n	81042e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81042d2:	f7fd fdb9 	bl	8101e48 <HAL_GetTick>
 81042d6:	4602      	mov	r2, r0
 81042d8:	68bb      	ldr	r3, [r7, #8]
 81042da:	1ad3      	subs	r3, r2, r3
 81042dc:	2b02      	cmp	r3, #2
 81042de:	d901      	bls.n	81042e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81042e0:	2303      	movs	r3, #3
 81042e2:	e088      	b.n	81043f6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81042e4:	4b46      	ldr	r3, [pc, #280]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 81042e6:	681b      	ldr	r3, [r3, #0]
 81042e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81042ec:	2b00      	cmp	r3, #0
 81042ee:	d1f0      	bne.n	81042d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81042f0:	4b43      	ldr	r3, [pc, #268]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 81042f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81042f4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 81042f8:	687b      	ldr	r3, [r7, #4]
 81042fa:	681b      	ldr	r3, [r3, #0]
 81042fc:	031b      	lsls	r3, r3, #12
 81042fe:	4940      	ldr	r1, [pc, #256]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 8104300:	4313      	orrs	r3, r2
 8104302:	628b      	str	r3, [r1, #40]	@ 0x28
 8104304:	687b      	ldr	r3, [r7, #4]
 8104306:	685b      	ldr	r3, [r3, #4]
 8104308:	3b01      	subs	r3, #1
 810430a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810430e:	687b      	ldr	r3, [r7, #4]
 8104310:	689b      	ldr	r3, [r3, #8]
 8104312:	3b01      	subs	r3, #1
 8104314:	025b      	lsls	r3, r3, #9
 8104316:	b29b      	uxth	r3, r3
 8104318:	431a      	orrs	r2, r3
 810431a:	687b      	ldr	r3, [r7, #4]
 810431c:	68db      	ldr	r3, [r3, #12]
 810431e:	3b01      	subs	r3, #1
 8104320:	041b      	lsls	r3, r3, #16
 8104322:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8104326:	431a      	orrs	r2, r3
 8104328:	687b      	ldr	r3, [r7, #4]
 810432a:	691b      	ldr	r3, [r3, #16]
 810432c:	3b01      	subs	r3, #1
 810432e:	061b      	lsls	r3, r3, #24
 8104330:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8104334:	4932      	ldr	r1, [pc, #200]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 8104336:	4313      	orrs	r3, r2
 8104338:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810433a:	4b31      	ldr	r3, [pc, #196]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 810433c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810433e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8104342:	687b      	ldr	r3, [r7, #4]
 8104344:	695b      	ldr	r3, [r3, #20]
 8104346:	492e      	ldr	r1, [pc, #184]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 8104348:	4313      	orrs	r3, r2
 810434a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810434c:	4b2c      	ldr	r3, [pc, #176]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 810434e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104350:	f023 0220 	bic.w	r2, r3, #32
 8104354:	687b      	ldr	r3, [r7, #4]
 8104356:	699b      	ldr	r3, [r3, #24]
 8104358:	4929      	ldr	r1, [pc, #164]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 810435a:	4313      	orrs	r3, r2
 810435c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810435e:	4b28      	ldr	r3, [pc, #160]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 8104360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104362:	4a27      	ldr	r2, [pc, #156]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 8104364:	f023 0310 	bic.w	r3, r3, #16
 8104368:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810436a:	4b25      	ldr	r3, [pc, #148]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 810436c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810436e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8104372:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8104376:	687a      	ldr	r2, [r7, #4]
 8104378:	69d2      	ldr	r2, [r2, #28]
 810437a:	00d2      	lsls	r2, r2, #3
 810437c:	4920      	ldr	r1, [pc, #128]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 810437e:	4313      	orrs	r3, r2
 8104380:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8104382:	4b1f      	ldr	r3, [pc, #124]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 8104384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104386:	4a1e      	ldr	r2, [pc, #120]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 8104388:	f043 0310 	orr.w	r3, r3, #16
 810438c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810438e:	683b      	ldr	r3, [r7, #0]
 8104390:	2b00      	cmp	r3, #0
 8104392:	d106      	bne.n	81043a2 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104394:	4b1a      	ldr	r3, [pc, #104]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 8104396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104398:	4a19      	ldr	r2, [pc, #100]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 810439a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810439e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81043a0:	e00f      	b.n	81043c2 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81043a2:	683b      	ldr	r3, [r7, #0]
 81043a4:	2b01      	cmp	r3, #1
 81043a6:	d106      	bne.n	81043b6 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81043a8:	4b15      	ldr	r3, [pc, #84]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 81043aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81043ac:	4a14      	ldr	r2, [pc, #80]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 81043ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81043b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81043b4:	e005      	b.n	81043c2 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81043b6:	4b12      	ldr	r3, [pc, #72]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 81043b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81043ba:	4a11      	ldr	r2, [pc, #68]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 81043bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 81043c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81043c2:	4b0f      	ldr	r3, [pc, #60]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 81043c4:	681b      	ldr	r3, [r3, #0]
 81043c6:	4a0e      	ldr	r2, [pc, #56]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 81043c8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 81043cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81043ce:	f7fd fd3b 	bl	8101e48 <HAL_GetTick>
 81043d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81043d4:	e008      	b.n	81043e8 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81043d6:	f7fd fd37 	bl	8101e48 <HAL_GetTick>
 81043da:	4602      	mov	r2, r0
 81043dc:	68bb      	ldr	r3, [r7, #8]
 81043de:	1ad3      	subs	r3, r2, r3
 81043e0:	2b02      	cmp	r3, #2
 81043e2:	d901      	bls.n	81043e8 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81043e4:	2303      	movs	r3, #3
 81043e6:	e006      	b.n	81043f6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81043e8:	4b05      	ldr	r3, [pc, #20]	@ (8104400 <RCCEx_PLL2_Config+0x160>)
 81043ea:	681b      	ldr	r3, [r3, #0]
 81043ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81043f0:	2b00      	cmp	r3, #0
 81043f2:	d0f0      	beq.n	81043d6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81043f4:	7bfb      	ldrb	r3, [r7, #15]
}
 81043f6:	4618      	mov	r0, r3
 81043f8:	3710      	adds	r7, #16
 81043fa:	46bd      	mov	sp, r7
 81043fc:	bd80      	pop	{r7, pc}
 81043fe:	bf00      	nop
 8104400:	58024400 	.word	0x58024400

08104404 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104404:	b580      	push	{r7, lr}
 8104406:	b084      	sub	sp, #16
 8104408:	af00      	add	r7, sp, #0
 810440a:	6078      	str	r0, [r7, #4]
 810440c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810440e:	2300      	movs	r3, #0
 8104410:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104412:	4b54      	ldr	r3, [pc, #336]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 8104414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104416:	f003 0303 	and.w	r3, r3, #3
 810441a:	2b03      	cmp	r3, #3
 810441c:	d101      	bne.n	8104422 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810441e:	2301      	movs	r3, #1
 8104420:	e09b      	b.n	810455a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8104422:	4b50      	ldr	r3, [pc, #320]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 8104424:	681b      	ldr	r3, [r3, #0]
 8104426:	4a4f      	ldr	r2, [pc, #316]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 8104428:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810442c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810442e:	f7fd fd0b 	bl	8101e48 <HAL_GetTick>
 8104432:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104434:	e008      	b.n	8104448 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8104436:	f7fd fd07 	bl	8101e48 <HAL_GetTick>
 810443a:	4602      	mov	r2, r0
 810443c:	68bb      	ldr	r3, [r7, #8]
 810443e:	1ad3      	subs	r3, r2, r3
 8104440:	2b02      	cmp	r3, #2
 8104442:	d901      	bls.n	8104448 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104444:	2303      	movs	r3, #3
 8104446:	e088      	b.n	810455a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104448:	4b46      	ldr	r3, [pc, #280]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 810444a:	681b      	ldr	r3, [r3, #0]
 810444c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104450:	2b00      	cmp	r3, #0
 8104452:	d1f0      	bne.n	8104436 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8104454:	4b43      	ldr	r3, [pc, #268]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 8104456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104458:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 810445c:	687b      	ldr	r3, [r7, #4]
 810445e:	681b      	ldr	r3, [r3, #0]
 8104460:	051b      	lsls	r3, r3, #20
 8104462:	4940      	ldr	r1, [pc, #256]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 8104464:	4313      	orrs	r3, r2
 8104466:	628b      	str	r3, [r1, #40]	@ 0x28
 8104468:	687b      	ldr	r3, [r7, #4]
 810446a:	685b      	ldr	r3, [r3, #4]
 810446c:	3b01      	subs	r3, #1
 810446e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104472:	687b      	ldr	r3, [r7, #4]
 8104474:	689b      	ldr	r3, [r3, #8]
 8104476:	3b01      	subs	r3, #1
 8104478:	025b      	lsls	r3, r3, #9
 810447a:	b29b      	uxth	r3, r3
 810447c:	431a      	orrs	r2, r3
 810447e:	687b      	ldr	r3, [r7, #4]
 8104480:	68db      	ldr	r3, [r3, #12]
 8104482:	3b01      	subs	r3, #1
 8104484:	041b      	lsls	r3, r3, #16
 8104486:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810448a:	431a      	orrs	r2, r3
 810448c:	687b      	ldr	r3, [r7, #4]
 810448e:	691b      	ldr	r3, [r3, #16]
 8104490:	3b01      	subs	r3, #1
 8104492:	061b      	lsls	r3, r3, #24
 8104494:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8104498:	4932      	ldr	r1, [pc, #200]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 810449a:	4313      	orrs	r3, r2
 810449c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810449e:	4b31      	ldr	r3, [pc, #196]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 81044a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81044a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 81044a6:	687b      	ldr	r3, [r7, #4]
 81044a8:	695b      	ldr	r3, [r3, #20]
 81044aa:	492e      	ldr	r1, [pc, #184]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 81044ac:	4313      	orrs	r3, r2
 81044ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81044b0:	4b2c      	ldr	r3, [pc, #176]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 81044b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81044b4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 81044b8:	687b      	ldr	r3, [r7, #4]
 81044ba:	699b      	ldr	r3, [r3, #24]
 81044bc:	4929      	ldr	r1, [pc, #164]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 81044be:	4313      	orrs	r3, r2
 81044c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81044c2:	4b28      	ldr	r3, [pc, #160]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 81044c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81044c6:	4a27      	ldr	r2, [pc, #156]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 81044c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81044cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81044ce:	4b25      	ldr	r3, [pc, #148]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 81044d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81044d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81044d6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81044da:	687a      	ldr	r2, [r7, #4]
 81044dc:	69d2      	ldr	r2, [r2, #28]
 81044de:	00d2      	lsls	r2, r2, #3
 81044e0:	4920      	ldr	r1, [pc, #128]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 81044e2:	4313      	orrs	r3, r2
 81044e4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81044e6:	4b1f      	ldr	r3, [pc, #124]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 81044e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81044ea:	4a1e      	ldr	r2, [pc, #120]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 81044ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81044f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81044f2:	683b      	ldr	r3, [r7, #0]
 81044f4:	2b00      	cmp	r3, #0
 81044f6:	d106      	bne.n	8104506 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81044f8:	4b1a      	ldr	r3, [pc, #104]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 81044fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81044fc:	4a19      	ldr	r2, [pc, #100]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 81044fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8104502:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104504:	e00f      	b.n	8104526 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8104506:	683b      	ldr	r3, [r7, #0]
 8104508:	2b01      	cmp	r3, #1
 810450a:	d106      	bne.n	810451a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810450c:	4b15      	ldr	r3, [pc, #84]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 810450e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104510:	4a14      	ldr	r2, [pc, #80]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 8104512:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8104516:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104518:	e005      	b.n	8104526 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810451a:	4b12      	ldr	r3, [pc, #72]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 810451c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810451e:	4a11      	ldr	r2, [pc, #68]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 8104520:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8104524:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8104526:	4b0f      	ldr	r3, [pc, #60]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 8104528:	681b      	ldr	r3, [r3, #0]
 810452a:	4a0e      	ldr	r2, [pc, #56]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 810452c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8104530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104532:	f7fd fc89 	bl	8101e48 <HAL_GetTick>
 8104536:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104538:	e008      	b.n	810454c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810453a:	f7fd fc85 	bl	8101e48 <HAL_GetTick>
 810453e:	4602      	mov	r2, r0
 8104540:	68bb      	ldr	r3, [r7, #8]
 8104542:	1ad3      	subs	r3, r2, r3
 8104544:	2b02      	cmp	r3, #2
 8104546:	d901      	bls.n	810454c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104548:	2303      	movs	r3, #3
 810454a:	e006      	b.n	810455a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810454c:	4b05      	ldr	r3, [pc, #20]	@ (8104564 <RCCEx_PLL3_Config+0x160>)
 810454e:	681b      	ldr	r3, [r3, #0]
 8104550:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104554:	2b00      	cmp	r3, #0
 8104556:	d0f0      	beq.n	810453a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8104558:	7bfb      	ldrb	r3, [r7, #15]
}
 810455a:	4618      	mov	r0, r3
 810455c:	3710      	adds	r7, #16
 810455e:	46bd      	mov	sp, r7
 8104560:	bd80      	pop	{r7, pc}
 8104562:	bf00      	nop
 8104564:	58024400 	.word	0x58024400

08104568 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8104568:	b580      	push	{r7, lr}
 810456a:	b084      	sub	sp, #16
 810456c:	af00      	add	r7, sp, #0
 810456e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8104570:	687b      	ldr	r3, [r7, #4]
 8104572:	2b00      	cmp	r3, #0
 8104574:	d101      	bne.n	810457a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8104576:	2301      	movs	r3, #1
 8104578:	e10f      	b.n	810479a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810457a:	687b      	ldr	r3, [r7, #4]
 810457c:	2200      	movs	r2, #0
 810457e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8104580:	687b      	ldr	r3, [r7, #4]
 8104582:	681b      	ldr	r3, [r3, #0]
 8104584:	4a87      	ldr	r2, [pc, #540]	@ (81047a4 <HAL_SPI_Init+0x23c>)
 8104586:	4293      	cmp	r3, r2
 8104588:	d00f      	beq.n	81045aa <HAL_SPI_Init+0x42>
 810458a:	687b      	ldr	r3, [r7, #4]
 810458c:	681b      	ldr	r3, [r3, #0]
 810458e:	4a86      	ldr	r2, [pc, #536]	@ (81047a8 <HAL_SPI_Init+0x240>)
 8104590:	4293      	cmp	r3, r2
 8104592:	d00a      	beq.n	81045aa <HAL_SPI_Init+0x42>
 8104594:	687b      	ldr	r3, [r7, #4]
 8104596:	681b      	ldr	r3, [r3, #0]
 8104598:	4a84      	ldr	r2, [pc, #528]	@ (81047ac <HAL_SPI_Init+0x244>)
 810459a:	4293      	cmp	r3, r2
 810459c:	d005      	beq.n	81045aa <HAL_SPI_Init+0x42>
 810459e:	687b      	ldr	r3, [r7, #4]
 81045a0:	68db      	ldr	r3, [r3, #12]
 81045a2:	2b0f      	cmp	r3, #15
 81045a4:	d901      	bls.n	81045aa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 81045a6:	2301      	movs	r3, #1
 81045a8:	e0f7      	b.n	810479a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 81045aa:	6878      	ldr	r0, [r7, #4]
 81045ac:	f000 fe29 	bl	8105202 <SPI_GetPacketSize>
 81045b0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81045b2:	687b      	ldr	r3, [r7, #4]
 81045b4:	681b      	ldr	r3, [r3, #0]
 81045b6:	4a7b      	ldr	r2, [pc, #492]	@ (81047a4 <HAL_SPI_Init+0x23c>)
 81045b8:	4293      	cmp	r3, r2
 81045ba:	d00c      	beq.n	81045d6 <HAL_SPI_Init+0x6e>
 81045bc:	687b      	ldr	r3, [r7, #4]
 81045be:	681b      	ldr	r3, [r3, #0]
 81045c0:	4a79      	ldr	r2, [pc, #484]	@ (81047a8 <HAL_SPI_Init+0x240>)
 81045c2:	4293      	cmp	r3, r2
 81045c4:	d007      	beq.n	81045d6 <HAL_SPI_Init+0x6e>
 81045c6:	687b      	ldr	r3, [r7, #4]
 81045c8:	681b      	ldr	r3, [r3, #0]
 81045ca:	4a78      	ldr	r2, [pc, #480]	@ (81047ac <HAL_SPI_Init+0x244>)
 81045cc:	4293      	cmp	r3, r2
 81045ce:	d002      	beq.n	81045d6 <HAL_SPI_Init+0x6e>
 81045d0:	68fb      	ldr	r3, [r7, #12]
 81045d2:	2b08      	cmp	r3, #8
 81045d4:	d811      	bhi.n	81045fa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81045d6:	687b      	ldr	r3, [r7, #4]
 81045d8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 81045da:	4a72      	ldr	r2, [pc, #456]	@ (81047a4 <HAL_SPI_Init+0x23c>)
 81045dc:	4293      	cmp	r3, r2
 81045de:	d009      	beq.n	81045f4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 81045e0:	687b      	ldr	r3, [r7, #4]
 81045e2:	681b      	ldr	r3, [r3, #0]
 81045e4:	4a70      	ldr	r2, [pc, #448]	@ (81047a8 <HAL_SPI_Init+0x240>)
 81045e6:	4293      	cmp	r3, r2
 81045e8:	d004      	beq.n	81045f4 <HAL_SPI_Init+0x8c>
 81045ea:	687b      	ldr	r3, [r7, #4]
 81045ec:	681b      	ldr	r3, [r3, #0]
 81045ee:	4a6f      	ldr	r2, [pc, #444]	@ (81047ac <HAL_SPI_Init+0x244>)
 81045f0:	4293      	cmp	r3, r2
 81045f2:	d104      	bne.n	81045fe <HAL_SPI_Init+0x96>
 81045f4:	68fb      	ldr	r3, [r7, #12]
 81045f6:	2b10      	cmp	r3, #16
 81045f8:	d901      	bls.n	81045fe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 81045fa:	2301      	movs	r3, #1
 81045fc:	e0cd      	b.n	810479a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 81045fe:	687b      	ldr	r3, [r7, #4]
 8104600:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8104604:	b2db      	uxtb	r3, r3
 8104606:	2b00      	cmp	r3, #0
 8104608:	d106      	bne.n	8104618 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810460a:	687b      	ldr	r3, [r7, #4]
 810460c:	2200      	movs	r2, #0
 810460e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8104612:	6878      	ldr	r0, [r7, #4]
 8104614:	f7fd f8d6 	bl	81017c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8104618:	687b      	ldr	r3, [r7, #4]
 810461a:	2202      	movs	r2, #2
 810461c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8104620:	687b      	ldr	r3, [r7, #4]
 8104622:	681b      	ldr	r3, [r3, #0]
 8104624:	681a      	ldr	r2, [r3, #0]
 8104626:	687b      	ldr	r3, [r7, #4]
 8104628:	681b      	ldr	r3, [r3, #0]
 810462a:	f022 0201 	bic.w	r2, r2, #1
 810462e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8104630:	687b      	ldr	r3, [r7, #4]
 8104632:	681b      	ldr	r3, [r3, #0]
 8104634:	689b      	ldr	r3, [r3, #8]
 8104636:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 810463a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 810463c:	687b      	ldr	r3, [r7, #4]
 810463e:	699b      	ldr	r3, [r3, #24]
 8104640:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8104644:	d119      	bne.n	810467a <HAL_SPI_Init+0x112>
 8104646:	687b      	ldr	r3, [r7, #4]
 8104648:	685b      	ldr	r3, [r3, #4]
 810464a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810464e:	d103      	bne.n	8104658 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8104650:	687b      	ldr	r3, [r7, #4]
 8104652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8104654:	2b00      	cmp	r3, #0
 8104656:	d008      	beq.n	810466a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8104658:	687b      	ldr	r3, [r7, #4]
 810465a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810465c:	2b00      	cmp	r3, #0
 810465e:	d10c      	bne.n	810467a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8104660:	687b      	ldr	r3, [r7, #4]
 8104662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8104664:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8104668:	d107      	bne.n	810467a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810466a:	687b      	ldr	r3, [r7, #4]
 810466c:	681b      	ldr	r3, [r3, #0]
 810466e:	681a      	ldr	r2, [r3, #0]
 8104670:	687b      	ldr	r3, [r7, #4]
 8104672:	681b      	ldr	r3, [r3, #0]
 8104674:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8104678:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 810467a:	687b      	ldr	r3, [r7, #4]
 810467c:	685b      	ldr	r3, [r3, #4]
 810467e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8104682:	2b00      	cmp	r3, #0
 8104684:	d00f      	beq.n	81046a6 <HAL_SPI_Init+0x13e>
 8104686:	687b      	ldr	r3, [r7, #4]
 8104688:	68db      	ldr	r3, [r3, #12]
 810468a:	2b06      	cmp	r3, #6
 810468c:	d90b      	bls.n	81046a6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 810468e:	687b      	ldr	r3, [r7, #4]
 8104690:	681b      	ldr	r3, [r3, #0]
 8104692:	681b      	ldr	r3, [r3, #0]
 8104694:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8104698:	687b      	ldr	r3, [r7, #4]
 810469a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810469c:	687b      	ldr	r3, [r7, #4]
 810469e:	681b      	ldr	r3, [r3, #0]
 81046a0:	430a      	orrs	r2, r1
 81046a2:	601a      	str	r2, [r3, #0]
 81046a4:	e007      	b.n	81046b6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 81046a6:	687b      	ldr	r3, [r7, #4]
 81046a8:	681b      	ldr	r3, [r3, #0]
 81046aa:	681a      	ldr	r2, [r3, #0]
 81046ac:	687b      	ldr	r3, [r7, #4]
 81046ae:	681b      	ldr	r3, [r3, #0]
 81046b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 81046b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 81046b6:	687b      	ldr	r3, [r7, #4]
 81046b8:	69da      	ldr	r2, [r3, #28]
 81046ba:	687b      	ldr	r3, [r7, #4]
 81046bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81046be:	431a      	orrs	r2, r3
 81046c0:	68bb      	ldr	r3, [r7, #8]
 81046c2:	431a      	orrs	r2, r3
 81046c4:	687b      	ldr	r3, [r7, #4]
 81046c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81046c8:	ea42 0103 	orr.w	r1, r2, r3
 81046cc:	687b      	ldr	r3, [r7, #4]
 81046ce:	68da      	ldr	r2, [r3, #12]
 81046d0:	687b      	ldr	r3, [r7, #4]
 81046d2:	681b      	ldr	r3, [r3, #0]
 81046d4:	430a      	orrs	r2, r1
 81046d6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 81046d8:	687b      	ldr	r3, [r7, #4]
 81046da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81046dc:	687b      	ldr	r3, [r7, #4]
 81046de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81046e0:	431a      	orrs	r2, r3
 81046e2:	687b      	ldr	r3, [r7, #4]
 81046e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81046e6:	431a      	orrs	r2, r3
 81046e8:	687b      	ldr	r3, [r7, #4]
 81046ea:	699b      	ldr	r3, [r3, #24]
 81046ec:	431a      	orrs	r2, r3
 81046ee:	687b      	ldr	r3, [r7, #4]
 81046f0:	691b      	ldr	r3, [r3, #16]
 81046f2:	431a      	orrs	r2, r3
 81046f4:	687b      	ldr	r3, [r7, #4]
 81046f6:	695b      	ldr	r3, [r3, #20]
 81046f8:	431a      	orrs	r2, r3
 81046fa:	687b      	ldr	r3, [r7, #4]
 81046fc:	6a1b      	ldr	r3, [r3, #32]
 81046fe:	431a      	orrs	r2, r3
 8104700:	687b      	ldr	r3, [r7, #4]
 8104702:	685b      	ldr	r3, [r3, #4]
 8104704:	431a      	orrs	r2, r3
 8104706:	687b      	ldr	r3, [r7, #4]
 8104708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810470a:	431a      	orrs	r2, r3
 810470c:	687b      	ldr	r3, [r7, #4]
 810470e:	689b      	ldr	r3, [r3, #8]
 8104710:	431a      	orrs	r2, r3
 8104712:	687b      	ldr	r3, [r7, #4]
 8104714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8104716:	ea42 0103 	orr.w	r1, r2, r3
 810471a:	687b      	ldr	r3, [r7, #4]
 810471c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 810471e:	687b      	ldr	r3, [r7, #4]
 8104720:	681b      	ldr	r3, [r3, #0]
 8104722:	430a      	orrs	r2, r1
 8104724:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8104726:	687b      	ldr	r3, [r7, #4]
 8104728:	685b      	ldr	r3, [r3, #4]
 810472a:	2b00      	cmp	r3, #0
 810472c:	d113      	bne.n	8104756 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810472e:	687b      	ldr	r3, [r7, #4]
 8104730:	681b      	ldr	r3, [r3, #0]
 8104732:	689b      	ldr	r3, [r3, #8]
 8104734:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8104738:	687b      	ldr	r3, [r7, #4]
 810473a:	681b      	ldr	r3, [r3, #0]
 810473c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8104740:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8104742:	687b      	ldr	r3, [r7, #4]
 8104744:	681b      	ldr	r3, [r3, #0]
 8104746:	689b      	ldr	r3, [r3, #8]
 8104748:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 810474c:	687b      	ldr	r3, [r7, #4]
 810474e:	681b      	ldr	r3, [r3, #0]
 8104750:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8104754:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8104756:	687b      	ldr	r3, [r7, #4]
 8104758:	681b      	ldr	r3, [r3, #0]
 810475a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810475c:	687b      	ldr	r3, [r7, #4]
 810475e:	681b      	ldr	r3, [r3, #0]
 8104760:	f022 0201 	bic.w	r2, r2, #1
 8104764:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8104766:	687b      	ldr	r3, [r7, #4]
 8104768:	685b      	ldr	r3, [r3, #4]
 810476a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810476e:	2b00      	cmp	r3, #0
 8104770:	d00a      	beq.n	8104788 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8104772:	687b      	ldr	r3, [r7, #4]
 8104774:	681b      	ldr	r3, [r3, #0]
 8104776:	68db      	ldr	r3, [r3, #12]
 8104778:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 810477c:	687b      	ldr	r3, [r7, #4]
 810477e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8104780:	687b      	ldr	r3, [r7, #4]
 8104782:	681b      	ldr	r3, [r3, #0]
 8104784:	430a      	orrs	r2, r1
 8104786:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8104788:	687b      	ldr	r3, [r7, #4]
 810478a:	2200      	movs	r2, #0
 810478c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8104790:	687b      	ldr	r3, [r7, #4]
 8104792:	2201      	movs	r2, #1
 8104794:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8104798:	2300      	movs	r3, #0
}
 810479a:	4618      	mov	r0, r3
 810479c:	3710      	adds	r7, #16
 810479e:	46bd      	mov	sp, r7
 81047a0:	bd80      	pop	{r7, pc}
 81047a2:	bf00      	nop
 81047a4:	40013000 	.word	0x40013000
 81047a8:	40003800 	.word	0x40003800
 81047ac:	40003c00 	.word	0x40003c00

081047b0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81047b0:	b580      	push	{r7, lr}
 81047b2:	b088      	sub	sp, #32
 81047b4:	af02      	add	r7, sp, #8
 81047b6:	60f8      	str	r0, [r7, #12]
 81047b8:	60b9      	str	r1, [r7, #8]
 81047ba:	603b      	str	r3, [r7, #0]
 81047bc:	4613      	mov	r3, r2
 81047be:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 81047c0:	68fb      	ldr	r3, [r7, #12]
 81047c2:	681b      	ldr	r3, [r3, #0]
 81047c4:	3320      	adds	r3, #32
 81047c6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 81047c8:	f7fd fb3e 	bl	8101e48 <HAL_GetTick>
 81047cc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 81047ce:	68fb      	ldr	r3, [r7, #12]
 81047d0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 81047d4:	b2db      	uxtb	r3, r3
 81047d6:	2b01      	cmp	r3, #1
 81047d8:	d001      	beq.n	81047de <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 81047da:	2302      	movs	r3, #2
 81047dc:	e1cf      	b.n	8104b7e <HAL_SPI_Transmit+0x3ce>
  }

  if ((pData == NULL) || (Size == 0UL))
 81047de:	68bb      	ldr	r3, [r7, #8]
 81047e0:	2b00      	cmp	r3, #0
 81047e2:	d002      	beq.n	81047ea <HAL_SPI_Transmit+0x3a>
 81047e4:	88fb      	ldrh	r3, [r7, #6]
 81047e6:	2b00      	cmp	r3, #0
 81047e8:	d101      	bne.n	81047ee <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 81047ea:	2301      	movs	r3, #1
 81047ec:	e1c7      	b.n	8104b7e <HAL_SPI_Transmit+0x3ce>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 81047ee:	68fb      	ldr	r3, [r7, #12]
 81047f0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 81047f4:	2b01      	cmp	r3, #1
 81047f6:	d101      	bne.n	81047fc <HAL_SPI_Transmit+0x4c>
 81047f8:	2302      	movs	r3, #2
 81047fa:	e1c0      	b.n	8104b7e <HAL_SPI_Transmit+0x3ce>
 81047fc:	68fb      	ldr	r3, [r7, #12]
 81047fe:	2201      	movs	r2, #1
 8104800:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8104804:	68fb      	ldr	r3, [r7, #12]
 8104806:	2203      	movs	r2, #3
 8104808:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 810480c:	68fb      	ldr	r3, [r7, #12]
 810480e:	2200      	movs	r2, #0
 8104810:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8104814:	68fb      	ldr	r3, [r7, #12]
 8104816:	68ba      	ldr	r2, [r7, #8]
 8104818:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 810481a:	68fb      	ldr	r3, [r7, #12]
 810481c:	88fa      	ldrh	r2, [r7, #6]
 810481e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8104822:	68fb      	ldr	r3, [r7, #12]
 8104824:	88fa      	ldrh	r2, [r7, #6]
 8104826:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 810482a:	68fb      	ldr	r3, [r7, #12]
 810482c:	2200      	movs	r2, #0
 810482e:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8104830:	68fb      	ldr	r3, [r7, #12]
 8104832:	2200      	movs	r2, #0
 8104834:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8104838:	68fb      	ldr	r3, [r7, #12]
 810483a:	2200      	movs	r2, #0
 810483c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8104840:	68fb      	ldr	r3, [r7, #12]
 8104842:	2200      	movs	r2, #0
 8104844:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8104846:	68fb      	ldr	r3, [r7, #12]
 8104848:	2200      	movs	r2, #0
 810484a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 810484c:	68fb      	ldr	r3, [r7, #12]
 810484e:	689b      	ldr	r3, [r3, #8]
 8104850:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8104854:	d108      	bne.n	8104868 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8104856:	68fb      	ldr	r3, [r7, #12]
 8104858:	681b      	ldr	r3, [r3, #0]
 810485a:	681a      	ldr	r2, [r3, #0]
 810485c:	68fb      	ldr	r3, [r7, #12]
 810485e:	681b      	ldr	r3, [r3, #0]
 8104860:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8104864:	601a      	str	r2, [r3, #0]
 8104866:	e009      	b.n	810487c <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8104868:	68fb      	ldr	r3, [r7, #12]
 810486a:	681b      	ldr	r3, [r3, #0]
 810486c:	68db      	ldr	r3, [r3, #12]
 810486e:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8104872:	68fb      	ldr	r3, [r7, #12]
 8104874:	681b      	ldr	r3, [r3, #0]
 8104876:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 810487a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 810487c:	68fb      	ldr	r3, [r7, #12]
 810487e:	681b      	ldr	r3, [r3, #0]
 8104880:	685b      	ldr	r3, [r3, #4]
 8104882:	0c1b      	lsrs	r3, r3, #16
 8104884:	041b      	lsls	r3, r3, #16
 8104886:	88f9      	ldrh	r1, [r7, #6]
 8104888:	68fa      	ldr	r2, [r7, #12]
 810488a:	6812      	ldr	r2, [r2, #0]
 810488c:	430b      	orrs	r3, r1
 810488e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8104890:	68fb      	ldr	r3, [r7, #12]
 8104892:	681b      	ldr	r3, [r3, #0]
 8104894:	681a      	ldr	r2, [r3, #0]
 8104896:	68fb      	ldr	r3, [r7, #12]
 8104898:	681b      	ldr	r3, [r3, #0]
 810489a:	f042 0201 	orr.w	r2, r2, #1
 810489e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 81048a0:	68fb      	ldr	r3, [r7, #12]
 81048a2:	685b      	ldr	r3, [r3, #4]
 81048a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81048a8:	d107      	bne.n	81048ba <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 81048aa:	68fb      	ldr	r3, [r7, #12]
 81048ac:	681b      	ldr	r3, [r3, #0]
 81048ae:	681a      	ldr	r2, [r3, #0]
 81048b0:	68fb      	ldr	r3, [r7, #12]
 81048b2:	681b      	ldr	r3, [r3, #0]
 81048b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 81048b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 81048ba:	68fb      	ldr	r3, [r7, #12]
 81048bc:	68db      	ldr	r3, [r3, #12]
 81048be:	2b0f      	cmp	r3, #15
 81048c0:	d947      	bls.n	8104952 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 81048c2:	e03f      	b.n	8104944 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 81048c4:	68fb      	ldr	r3, [r7, #12]
 81048c6:	681b      	ldr	r3, [r3, #0]
 81048c8:	695b      	ldr	r3, [r3, #20]
 81048ca:	f003 0302 	and.w	r3, r3, #2
 81048ce:	2b02      	cmp	r3, #2
 81048d0:	d114      	bne.n	81048fc <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 81048d2:	68fb      	ldr	r3, [r7, #12]
 81048d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 81048d6:	68fb      	ldr	r3, [r7, #12]
 81048d8:	681b      	ldr	r3, [r3, #0]
 81048da:	6812      	ldr	r2, [r2, #0]
 81048dc:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 81048de:	68fb      	ldr	r3, [r7, #12]
 81048e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81048e2:	1d1a      	adds	r2, r3, #4
 81048e4:	68fb      	ldr	r3, [r7, #12]
 81048e6:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 81048e8:	68fb      	ldr	r3, [r7, #12]
 81048ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81048ee:	b29b      	uxth	r3, r3
 81048f0:	3b01      	subs	r3, #1
 81048f2:	b29a      	uxth	r2, r3
 81048f4:	68fb      	ldr	r3, [r7, #12]
 81048f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 81048fa:	e023      	b.n	8104944 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81048fc:	f7fd faa4 	bl	8101e48 <HAL_GetTick>
 8104900:	4602      	mov	r2, r0
 8104902:	693b      	ldr	r3, [r7, #16]
 8104904:	1ad3      	subs	r3, r2, r3
 8104906:	683a      	ldr	r2, [r7, #0]
 8104908:	429a      	cmp	r2, r3
 810490a:	d803      	bhi.n	8104914 <HAL_SPI_Transmit+0x164>
 810490c:	683b      	ldr	r3, [r7, #0]
 810490e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104912:	d102      	bne.n	810491a <HAL_SPI_Transmit+0x16a>
 8104914:	683b      	ldr	r3, [r7, #0]
 8104916:	2b00      	cmp	r3, #0
 8104918:	d114      	bne.n	8104944 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 810491a:	68f8      	ldr	r0, [r7, #12]
 810491c:	f000 fba3 	bl	8105066 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104920:	68fb      	ldr	r3, [r7, #12]
 8104922:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104926:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 810492a:	68fb      	ldr	r3, [r7, #12]
 810492c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104930:	68fb      	ldr	r3, [r7, #12]
 8104932:	2201      	movs	r2, #1
 8104934:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104938:	68fb      	ldr	r3, [r7, #12]
 810493a:	2200      	movs	r2, #0
 810493c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8104940:	2303      	movs	r3, #3
 8104942:	e11c      	b.n	8104b7e <HAL_SPI_Transmit+0x3ce>
    while (hspi->TxXferCount > 0UL)
 8104944:	68fb      	ldr	r3, [r7, #12]
 8104946:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810494a:	b29b      	uxth	r3, r3
 810494c:	2b00      	cmp	r3, #0
 810494e:	d1b9      	bne.n	81048c4 <HAL_SPI_Transmit+0x114>
 8104950:	e0ef      	b.n	8104b32 <HAL_SPI_Transmit+0x382>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8104952:	68fb      	ldr	r3, [r7, #12]
 8104954:	68db      	ldr	r3, [r3, #12]
 8104956:	2b07      	cmp	r3, #7
 8104958:	f240 80e4 	bls.w	8104b24 <HAL_SPI_Transmit+0x374>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 810495c:	e05d      	b.n	8104a1a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 810495e:	68fb      	ldr	r3, [r7, #12]
 8104960:	681b      	ldr	r3, [r3, #0]
 8104962:	695b      	ldr	r3, [r3, #20]
 8104964:	f003 0302 	and.w	r3, r3, #2
 8104968:	2b02      	cmp	r3, #2
 810496a:	d132      	bne.n	81049d2 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 810496c:	68fb      	ldr	r3, [r7, #12]
 810496e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8104972:	b29b      	uxth	r3, r3
 8104974:	2b01      	cmp	r3, #1
 8104976:	d918      	bls.n	81049aa <HAL_SPI_Transmit+0x1fa>
 8104978:	68fb      	ldr	r3, [r7, #12]
 810497a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810497c:	2b00      	cmp	r3, #0
 810497e:	d014      	beq.n	81049aa <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8104980:	68fb      	ldr	r3, [r7, #12]
 8104982:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8104984:	68fb      	ldr	r3, [r7, #12]
 8104986:	681b      	ldr	r3, [r3, #0]
 8104988:	6812      	ldr	r2, [r2, #0]
 810498a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 810498c:	68fb      	ldr	r3, [r7, #12]
 810498e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104990:	1d1a      	adds	r2, r3, #4
 8104992:	68fb      	ldr	r3, [r7, #12]
 8104994:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8104996:	68fb      	ldr	r3, [r7, #12]
 8104998:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 810499c:	b29b      	uxth	r3, r3
 810499e:	3b02      	subs	r3, #2
 81049a0:	b29a      	uxth	r2, r3
 81049a2:	68fb      	ldr	r3, [r7, #12]
 81049a4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 81049a8:	e037      	b.n	8104a1a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 81049aa:	68fb      	ldr	r3, [r7, #12]
 81049ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81049ae:	881a      	ldrh	r2, [r3, #0]
 81049b0:	697b      	ldr	r3, [r7, #20]
 81049b2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 81049b4:	68fb      	ldr	r3, [r7, #12]
 81049b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81049b8:	1c9a      	adds	r2, r3, #2
 81049ba:	68fb      	ldr	r3, [r7, #12]
 81049bc:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 81049be:	68fb      	ldr	r3, [r7, #12]
 81049c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 81049c4:	b29b      	uxth	r3, r3
 81049c6:	3b01      	subs	r3, #1
 81049c8:	b29a      	uxth	r2, r3
 81049ca:	68fb      	ldr	r3, [r7, #12]
 81049cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 81049d0:	e023      	b.n	8104a1a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81049d2:	f7fd fa39 	bl	8101e48 <HAL_GetTick>
 81049d6:	4602      	mov	r2, r0
 81049d8:	693b      	ldr	r3, [r7, #16]
 81049da:	1ad3      	subs	r3, r2, r3
 81049dc:	683a      	ldr	r2, [r7, #0]
 81049de:	429a      	cmp	r2, r3
 81049e0:	d803      	bhi.n	81049ea <HAL_SPI_Transmit+0x23a>
 81049e2:	683b      	ldr	r3, [r7, #0]
 81049e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81049e8:	d102      	bne.n	81049f0 <HAL_SPI_Transmit+0x240>
 81049ea:	683b      	ldr	r3, [r7, #0]
 81049ec:	2b00      	cmp	r3, #0
 81049ee:	d114      	bne.n	8104a1a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 81049f0:	68f8      	ldr	r0, [r7, #12]
 81049f2:	f000 fb38 	bl	8105066 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 81049f6:	68fb      	ldr	r3, [r7, #12]
 81049f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81049fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8104a00:	68fb      	ldr	r3, [r7, #12]
 8104a02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104a06:	68fb      	ldr	r3, [r7, #12]
 8104a08:	2201      	movs	r2, #1
 8104a0a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104a0e:	68fb      	ldr	r3, [r7, #12]
 8104a10:	2200      	movs	r2, #0
 8104a12:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8104a16:	2303      	movs	r3, #3
 8104a18:	e0b1      	b.n	8104b7e <HAL_SPI_Transmit+0x3ce>
    while (hspi->TxXferCount > 0UL)
 8104a1a:	68fb      	ldr	r3, [r7, #12]
 8104a1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8104a20:	b29b      	uxth	r3, r3
 8104a22:	2b00      	cmp	r3, #0
 8104a24:	d19b      	bne.n	810495e <HAL_SPI_Transmit+0x1ae>
 8104a26:	e084      	b.n	8104b32 <HAL_SPI_Transmit+0x382>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8104a28:	68fb      	ldr	r3, [r7, #12]
 8104a2a:	681b      	ldr	r3, [r3, #0]
 8104a2c:	695b      	ldr	r3, [r3, #20]
 8104a2e:	f003 0302 	and.w	r3, r3, #2
 8104a32:	2b02      	cmp	r3, #2
 8104a34:	d152      	bne.n	8104adc <HAL_SPI_Transmit+0x32c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8104a36:	68fb      	ldr	r3, [r7, #12]
 8104a38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8104a3c:	b29b      	uxth	r3, r3
 8104a3e:	2b03      	cmp	r3, #3
 8104a40:	d918      	bls.n	8104a74 <HAL_SPI_Transmit+0x2c4>
 8104a42:	68fb      	ldr	r3, [r7, #12]
 8104a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104a46:	2b40      	cmp	r3, #64	@ 0x40
 8104a48:	d914      	bls.n	8104a74 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8104a4a:	68fb      	ldr	r3, [r7, #12]
 8104a4c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8104a4e:	68fb      	ldr	r3, [r7, #12]
 8104a50:	681b      	ldr	r3, [r3, #0]
 8104a52:	6812      	ldr	r2, [r2, #0]
 8104a54:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8104a56:	68fb      	ldr	r3, [r7, #12]
 8104a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104a5a:	1d1a      	adds	r2, r3, #4
 8104a5c:	68fb      	ldr	r3, [r7, #12]
 8104a5e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8104a60:	68fb      	ldr	r3, [r7, #12]
 8104a62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8104a66:	b29b      	uxth	r3, r3
 8104a68:	3b04      	subs	r3, #4
 8104a6a:	b29a      	uxth	r2, r3
 8104a6c:	68fb      	ldr	r3, [r7, #12]
 8104a6e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8104a72:	e057      	b.n	8104b24 <HAL_SPI_Transmit+0x374>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8104a74:	68fb      	ldr	r3, [r7, #12]
 8104a76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8104a7a:	b29b      	uxth	r3, r3
 8104a7c:	2b01      	cmp	r3, #1
 8104a7e:	d917      	bls.n	8104ab0 <HAL_SPI_Transmit+0x300>
 8104a80:	68fb      	ldr	r3, [r7, #12]
 8104a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104a84:	2b00      	cmp	r3, #0
 8104a86:	d013      	beq.n	8104ab0 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8104a88:	68fb      	ldr	r3, [r7, #12]
 8104a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104a8c:	881a      	ldrh	r2, [r3, #0]
 8104a8e:	697b      	ldr	r3, [r7, #20]
 8104a90:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8104a92:	68fb      	ldr	r3, [r7, #12]
 8104a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104a96:	1c9a      	adds	r2, r3, #2
 8104a98:	68fb      	ldr	r3, [r7, #12]
 8104a9a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8104a9c:	68fb      	ldr	r3, [r7, #12]
 8104a9e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8104aa2:	b29b      	uxth	r3, r3
 8104aa4:	3b02      	subs	r3, #2
 8104aa6:	b29a      	uxth	r2, r3
 8104aa8:	68fb      	ldr	r3, [r7, #12]
 8104aaa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8104aae:	e039      	b.n	8104b24 <HAL_SPI_Transmit+0x374>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8104ab0:	68fb      	ldr	r3, [r7, #12]
 8104ab2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8104ab4:	68fb      	ldr	r3, [r7, #12]
 8104ab6:	681b      	ldr	r3, [r3, #0]
 8104ab8:	3320      	adds	r3, #32
 8104aba:	7812      	ldrb	r2, [r2, #0]
 8104abc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8104abe:	68fb      	ldr	r3, [r7, #12]
 8104ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104ac2:	1c5a      	adds	r2, r3, #1
 8104ac4:	68fb      	ldr	r3, [r7, #12]
 8104ac6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 8104ac8:	68fb      	ldr	r3, [r7, #12]
 8104aca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8104ace:	b29b      	uxth	r3, r3
 8104ad0:	3b01      	subs	r3, #1
 8104ad2:	b29a      	uxth	r2, r3
 8104ad4:	68fb      	ldr	r3, [r7, #12]
 8104ad6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8104ada:	e023      	b.n	8104b24 <HAL_SPI_Transmit+0x374>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104adc:	f7fd f9b4 	bl	8101e48 <HAL_GetTick>
 8104ae0:	4602      	mov	r2, r0
 8104ae2:	693b      	ldr	r3, [r7, #16]
 8104ae4:	1ad3      	subs	r3, r2, r3
 8104ae6:	683a      	ldr	r2, [r7, #0]
 8104ae8:	429a      	cmp	r2, r3
 8104aea:	d803      	bhi.n	8104af4 <HAL_SPI_Transmit+0x344>
 8104aec:	683b      	ldr	r3, [r7, #0]
 8104aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104af2:	d102      	bne.n	8104afa <HAL_SPI_Transmit+0x34a>
 8104af4:	683b      	ldr	r3, [r7, #0]
 8104af6:	2b00      	cmp	r3, #0
 8104af8:	d114      	bne.n	8104b24 <HAL_SPI_Transmit+0x374>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104afa:	68f8      	ldr	r0, [r7, #12]
 8104afc:	f000 fab3 	bl	8105066 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104b00:	68fb      	ldr	r3, [r7, #12]
 8104b02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104b06:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8104b0a:	68fb      	ldr	r3, [r7, #12]
 8104b0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104b10:	68fb      	ldr	r3, [r7, #12]
 8104b12:	2201      	movs	r2, #1
 8104b14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104b18:	68fb      	ldr	r3, [r7, #12]
 8104b1a:	2200      	movs	r2, #0
 8104b1c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8104b20:	2303      	movs	r3, #3
 8104b22:	e02c      	b.n	8104b7e <HAL_SPI_Transmit+0x3ce>
    while (hspi->TxXferCount > 0UL)
 8104b24:	68fb      	ldr	r3, [r7, #12]
 8104b26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8104b2a:	b29b      	uxth	r3, r3
 8104b2c:	2b00      	cmp	r3, #0
 8104b2e:	f47f af7b 	bne.w	8104a28 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8104b32:	693b      	ldr	r3, [r7, #16]
 8104b34:	9300      	str	r3, [sp, #0]
 8104b36:	683b      	ldr	r3, [r7, #0]
 8104b38:	2200      	movs	r2, #0
 8104b3a:	2108      	movs	r1, #8
 8104b3c:	68f8      	ldr	r0, [r7, #12]
 8104b3e:	f000 fb32 	bl	81051a6 <SPI_WaitOnFlagUntilTimeout>
 8104b42:	4603      	mov	r3, r0
 8104b44:	2b00      	cmp	r3, #0
 8104b46:	d007      	beq.n	8104b58 <HAL_SPI_Transmit+0x3a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8104b48:	68fb      	ldr	r3, [r7, #12]
 8104b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104b4e:	f043 0220 	orr.w	r2, r3, #32
 8104b52:	68fb      	ldr	r3, [r7, #12]
 8104b54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8104b58:	68f8      	ldr	r0, [r7, #12]
 8104b5a:	f000 fa84 	bl	8105066 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8104b5e:	68fb      	ldr	r3, [r7, #12]
 8104b60:	2201      	movs	r2, #1
 8104b62:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8104b66:	68fb      	ldr	r3, [r7, #12]
 8104b68:	2200      	movs	r2, #0
 8104b6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8104b6e:	68fb      	ldr	r3, [r7, #12]
 8104b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104b74:	2b00      	cmp	r3, #0
 8104b76:	d001      	beq.n	8104b7c <HAL_SPI_Transmit+0x3cc>
  {
    return HAL_ERROR;
 8104b78:	2301      	movs	r3, #1
 8104b7a:	e000      	b.n	8104b7e <HAL_SPI_Transmit+0x3ce>
  }
  else
  {
    return HAL_OK;
 8104b7c:	2300      	movs	r3, #0
  }
}
 8104b7e:	4618      	mov	r0, r3
 8104b80:	3718      	adds	r7, #24
 8104b82:	46bd      	mov	sp, r7
 8104b84:	bd80      	pop	{r7, pc}

08104b86 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104b86:	b580      	push	{r7, lr}
 8104b88:	b088      	sub	sp, #32
 8104b8a:	af00      	add	r7, sp, #0
 8104b8c:	60f8      	str	r0, [r7, #12]
 8104b8e:	60b9      	str	r1, [r7, #8]
 8104b90:	603b      	str	r3, [r7, #0]
 8104b92:	4613      	mov	r3, r2
 8104b94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8104b96:	68fb      	ldr	r3, [r7, #12]
 8104b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104b9a:	095b      	lsrs	r3, r3, #5
 8104b9c:	b29b      	uxth	r3, r3
 8104b9e:	3301      	adds	r3, #1
 8104ba0:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8104ba2:	68fb      	ldr	r3, [r7, #12]
 8104ba4:	681b      	ldr	r3, [r3, #0]
 8104ba6:	3330      	adds	r3, #48	@ 0x30
 8104ba8:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8104baa:	f7fd f94d 	bl	8101e48 <HAL_GetTick>
 8104bae:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8104bb0:	68fb      	ldr	r3, [r7, #12]
 8104bb2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8104bb6:	b2db      	uxtb	r3, r3
 8104bb8:	2b01      	cmp	r3, #1
 8104bba:	d001      	beq.n	8104bc0 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 8104bbc:	2302      	movs	r3, #2
 8104bbe:	e24e      	b.n	810505e <HAL_SPI_Receive+0x4d8>
  }

  if ((pData == NULL) || (Size == 0UL))
 8104bc0:	68bb      	ldr	r3, [r7, #8]
 8104bc2:	2b00      	cmp	r3, #0
 8104bc4:	d002      	beq.n	8104bcc <HAL_SPI_Receive+0x46>
 8104bc6:	88fb      	ldrh	r3, [r7, #6]
 8104bc8:	2b00      	cmp	r3, #0
 8104bca:	d101      	bne.n	8104bd0 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 8104bcc:	2301      	movs	r3, #1
 8104bce:	e246      	b.n	810505e <HAL_SPI_Receive+0x4d8>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8104bd0:	68fb      	ldr	r3, [r7, #12]
 8104bd2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8104bd6:	2b01      	cmp	r3, #1
 8104bd8:	d101      	bne.n	8104bde <HAL_SPI_Receive+0x58>
 8104bda:	2302      	movs	r3, #2
 8104bdc:	e23f      	b.n	810505e <HAL_SPI_Receive+0x4d8>
 8104bde:	68fb      	ldr	r3, [r7, #12]
 8104be0:	2201      	movs	r2, #1
 8104be2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8104be6:	68fb      	ldr	r3, [r7, #12]
 8104be8:	2204      	movs	r2, #4
 8104bea:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8104bee:	68fb      	ldr	r3, [r7, #12]
 8104bf0:	2200      	movs	r2, #0
 8104bf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8104bf6:	68fb      	ldr	r3, [r7, #12]
 8104bf8:	68ba      	ldr	r2, [r7, #8]
 8104bfa:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 8104bfc:	68fb      	ldr	r3, [r7, #12]
 8104bfe:	88fa      	ldrh	r2, [r7, #6]
 8104c00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8104c04:	68fb      	ldr	r3, [r7, #12]
 8104c06:	88fa      	ldrh	r2, [r7, #6]
 8104c08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8104c0c:	68fb      	ldr	r3, [r7, #12]
 8104c0e:	2200      	movs	r2, #0
 8104c10:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8104c12:	68fb      	ldr	r3, [r7, #12]
 8104c14:	2200      	movs	r2, #0
 8104c16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8104c1a:	68fb      	ldr	r3, [r7, #12]
 8104c1c:	2200      	movs	r2, #0
 8104c1e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxISR       = NULL;
 8104c22:	68fb      	ldr	r3, [r7, #12]
 8104c24:	2200      	movs	r2, #0
 8104c26:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 8104c28:	68fb      	ldr	r3, [r7, #12]
 8104c2a:	2200      	movs	r2, #0
 8104c2c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8104c2e:	68fb      	ldr	r3, [r7, #12]
 8104c30:	689b      	ldr	r3, [r3, #8]
 8104c32:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8104c36:	d108      	bne.n	8104c4a <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 8104c38:	68fb      	ldr	r3, [r7, #12]
 8104c3a:	681b      	ldr	r3, [r3, #0]
 8104c3c:	681a      	ldr	r2, [r3, #0]
 8104c3e:	68fb      	ldr	r3, [r7, #12]
 8104c40:	681b      	ldr	r3, [r3, #0]
 8104c42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8104c46:	601a      	str	r2, [r3, #0]
 8104c48:	e009      	b.n	8104c5e <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8104c4a:	68fb      	ldr	r3, [r7, #12]
 8104c4c:	681b      	ldr	r3, [r3, #0]
 8104c4e:	68db      	ldr	r3, [r3, #12]
 8104c50:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8104c54:	68fb      	ldr	r3, [r7, #12]
 8104c56:	681b      	ldr	r3, [r3, #0]
 8104c58:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8104c5c:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8104c5e:	68fb      	ldr	r3, [r7, #12]
 8104c60:	681b      	ldr	r3, [r3, #0]
 8104c62:	685b      	ldr	r3, [r3, #4]
 8104c64:	0c1b      	lsrs	r3, r3, #16
 8104c66:	041b      	lsls	r3, r3, #16
 8104c68:	88f9      	ldrh	r1, [r7, #6]
 8104c6a:	68fa      	ldr	r2, [r7, #12]
 8104c6c:	6812      	ldr	r2, [r2, #0]
 8104c6e:	430b      	orrs	r3, r1
 8104c70:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8104c72:	68fb      	ldr	r3, [r7, #12]
 8104c74:	681b      	ldr	r3, [r3, #0]
 8104c76:	681a      	ldr	r2, [r3, #0]
 8104c78:	68fb      	ldr	r3, [r7, #12]
 8104c7a:	681b      	ldr	r3, [r3, #0]
 8104c7c:	f042 0201 	orr.w	r2, r2, #1
 8104c80:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8104c82:	68fb      	ldr	r3, [r7, #12]
 8104c84:	685b      	ldr	r3, [r3, #4]
 8104c86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8104c8a:	d107      	bne.n	8104c9c <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8104c8c:	68fb      	ldr	r3, [r7, #12]
 8104c8e:	681b      	ldr	r3, [r3, #0]
 8104c90:	681a      	ldr	r2, [r3, #0]
 8104c92:	68fb      	ldr	r3, [r7, #12]
 8104c94:	681b      	ldr	r3, [r3, #0]
 8104c96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8104c9a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8104c9c:	68fb      	ldr	r3, [r7, #12]
 8104c9e:	68db      	ldr	r3, [r3, #12]
 8104ca0:	2b0f      	cmp	r3, #15
 8104ca2:	d96c      	bls.n	8104d7e <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8104ca4:	e064      	b.n	8104d70 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8104ca6:	68fb      	ldr	r3, [r7, #12]
 8104ca8:	681b      	ldr	r3, [r3, #0]
 8104caa:	695b      	ldr	r3, [r3, #20]
 8104cac:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8104cae:	68fb      	ldr	r3, [r7, #12]
 8104cb0:	681b      	ldr	r3, [r3, #0]
 8104cb2:	695b      	ldr	r3, [r3, #20]
 8104cb4:	f003 0301 	and.w	r3, r3, #1
 8104cb8:	2b01      	cmp	r3, #1
 8104cba:	d114      	bne.n	8104ce6 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104cbc:	68fb      	ldr	r3, [r7, #12]
 8104cbe:	681a      	ldr	r2, [r3, #0]
 8104cc0:	68fb      	ldr	r3, [r7, #12]
 8104cc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104cc4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8104cc6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8104cc8:	68fb      	ldr	r3, [r7, #12]
 8104cca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104ccc:	1d1a      	adds	r2, r3, #4
 8104cce:	68fb      	ldr	r3, [r7, #12]
 8104cd0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8104cd2:	68fb      	ldr	r3, [r7, #12]
 8104cd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8104cd8:	b29b      	uxth	r3, r3
 8104cda:	3b01      	subs	r3, #1
 8104cdc:	b29a      	uxth	r2, r3
 8104cde:	68fb      	ldr	r3, [r7, #12]
 8104ce0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8104ce4:	e044      	b.n	8104d70 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8104ce6:	68fb      	ldr	r3, [r7, #12]
 8104ce8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8104cec:	b29b      	uxth	r3, r3
 8104cee:	8bfa      	ldrh	r2, [r7, #30]
 8104cf0:	429a      	cmp	r2, r3
 8104cf2:	d919      	bls.n	8104d28 <HAL_SPI_Receive+0x1a2>
 8104cf4:	693b      	ldr	r3, [r7, #16]
 8104cf6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8104cfa:	2b00      	cmp	r3, #0
 8104cfc:	d014      	beq.n	8104d28 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8104cfe:	68fb      	ldr	r3, [r7, #12]
 8104d00:	681a      	ldr	r2, [r3, #0]
 8104d02:	68fb      	ldr	r3, [r7, #12]
 8104d04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104d06:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8104d08:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8104d0a:	68fb      	ldr	r3, [r7, #12]
 8104d0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104d0e:	1d1a      	adds	r2, r3, #4
 8104d10:	68fb      	ldr	r3, [r7, #12]
 8104d12:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8104d14:	68fb      	ldr	r3, [r7, #12]
 8104d16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8104d1a:	b29b      	uxth	r3, r3
 8104d1c:	3b01      	subs	r3, #1
 8104d1e:	b29a      	uxth	r2, r3
 8104d20:	68fb      	ldr	r3, [r7, #12]
 8104d22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8104d26:	e023      	b.n	8104d70 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104d28:	f7fd f88e 	bl	8101e48 <HAL_GetTick>
 8104d2c:	4602      	mov	r2, r0
 8104d2e:	697b      	ldr	r3, [r7, #20]
 8104d30:	1ad3      	subs	r3, r2, r3
 8104d32:	683a      	ldr	r2, [r7, #0]
 8104d34:	429a      	cmp	r2, r3
 8104d36:	d803      	bhi.n	8104d40 <HAL_SPI_Receive+0x1ba>
 8104d38:	683b      	ldr	r3, [r7, #0]
 8104d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104d3e:	d102      	bne.n	8104d46 <HAL_SPI_Receive+0x1c0>
 8104d40:	683b      	ldr	r3, [r7, #0]
 8104d42:	2b00      	cmp	r3, #0
 8104d44:	d114      	bne.n	8104d70 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104d46:	68f8      	ldr	r0, [r7, #12]
 8104d48:	f000 f98d 	bl	8105066 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104d4c:	68fb      	ldr	r3, [r7, #12]
 8104d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104d52:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8104d56:	68fb      	ldr	r3, [r7, #12]
 8104d58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104d5c:	68fb      	ldr	r3, [r7, #12]
 8104d5e:	2201      	movs	r2, #1
 8104d60:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104d64:	68fb      	ldr	r3, [r7, #12]
 8104d66:	2200      	movs	r2, #0
 8104d68:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8104d6c:	2303      	movs	r3, #3
 8104d6e:	e176      	b.n	810505e <HAL_SPI_Receive+0x4d8>
    while (hspi->RxXferCount > 0UL)
 8104d70:	68fb      	ldr	r3, [r7, #12]
 8104d72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8104d76:	b29b      	uxth	r3, r3
 8104d78:	2b00      	cmp	r3, #0
 8104d7a:	d194      	bne.n	8104ca6 <HAL_SPI_Receive+0x120>
 8104d7c:	e15c      	b.n	8105038 <HAL_SPI_Receive+0x4b2>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8104d7e:	68fb      	ldr	r3, [r7, #12]
 8104d80:	68db      	ldr	r3, [r3, #12]
 8104d82:	2b07      	cmp	r3, #7
 8104d84:	f240 8151 	bls.w	810502a <HAL_SPI_Receive+0x4a4>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8104d88:	e08f      	b.n	8104eaa <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8104d8a:	68fb      	ldr	r3, [r7, #12]
 8104d8c:	681b      	ldr	r3, [r3, #0]
 8104d8e:	695b      	ldr	r3, [r3, #20]
 8104d90:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8104d92:	68fb      	ldr	r3, [r7, #12]
 8104d94:	681b      	ldr	r3, [r3, #0]
 8104d96:	695b      	ldr	r3, [r3, #20]
 8104d98:	f003 0301 	and.w	r3, r3, #1
 8104d9c:	2b01      	cmp	r3, #1
 8104d9e:	d114      	bne.n	8104dca <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104da0:	68fb      	ldr	r3, [r7, #12]
 8104da2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104da4:	69ba      	ldr	r2, [r7, #24]
 8104da6:	8812      	ldrh	r2, [r2, #0]
 8104da8:	b292      	uxth	r2, r2
 8104daa:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8104dac:	68fb      	ldr	r3, [r7, #12]
 8104dae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104db0:	1c9a      	adds	r2, r3, #2
 8104db2:	68fb      	ldr	r3, [r7, #12]
 8104db4:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8104db6:	68fb      	ldr	r3, [r7, #12]
 8104db8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8104dbc:	b29b      	uxth	r3, r3
 8104dbe:	3b01      	subs	r3, #1
 8104dc0:	b29a      	uxth	r2, r3
 8104dc2:	68fb      	ldr	r3, [r7, #12]
 8104dc4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8104dc8:	e06f      	b.n	8104eaa <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8104dca:	68fb      	ldr	r3, [r7, #12]
 8104dcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8104dd0:	b29b      	uxth	r3, r3
 8104dd2:	8bfa      	ldrh	r2, [r7, #30]
 8104dd4:	429a      	cmp	r2, r3
 8104dd6:	d924      	bls.n	8104e22 <HAL_SPI_Receive+0x29c>
 8104dd8:	693b      	ldr	r3, [r7, #16]
 8104dda:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8104dde:	2b00      	cmp	r3, #0
 8104de0:	d01f      	beq.n	8104e22 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104de2:	68fb      	ldr	r3, [r7, #12]
 8104de4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104de6:	69ba      	ldr	r2, [r7, #24]
 8104de8:	8812      	ldrh	r2, [r2, #0]
 8104dea:	b292      	uxth	r2, r2
 8104dec:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8104dee:	68fb      	ldr	r3, [r7, #12]
 8104df0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104df2:	1c9a      	adds	r2, r3, #2
 8104df4:	68fb      	ldr	r3, [r7, #12]
 8104df6:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104df8:	68fb      	ldr	r3, [r7, #12]
 8104dfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104dfc:	69ba      	ldr	r2, [r7, #24]
 8104dfe:	8812      	ldrh	r2, [r2, #0]
 8104e00:	b292      	uxth	r2, r2
 8104e02:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8104e04:	68fb      	ldr	r3, [r7, #12]
 8104e06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104e08:	1c9a      	adds	r2, r3, #2
 8104e0a:	68fb      	ldr	r3, [r7, #12]
 8104e0c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 8104e0e:	68fb      	ldr	r3, [r7, #12]
 8104e10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8104e14:	b29b      	uxth	r3, r3
 8104e16:	3b02      	subs	r3, #2
 8104e18:	b29a      	uxth	r2, r3
 8104e1a:	68fb      	ldr	r3, [r7, #12]
 8104e1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8104e20:	e043      	b.n	8104eaa <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8104e22:	68fb      	ldr	r3, [r7, #12]
 8104e24:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8104e28:	b29b      	uxth	r3, r3
 8104e2a:	2b01      	cmp	r3, #1
 8104e2c:	d119      	bne.n	8104e62 <HAL_SPI_Receive+0x2dc>
 8104e2e:	693b      	ldr	r3, [r7, #16]
 8104e30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8104e34:	2b00      	cmp	r3, #0
 8104e36:	d014      	beq.n	8104e62 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8104e38:	68fb      	ldr	r3, [r7, #12]
 8104e3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104e3c:	69ba      	ldr	r2, [r7, #24]
 8104e3e:	8812      	ldrh	r2, [r2, #0]
 8104e40:	b292      	uxth	r2, r2
 8104e42:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8104e44:	68fb      	ldr	r3, [r7, #12]
 8104e46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104e48:	1c9a      	adds	r2, r3, #2
 8104e4a:	68fb      	ldr	r3, [r7, #12]
 8104e4c:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8104e4e:	68fb      	ldr	r3, [r7, #12]
 8104e50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8104e54:	b29b      	uxth	r3, r3
 8104e56:	3b01      	subs	r3, #1
 8104e58:	b29a      	uxth	r2, r3
 8104e5a:	68fb      	ldr	r3, [r7, #12]
 8104e5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8104e60:	e023      	b.n	8104eaa <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104e62:	f7fc fff1 	bl	8101e48 <HAL_GetTick>
 8104e66:	4602      	mov	r2, r0
 8104e68:	697b      	ldr	r3, [r7, #20]
 8104e6a:	1ad3      	subs	r3, r2, r3
 8104e6c:	683a      	ldr	r2, [r7, #0]
 8104e6e:	429a      	cmp	r2, r3
 8104e70:	d803      	bhi.n	8104e7a <HAL_SPI_Receive+0x2f4>
 8104e72:	683b      	ldr	r3, [r7, #0]
 8104e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104e78:	d102      	bne.n	8104e80 <HAL_SPI_Receive+0x2fa>
 8104e7a:	683b      	ldr	r3, [r7, #0]
 8104e7c:	2b00      	cmp	r3, #0
 8104e7e:	d114      	bne.n	8104eaa <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8104e80:	68f8      	ldr	r0, [r7, #12]
 8104e82:	f000 f8f0 	bl	8105066 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8104e86:	68fb      	ldr	r3, [r7, #12]
 8104e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104e8c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8104e90:	68fb      	ldr	r3, [r7, #12]
 8104e92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8104e96:	68fb      	ldr	r3, [r7, #12]
 8104e98:	2201      	movs	r2, #1
 8104e9a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8104e9e:	68fb      	ldr	r3, [r7, #12]
 8104ea0:	2200      	movs	r2, #0
 8104ea2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8104ea6:	2303      	movs	r3, #3
 8104ea8:	e0d9      	b.n	810505e <HAL_SPI_Receive+0x4d8>
    while (hspi->RxXferCount > 0UL)
 8104eaa:	68fb      	ldr	r3, [r7, #12]
 8104eac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8104eb0:	b29b      	uxth	r3, r3
 8104eb2:	2b00      	cmp	r3, #0
 8104eb4:	f47f af69 	bne.w	8104d8a <HAL_SPI_Receive+0x204>
 8104eb8:	e0be      	b.n	8105038 <HAL_SPI_Receive+0x4b2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8104eba:	68fb      	ldr	r3, [r7, #12]
 8104ebc:	681b      	ldr	r3, [r3, #0]
 8104ebe:	695b      	ldr	r3, [r3, #20]
 8104ec0:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8104ec2:	68fb      	ldr	r3, [r7, #12]
 8104ec4:	681b      	ldr	r3, [r3, #0]
 8104ec6:	695b      	ldr	r3, [r3, #20]
 8104ec8:	f003 0301 	and.w	r3, r3, #1
 8104ecc:	2b01      	cmp	r3, #1
 8104ece:	d117      	bne.n	8104f00 <HAL_SPI_Receive+0x37a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8104ed0:	68fb      	ldr	r3, [r7, #12]
 8104ed2:	681b      	ldr	r3, [r3, #0]
 8104ed4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8104ed8:	68fb      	ldr	r3, [r7, #12]
 8104eda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104edc:	7812      	ldrb	r2, [r2, #0]
 8104ede:	b2d2      	uxtb	r2, r2
 8104ee0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8104ee2:	68fb      	ldr	r3, [r7, #12]
 8104ee4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104ee6:	1c5a      	adds	r2, r3, #1
 8104ee8:	68fb      	ldr	r3, [r7, #12]
 8104eea:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8104eec:	68fb      	ldr	r3, [r7, #12]
 8104eee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8104ef2:	b29b      	uxth	r3, r3
 8104ef4:	3b01      	subs	r3, #1
 8104ef6:	b29a      	uxth	r2, r3
 8104ef8:	68fb      	ldr	r3, [r7, #12]
 8104efa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8104efe:	e094      	b.n	810502a <HAL_SPI_Receive+0x4a4>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8104f00:	68fb      	ldr	r3, [r7, #12]
 8104f02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8104f06:	b29b      	uxth	r3, r3
 8104f08:	8bfa      	ldrh	r2, [r7, #30]
 8104f0a:	429a      	cmp	r2, r3
 8104f0c:	d946      	bls.n	8104f9c <HAL_SPI_Receive+0x416>
 8104f0e:	693b      	ldr	r3, [r7, #16]
 8104f10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8104f14:	2b00      	cmp	r3, #0
 8104f16:	d041      	beq.n	8104f9c <HAL_SPI_Receive+0x416>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8104f18:	68fb      	ldr	r3, [r7, #12]
 8104f1a:	681b      	ldr	r3, [r3, #0]
 8104f1c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8104f20:	68fb      	ldr	r3, [r7, #12]
 8104f22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104f24:	7812      	ldrb	r2, [r2, #0]
 8104f26:	b2d2      	uxtb	r2, r2
 8104f28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8104f2a:	68fb      	ldr	r3, [r7, #12]
 8104f2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104f2e:	1c5a      	adds	r2, r3, #1
 8104f30:	68fb      	ldr	r3, [r7, #12]
 8104f32:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8104f34:	68fb      	ldr	r3, [r7, #12]
 8104f36:	681b      	ldr	r3, [r3, #0]
 8104f38:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8104f3c:	68fb      	ldr	r3, [r7, #12]
 8104f3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104f40:	7812      	ldrb	r2, [r2, #0]
 8104f42:	b2d2      	uxtb	r2, r2
 8104f44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8104f46:	68fb      	ldr	r3, [r7, #12]
 8104f48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104f4a:	1c5a      	adds	r2, r3, #1
 8104f4c:	68fb      	ldr	r3, [r7, #12]
 8104f4e:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8104f50:	68fb      	ldr	r3, [r7, #12]
 8104f52:	681b      	ldr	r3, [r3, #0]
 8104f54:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8104f58:	68fb      	ldr	r3, [r7, #12]
 8104f5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104f5c:	7812      	ldrb	r2, [r2, #0]
 8104f5e:	b2d2      	uxtb	r2, r2
 8104f60:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8104f62:	68fb      	ldr	r3, [r7, #12]
 8104f64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104f66:	1c5a      	adds	r2, r3, #1
 8104f68:	68fb      	ldr	r3, [r7, #12]
 8104f6a:	665a      	str	r2, [r3, #100]	@ 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8104f6c:	68fb      	ldr	r3, [r7, #12]
 8104f6e:	681b      	ldr	r3, [r3, #0]
 8104f70:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8104f74:	68fb      	ldr	r3, [r7, #12]
 8104f76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104f78:	7812      	ldrb	r2, [r2, #0]
 8104f7a:	b2d2      	uxtb	r2, r2
 8104f7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8104f7e:	68fb      	ldr	r3, [r7, #12]
 8104f80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104f82:	1c5a      	adds	r2, r3, #1
 8104f84:	68fb      	ldr	r3, [r7, #12]
 8104f86:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 8104f88:	68fb      	ldr	r3, [r7, #12]
 8104f8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8104f8e:	b29b      	uxth	r3, r3
 8104f90:	3b04      	subs	r3, #4
 8104f92:	b29a      	uxth	r2, r3
 8104f94:	68fb      	ldr	r3, [r7, #12]
 8104f96:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8104f9a:	e046      	b.n	810502a <HAL_SPI_Receive+0x4a4>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8104f9c:	68fb      	ldr	r3, [r7, #12]
 8104f9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8104fa2:	b29b      	uxth	r3, r3
 8104fa4:	2b03      	cmp	r3, #3
 8104fa6:	d81c      	bhi.n	8104fe2 <HAL_SPI_Receive+0x45c>
 8104fa8:	693b      	ldr	r3, [r7, #16]
 8104faa:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8104fae:	2b00      	cmp	r3, #0
 8104fb0:	d017      	beq.n	8104fe2 <HAL_SPI_Receive+0x45c>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8104fb2:	68fb      	ldr	r3, [r7, #12]
 8104fb4:	681b      	ldr	r3, [r3, #0]
 8104fb6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8104fba:	68fb      	ldr	r3, [r7, #12]
 8104fbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104fbe:	7812      	ldrb	r2, [r2, #0]
 8104fc0:	b2d2      	uxtb	r2, r2
 8104fc2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8104fc4:	68fb      	ldr	r3, [r7, #12]
 8104fc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104fc8:	1c5a      	adds	r2, r3, #1
 8104fca:	68fb      	ldr	r3, [r7, #12]
 8104fcc:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->RxXferCount--;
 8104fce:	68fb      	ldr	r3, [r7, #12]
 8104fd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8104fd4:	b29b      	uxth	r3, r3
 8104fd6:	3b01      	subs	r3, #1
 8104fd8:	b29a      	uxth	r2, r3
 8104fda:	68fb      	ldr	r3, [r7, #12]
 8104fdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8104fe0:	e023      	b.n	810502a <HAL_SPI_Receive+0x4a4>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8104fe2:	f7fc ff31 	bl	8101e48 <HAL_GetTick>
 8104fe6:	4602      	mov	r2, r0
 8104fe8:	697b      	ldr	r3, [r7, #20]
 8104fea:	1ad3      	subs	r3, r2, r3
 8104fec:	683a      	ldr	r2, [r7, #0]
 8104fee:	429a      	cmp	r2, r3
 8104ff0:	d803      	bhi.n	8104ffa <HAL_SPI_Receive+0x474>
 8104ff2:	683b      	ldr	r3, [r7, #0]
 8104ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104ff8:	d102      	bne.n	8105000 <HAL_SPI_Receive+0x47a>
 8104ffa:	683b      	ldr	r3, [r7, #0]
 8104ffc:	2b00      	cmp	r3, #0
 8104ffe:	d114      	bne.n	810502a <HAL_SPI_Receive+0x4a4>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8105000:	68f8      	ldr	r0, [r7, #12]
 8105002:	f000 f830 	bl	8105066 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8105006:	68fb      	ldr	r3, [r7, #12]
 8105008:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810500c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8105010:	68fb      	ldr	r3, [r7, #12]
 8105012:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8105016:	68fb      	ldr	r3, [r7, #12]
 8105018:	2201      	movs	r2, #1
 810501a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 810501e:	68fb      	ldr	r3, [r7, #12]
 8105020:	2200      	movs	r2, #0
 8105022:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8105026:	2303      	movs	r3, #3
 8105028:	e019      	b.n	810505e <HAL_SPI_Receive+0x4d8>
    while (hspi->RxXferCount > 0UL)
 810502a:	68fb      	ldr	r3, [r7, #12]
 810502c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8105030:	b29b      	uxth	r3, r3
 8105032:	2b00      	cmp	r3, #0
 8105034:	f47f af41 	bne.w	8104eba <HAL_SPI_Receive+0x334>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8105038:	68f8      	ldr	r0, [r7, #12]
 810503a:	f000 f814 	bl	8105066 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 810503e:	68fb      	ldr	r3, [r7, #12]
 8105040:	2201      	movs	r2, #1
 8105042:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8105046:	68fb      	ldr	r3, [r7, #12]
 8105048:	2200      	movs	r2, #0
 810504a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 810504e:	68fb      	ldr	r3, [r7, #12]
 8105050:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8105054:	2b00      	cmp	r3, #0
 8105056:	d001      	beq.n	810505c <HAL_SPI_Receive+0x4d6>
  {
    return HAL_ERROR;
 8105058:	2301      	movs	r3, #1
 810505a:	e000      	b.n	810505e <HAL_SPI_Receive+0x4d8>
  }
  else
  {
    return HAL_OK;
 810505c:	2300      	movs	r3, #0
  }
}
 810505e:	4618      	mov	r0, r3
 8105060:	3720      	adds	r7, #32
 8105062:	46bd      	mov	sp, r7
 8105064:	bd80      	pop	{r7, pc}

08105066 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8105066:	b480      	push	{r7}
 8105068:	b085      	sub	sp, #20
 810506a:	af00      	add	r7, sp, #0
 810506c:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 810506e:	687b      	ldr	r3, [r7, #4]
 8105070:	681b      	ldr	r3, [r3, #0]
 8105072:	695b      	ldr	r3, [r3, #20]
 8105074:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8105076:	687b      	ldr	r3, [r7, #4]
 8105078:	681b      	ldr	r3, [r3, #0]
 810507a:	699a      	ldr	r2, [r3, #24]
 810507c:	687b      	ldr	r3, [r7, #4]
 810507e:	681b      	ldr	r3, [r3, #0]
 8105080:	f042 0208 	orr.w	r2, r2, #8
 8105084:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8105086:	687b      	ldr	r3, [r7, #4]
 8105088:	681b      	ldr	r3, [r3, #0]
 810508a:	699a      	ldr	r2, [r3, #24]
 810508c:	687b      	ldr	r3, [r7, #4]
 810508e:	681b      	ldr	r3, [r3, #0]
 8105090:	f042 0210 	orr.w	r2, r2, #16
 8105094:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8105096:	687b      	ldr	r3, [r7, #4]
 8105098:	681b      	ldr	r3, [r3, #0]
 810509a:	681a      	ldr	r2, [r3, #0]
 810509c:	687b      	ldr	r3, [r7, #4]
 810509e:	681b      	ldr	r3, [r3, #0]
 81050a0:	f022 0201 	bic.w	r2, r2, #1
 81050a4:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 81050a6:	687b      	ldr	r3, [r7, #4]
 81050a8:	681b      	ldr	r3, [r3, #0]
 81050aa:	691b      	ldr	r3, [r3, #16]
 81050ac:	687a      	ldr	r2, [r7, #4]
 81050ae:	6812      	ldr	r2, [r2, #0]
 81050b0:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 81050b4:	f023 0303 	bic.w	r3, r3, #3
 81050b8:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 81050ba:	687b      	ldr	r3, [r7, #4]
 81050bc:	681b      	ldr	r3, [r3, #0]
 81050be:	689a      	ldr	r2, [r3, #8]
 81050c0:	687b      	ldr	r3, [r7, #4]
 81050c2:	681b      	ldr	r3, [r3, #0]
 81050c4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 81050c8:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 81050ca:	687b      	ldr	r3, [r7, #4]
 81050cc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 81050d0:	b2db      	uxtb	r3, r3
 81050d2:	2b04      	cmp	r3, #4
 81050d4:	d014      	beq.n	8105100 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 81050d6:	68fb      	ldr	r3, [r7, #12]
 81050d8:	f003 0320 	and.w	r3, r3, #32
 81050dc:	2b00      	cmp	r3, #0
 81050de:	d00f      	beq.n	8105100 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 81050e0:	687b      	ldr	r3, [r7, #4]
 81050e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81050e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 81050ea:	687b      	ldr	r3, [r7, #4]
 81050ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 81050f0:	687b      	ldr	r3, [r7, #4]
 81050f2:	681b      	ldr	r3, [r3, #0]
 81050f4:	699a      	ldr	r2, [r3, #24]
 81050f6:	687b      	ldr	r3, [r7, #4]
 81050f8:	681b      	ldr	r3, [r3, #0]
 81050fa:	f042 0220 	orr.w	r2, r2, #32
 81050fe:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8105100:	687b      	ldr	r3, [r7, #4]
 8105102:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8105106:	b2db      	uxtb	r3, r3
 8105108:	2b03      	cmp	r3, #3
 810510a:	d014      	beq.n	8105136 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 810510c:	68fb      	ldr	r3, [r7, #12]
 810510e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105112:	2b00      	cmp	r3, #0
 8105114:	d00f      	beq.n	8105136 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8105116:	687b      	ldr	r3, [r7, #4]
 8105118:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 810511c:	f043 0204 	orr.w	r2, r3, #4
 8105120:	687b      	ldr	r3, [r7, #4]
 8105122:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8105126:	687b      	ldr	r3, [r7, #4]
 8105128:	681b      	ldr	r3, [r3, #0]
 810512a:	699a      	ldr	r2, [r3, #24]
 810512c:	687b      	ldr	r3, [r7, #4]
 810512e:	681b      	ldr	r3, [r3, #0]
 8105130:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8105134:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8105136:	68fb      	ldr	r3, [r7, #12]
 8105138:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810513c:	2b00      	cmp	r3, #0
 810513e:	d00f      	beq.n	8105160 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8105140:	687b      	ldr	r3, [r7, #4]
 8105142:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8105146:	f043 0201 	orr.w	r2, r3, #1
 810514a:	687b      	ldr	r3, [r7, #4]
 810514c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8105150:	687b      	ldr	r3, [r7, #4]
 8105152:	681b      	ldr	r3, [r3, #0]
 8105154:	699a      	ldr	r2, [r3, #24]
 8105156:	687b      	ldr	r3, [r7, #4]
 8105158:	681b      	ldr	r3, [r3, #0]
 810515a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 810515e:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8105160:	68fb      	ldr	r3, [r7, #12]
 8105162:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8105166:	2b00      	cmp	r3, #0
 8105168:	d00f      	beq.n	810518a <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 810516a:	687b      	ldr	r3, [r7, #4]
 810516c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8105170:	f043 0208 	orr.w	r2, r3, #8
 8105174:	687b      	ldr	r3, [r7, #4]
 8105176:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 810517a:	687b      	ldr	r3, [r7, #4]
 810517c:	681b      	ldr	r3, [r3, #0]
 810517e:	699a      	ldr	r2, [r3, #24]
 8105180:	687b      	ldr	r3, [r7, #4]
 8105182:	681b      	ldr	r3, [r3, #0]
 8105184:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8105188:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 810518a:	687b      	ldr	r3, [r7, #4]
 810518c:	2200      	movs	r2, #0
 810518e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8105192:	687b      	ldr	r3, [r7, #4]
 8105194:	2200      	movs	r2, #0
 8105196:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 810519a:	bf00      	nop
 810519c:	3714      	adds	r7, #20
 810519e:	46bd      	mov	sp, r7
 81051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051a4:	4770      	bx	lr

081051a6 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 81051a6:	b580      	push	{r7, lr}
 81051a8:	b084      	sub	sp, #16
 81051aa:	af00      	add	r7, sp, #0
 81051ac:	60f8      	str	r0, [r7, #12]
 81051ae:	60b9      	str	r1, [r7, #8]
 81051b0:	603b      	str	r3, [r7, #0]
 81051b2:	4613      	mov	r3, r2
 81051b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81051b6:	e010      	b.n	81051da <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 81051b8:	f7fc fe46 	bl	8101e48 <HAL_GetTick>
 81051bc:	4602      	mov	r2, r0
 81051be:	69bb      	ldr	r3, [r7, #24]
 81051c0:	1ad3      	subs	r3, r2, r3
 81051c2:	683a      	ldr	r2, [r7, #0]
 81051c4:	429a      	cmp	r2, r3
 81051c6:	d803      	bhi.n	81051d0 <SPI_WaitOnFlagUntilTimeout+0x2a>
 81051c8:	683b      	ldr	r3, [r7, #0]
 81051ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 81051ce:	d102      	bne.n	81051d6 <SPI_WaitOnFlagUntilTimeout+0x30>
 81051d0:	683b      	ldr	r3, [r7, #0]
 81051d2:	2b00      	cmp	r3, #0
 81051d4:	d101      	bne.n	81051da <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 81051d6:	2303      	movs	r3, #3
 81051d8:	e00f      	b.n	81051fa <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 81051da:	68fb      	ldr	r3, [r7, #12]
 81051dc:	681b      	ldr	r3, [r3, #0]
 81051de:	695a      	ldr	r2, [r3, #20]
 81051e0:	68bb      	ldr	r3, [r7, #8]
 81051e2:	4013      	ands	r3, r2
 81051e4:	68ba      	ldr	r2, [r7, #8]
 81051e6:	429a      	cmp	r2, r3
 81051e8:	bf0c      	ite	eq
 81051ea:	2301      	moveq	r3, #1
 81051ec:	2300      	movne	r3, #0
 81051ee:	b2db      	uxtb	r3, r3
 81051f0:	461a      	mov	r2, r3
 81051f2:	79fb      	ldrb	r3, [r7, #7]
 81051f4:	429a      	cmp	r2, r3
 81051f6:	d0df      	beq.n	81051b8 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 81051f8:	2300      	movs	r3, #0
}
 81051fa:	4618      	mov	r0, r3
 81051fc:	3710      	adds	r7, #16
 81051fe:	46bd      	mov	sp, r7
 8105200:	bd80      	pop	{r7, pc}

08105202 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8105202:	b480      	push	{r7}
 8105204:	b085      	sub	sp, #20
 8105206:	af00      	add	r7, sp, #0
 8105208:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810520a:	687b      	ldr	r3, [r7, #4]
 810520c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810520e:	095b      	lsrs	r3, r3, #5
 8105210:	3301      	adds	r3, #1
 8105212:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8105214:	687b      	ldr	r3, [r7, #4]
 8105216:	68db      	ldr	r3, [r3, #12]
 8105218:	3301      	adds	r3, #1
 810521a:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810521c:	68bb      	ldr	r3, [r7, #8]
 810521e:	3307      	adds	r3, #7
 8105220:	08db      	lsrs	r3, r3, #3
 8105222:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8105224:	68bb      	ldr	r3, [r7, #8]
 8105226:	68fa      	ldr	r2, [r7, #12]
 8105228:	fb02 f303 	mul.w	r3, r2, r3
}
 810522c:	4618      	mov	r0, r3
 810522e:	3714      	adds	r7, #20
 8105230:	46bd      	mov	sp, r7
 8105232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105236:	4770      	bx	lr

08105238 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8105238:	b580      	push	{r7, lr}
 810523a:	b082      	sub	sp, #8
 810523c:	af00      	add	r7, sp, #0
 810523e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8105240:	687b      	ldr	r3, [r7, #4]
 8105242:	2b00      	cmp	r3, #0
 8105244:	d101      	bne.n	810524a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8105246:	2301      	movs	r3, #1
 8105248:	e042      	b.n	81052d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810524a:	687b      	ldr	r3, [r7, #4]
 810524c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8105250:	2b00      	cmp	r3, #0
 8105252:	d106      	bne.n	8105262 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8105254:	687b      	ldr	r3, [r7, #4]
 8105256:	2200      	movs	r2, #0
 8105258:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810525c:	6878      	ldr	r0, [r7, #4]
 810525e:	f7fc fc75 	bl	8101b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8105262:	687b      	ldr	r3, [r7, #4]
 8105264:	2224      	movs	r2, #36	@ 0x24
 8105266:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810526a:	687b      	ldr	r3, [r7, #4]
 810526c:	681b      	ldr	r3, [r3, #0]
 810526e:	681a      	ldr	r2, [r3, #0]
 8105270:	687b      	ldr	r3, [r7, #4]
 8105272:	681b      	ldr	r3, [r3, #0]
 8105274:	f022 0201 	bic.w	r2, r2, #1
 8105278:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810527a:	687b      	ldr	r3, [r7, #4]
 810527c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810527e:	2b00      	cmp	r3, #0
 8105280:	d002      	beq.n	8105288 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8105282:	6878      	ldr	r0, [r7, #4]
 8105284:	f000 fe1e 	bl	8105ec4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8105288:	6878      	ldr	r0, [r7, #4]
 810528a:	f000 f8b3 	bl	81053f4 <UART_SetConfig>
 810528e:	4603      	mov	r3, r0
 8105290:	2b01      	cmp	r3, #1
 8105292:	d101      	bne.n	8105298 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8105294:	2301      	movs	r3, #1
 8105296:	e01b      	b.n	81052d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8105298:	687b      	ldr	r3, [r7, #4]
 810529a:	681b      	ldr	r3, [r3, #0]
 810529c:	685a      	ldr	r2, [r3, #4]
 810529e:	687b      	ldr	r3, [r7, #4]
 81052a0:	681b      	ldr	r3, [r3, #0]
 81052a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 81052a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81052a8:	687b      	ldr	r3, [r7, #4]
 81052aa:	681b      	ldr	r3, [r3, #0]
 81052ac:	689a      	ldr	r2, [r3, #8]
 81052ae:	687b      	ldr	r3, [r7, #4]
 81052b0:	681b      	ldr	r3, [r3, #0]
 81052b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 81052b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81052b8:	687b      	ldr	r3, [r7, #4]
 81052ba:	681b      	ldr	r3, [r3, #0]
 81052bc:	681a      	ldr	r2, [r3, #0]
 81052be:	687b      	ldr	r3, [r7, #4]
 81052c0:	681b      	ldr	r3, [r3, #0]
 81052c2:	f042 0201 	orr.w	r2, r2, #1
 81052c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 81052c8:	6878      	ldr	r0, [r7, #4]
 81052ca:	f000 fe9d 	bl	8106008 <UART_CheckIdleState>
 81052ce:	4603      	mov	r3, r0
}
 81052d0:	4618      	mov	r0, r3
 81052d2:	3708      	adds	r7, #8
 81052d4:	46bd      	mov	sp, r7
 81052d6:	bd80      	pop	{r7, pc}

081052d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 81052d8:	b580      	push	{r7, lr}
 81052da:	b08a      	sub	sp, #40	@ 0x28
 81052dc:	af02      	add	r7, sp, #8
 81052de:	60f8      	str	r0, [r7, #12]
 81052e0:	60b9      	str	r1, [r7, #8]
 81052e2:	603b      	str	r3, [r7, #0]
 81052e4:	4613      	mov	r3, r2
 81052e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 81052e8:	68fb      	ldr	r3, [r7, #12]
 81052ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81052ee:	2b20      	cmp	r3, #32
 81052f0:	d17b      	bne.n	81053ea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 81052f2:	68bb      	ldr	r3, [r7, #8]
 81052f4:	2b00      	cmp	r3, #0
 81052f6:	d002      	beq.n	81052fe <HAL_UART_Transmit+0x26>
 81052f8:	88fb      	ldrh	r3, [r7, #6]
 81052fa:	2b00      	cmp	r3, #0
 81052fc:	d101      	bne.n	8105302 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 81052fe:	2301      	movs	r3, #1
 8105300:	e074      	b.n	81053ec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105302:	68fb      	ldr	r3, [r7, #12]
 8105304:	2200      	movs	r2, #0
 8105306:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810530a:	68fb      	ldr	r3, [r7, #12]
 810530c:	2221      	movs	r2, #33	@ 0x21
 810530e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8105312:	f7fc fd99 	bl	8101e48 <HAL_GetTick>
 8105316:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8105318:	68fb      	ldr	r3, [r7, #12]
 810531a:	88fa      	ldrh	r2, [r7, #6]
 810531c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8105320:	68fb      	ldr	r3, [r7, #12]
 8105322:	88fa      	ldrh	r2, [r7, #6]
 8105324:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8105328:	68fb      	ldr	r3, [r7, #12]
 810532a:	689b      	ldr	r3, [r3, #8]
 810532c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105330:	d108      	bne.n	8105344 <HAL_UART_Transmit+0x6c>
 8105332:	68fb      	ldr	r3, [r7, #12]
 8105334:	691b      	ldr	r3, [r3, #16]
 8105336:	2b00      	cmp	r3, #0
 8105338:	d104      	bne.n	8105344 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810533a:	2300      	movs	r3, #0
 810533c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810533e:	68bb      	ldr	r3, [r7, #8]
 8105340:	61bb      	str	r3, [r7, #24]
 8105342:	e003      	b.n	810534c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8105344:	68bb      	ldr	r3, [r7, #8]
 8105346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8105348:	2300      	movs	r3, #0
 810534a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 810534c:	e030      	b.n	81053b0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810534e:	683b      	ldr	r3, [r7, #0]
 8105350:	9300      	str	r3, [sp, #0]
 8105352:	697b      	ldr	r3, [r7, #20]
 8105354:	2200      	movs	r2, #0
 8105356:	2180      	movs	r1, #128	@ 0x80
 8105358:	68f8      	ldr	r0, [r7, #12]
 810535a:	f000 feff 	bl	810615c <UART_WaitOnFlagUntilTimeout>
 810535e:	4603      	mov	r3, r0
 8105360:	2b00      	cmp	r3, #0
 8105362:	d005      	beq.n	8105370 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8105364:	68fb      	ldr	r3, [r7, #12]
 8105366:	2220      	movs	r2, #32
 8105368:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 810536c:	2303      	movs	r3, #3
 810536e:	e03d      	b.n	81053ec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8105370:	69fb      	ldr	r3, [r7, #28]
 8105372:	2b00      	cmp	r3, #0
 8105374:	d10b      	bne.n	810538e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8105376:	69bb      	ldr	r3, [r7, #24]
 8105378:	881b      	ldrh	r3, [r3, #0]
 810537a:	461a      	mov	r2, r3
 810537c:	68fb      	ldr	r3, [r7, #12]
 810537e:	681b      	ldr	r3, [r3, #0]
 8105380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8105384:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8105386:	69bb      	ldr	r3, [r7, #24]
 8105388:	3302      	adds	r3, #2
 810538a:	61bb      	str	r3, [r7, #24]
 810538c:	e007      	b.n	810539e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 810538e:	69fb      	ldr	r3, [r7, #28]
 8105390:	781a      	ldrb	r2, [r3, #0]
 8105392:	68fb      	ldr	r3, [r7, #12]
 8105394:	681b      	ldr	r3, [r3, #0]
 8105396:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8105398:	69fb      	ldr	r3, [r7, #28]
 810539a:	3301      	adds	r3, #1
 810539c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 810539e:	68fb      	ldr	r3, [r7, #12]
 81053a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81053a4:	b29b      	uxth	r3, r3
 81053a6:	3b01      	subs	r3, #1
 81053a8:	b29a      	uxth	r2, r3
 81053aa:	68fb      	ldr	r3, [r7, #12]
 81053ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 81053b0:	68fb      	ldr	r3, [r7, #12]
 81053b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 81053b6:	b29b      	uxth	r3, r3
 81053b8:	2b00      	cmp	r3, #0
 81053ba:	d1c8      	bne.n	810534e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81053bc:	683b      	ldr	r3, [r7, #0]
 81053be:	9300      	str	r3, [sp, #0]
 81053c0:	697b      	ldr	r3, [r7, #20]
 81053c2:	2200      	movs	r2, #0
 81053c4:	2140      	movs	r1, #64	@ 0x40
 81053c6:	68f8      	ldr	r0, [r7, #12]
 81053c8:	f000 fec8 	bl	810615c <UART_WaitOnFlagUntilTimeout>
 81053cc:	4603      	mov	r3, r0
 81053ce:	2b00      	cmp	r3, #0
 81053d0:	d005      	beq.n	81053de <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 81053d2:	68fb      	ldr	r3, [r7, #12]
 81053d4:	2220      	movs	r2, #32
 81053d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 81053da:	2303      	movs	r3, #3
 81053dc:	e006      	b.n	81053ec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 81053de:	68fb      	ldr	r3, [r7, #12]
 81053e0:	2220      	movs	r2, #32
 81053e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 81053e6:	2300      	movs	r3, #0
 81053e8:	e000      	b.n	81053ec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 81053ea:	2302      	movs	r3, #2
  }
}
 81053ec:	4618      	mov	r0, r3
 81053ee:	3720      	adds	r7, #32
 81053f0:	46bd      	mov	sp, r7
 81053f2:	bd80      	pop	{r7, pc}

081053f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 81053f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81053f8:	b092      	sub	sp, #72	@ 0x48
 81053fa:	af00      	add	r7, sp, #0
 81053fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81053fe:	2300      	movs	r3, #0
 8105400:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8105404:	697b      	ldr	r3, [r7, #20]
 8105406:	689a      	ldr	r2, [r3, #8]
 8105408:	697b      	ldr	r3, [r7, #20]
 810540a:	691b      	ldr	r3, [r3, #16]
 810540c:	431a      	orrs	r2, r3
 810540e:	697b      	ldr	r3, [r7, #20]
 8105410:	695b      	ldr	r3, [r3, #20]
 8105412:	431a      	orrs	r2, r3
 8105414:	697b      	ldr	r3, [r7, #20]
 8105416:	69db      	ldr	r3, [r3, #28]
 8105418:	4313      	orrs	r3, r2
 810541a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810541c:	697b      	ldr	r3, [r7, #20]
 810541e:	681b      	ldr	r3, [r3, #0]
 8105420:	681a      	ldr	r2, [r3, #0]
 8105422:	4bbd      	ldr	r3, [pc, #756]	@ (8105718 <UART_SetConfig+0x324>)
 8105424:	4013      	ands	r3, r2
 8105426:	697a      	ldr	r2, [r7, #20]
 8105428:	6812      	ldr	r2, [r2, #0]
 810542a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810542c:	430b      	orrs	r3, r1
 810542e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8105430:	697b      	ldr	r3, [r7, #20]
 8105432:	681b      	ldr	r3, [r3, #0]
 8105434:	685b      	ldr	r3, [r3, #4]
 8105436:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810543a:	697b      	ldr	r3, [r7, #20]
 810543c:	68da      	ldr	r2, [r3, #12]
 810543e:	697b      	ldr	r3, [r7, #20]
 8105440:	681b      	ldr	r3, [r3, #0]
 8105442:	430a      	orrs	r2, r1
 8105444:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8105446:	697b      	ldr	r3, [r7, #20]
 8105448:	699b      	ldr	r3, [r3, #24]
 810544a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810544c:	697b      	ldr	r3, [r7, #20]
 810544e:	681b      	ldr	r3, [r3, #0]
 8105450:	4ab2      	ldr	r2, [pc, #712]	@ (810571c <UART_SetConfig+0x328>)
 8105452:	4293      	cmp	r3, r2
 8105454:	d004      	beq.n	8105460 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8105456:	697b      	ldr	r3, [r7, #20]
 8105458:	6a1b      	ldr	r3, [r3, #32]
 810545a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810545c:	4313      	orrs	r3, r2
 810545e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8105460:	697b      	ldr	r3, [r7, #20]
 8105462:	681b      	ldr	r3, [r3, #0]
 8105464:	689b      	ldr	r3, [r3, #8]
 8105466:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810546a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810546e:	697a      	ldr	r2, [r7, #20]
 8105470:	6812      	ldr	r2, [r2, #0]
 8105472:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8105474:	430b      	orrs	r3, r1
 8105476:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8105478:	697b      	ldr	r3, [r7, #20]
 810547a:	681b      	ldr	r3, [r3, #0]
 810547c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810547e:	f023 010f 	bic.w	r1, r3, #15
 8105482:	697b      	ldr	r3, [r7, #20]
 8105484:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8105486:	697b      	ldr	r3, [r7, #20]
 8105488:	681b      	ldr	r3, [r3, #0]
 810548a:	430a      	orrs	r2, r1
 810548c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810548e:	697b      	ldr	r3, [r7, #20]
 8105490:	681b      	ldr	r3, [r3, #0]
 8105492:	4aa3      	ldr	r2, [pc, #652]	@ (8105720 <UART_SetConfig+0x32c>)
 8105494:	4293      	cmp	r3, r2
 8105496:	d177      	bne.n	8105588 <UART_SetConfig+0x194>
 8105498:	4ba2      	ldr	r3, [pc, #648]	@ (8105724 <UART_SetConfig+0x330>)
 810549a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810549c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81054a0:	2b28      	cmp	r3, #40	@ 0x28
 81054a2:	d86d      	bhi.n	8105580 <UART_SetConfig+0x18c>
 81054a4:	a201      	add	r2, pc, #4	@ (adr r2, 81054ac <UART_SetConfig+0xb8>)
 81054a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81054aa:	bf00      	nop
 81054ac:	08105551 	.word	0x08105551
 81054b0:	08105581 	.word	0x08105581
 81054b4:	08105581 	.word	0x08105581
 81054b8:	08105581 	.word	0x08105581
 81054bc:	08105581 	.word	0x08105581
 81054c0:	08105581 	.word	0x08105581
 81054c4:	08105581 	.word	0x08105581
 81054c8:	08105581 	.word	0x08105581
 81054cc:	08105559 	.word	0x08105559
 81054d0:	08105581 	.word	0x08105581
 81054d4:	08105581 	.word	0x08105581
 81054d8:	08105581 	.word	0x08105581
 81054dc:	08105581 	.word	0x08105581
 81054e0:	08105581 	.word	0x08105581
 81054e4:	08105581 	.word	0x08105581
 81054e8:	08105581 	.word	0x08105581
 81054ec:	08105561 	.word	0x08105561
 81054f0:	08105581 	.word	0x08105581
 81054f4:	08105581 	.word	0x08105581
 81054f8:	08105581 	.word	0x08105581
 81054fc:	08105581 	.word	0x08105581
 8105500:	08105581 	.word	0x08105581
 8105504:	08105581 	.word	0x08105581
 8105508:	08105581 	.word	0x08105581
 810550c:	08105569 	.word	0x08105569
 8105510:	08105581 	.word	0x08105581
 8105514:	08105581 	.word	0x08105581
 8105518:	08105581 	.word	0x08105581
 810551c:	08105581 	.word	0x08105581
 8105520:	08105581 	.word	0x08105581
 8105524:	08105581 	.word	0x08105581
 8105528:	08105581 	.word	0x08105581
 810552c:	08105571 	.word	0x08105571
 8105530:	08105581 	.word	0x08105581
 8105534:	08105581 	.word	0x08105581
 8105538:	08105581 	.word	0x08105581
 810553c:	08105581 	.word	0x08105581
 8105540:	08105581 	.word	0x08105581
 8105544:	08105581 	.word	0x08105581
 8105548:	08105581 	.word	0x08105581
 810554c:	08105579 	.word	0x08105579
 8105550:	2301      	movs	r3, #1
 8105552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105556:	e220      	b.n	810599a <UART_SetConfig+0x5a6>
 8105558:	2304      	movs	r3, #4
 810555a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810555e:	e21c      	b.n	810599a <UART_SetConfig+0x5a6>
 8105560:	2308      	movs	r3, #8
 8105562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105566:	e218      	b.n	810599a <UART_SetConfig+0x5a6>
 8105568:	2310      	movs	r3, #16
 810556a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810556e:	e214      	b.n	810599a <UART_SetConfig+0x5a6>
 8105570:	2320      	movs	r3, #32
 8105572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105576:	e210      	b.n	810599a <UART_SetConfig+0x5a6>
 8105578:	2340      	movs	r3, #64	@ 0x40
 810557a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810557e:	e20c      	b.n	810599a <UART_SetConfig+0x5a6>
 8105580:	2380      	movs	r3, #128	@ 0x80
 8105582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105586:	e208      	b.n	810599a <UART_SetConfig+0x5a6>
 8105588:	697b      	ldr	r3, [r7, #20]
 810558a:	681b      	ldr	r3, [r3, #0]
 810558c:	4a66      	ldr	r2, [pc, #408]	@ (8105728 <UART_SetConfig+0x334>)
 810558e:	4293      	cmp	r3, r2
 8105590:	d130      	bne.n	81055f4 <UART_SetConfig+0x200>
 8105592:	4b64      	ldr	r3, [pc, #400]	@ (8105724 <UART_SetConfig+0x330>)
 8105594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105596:	f003 0307 	and.w	r3, r3, #7
 810559a:	2b05      	cmp	r3, #5
 810559c:	d826      	bhi.n	81055ec <UART_SetConfig+0x1f8>
 810559e:	a201      	add	r2, pc, #4	@ (adr r2, 81055a4 <UART_SetConfig+0x1b0>)
 81055a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81055a4:	081055bd 	.word	0x081055bd
 81055a8:	081055c5 	.word	0x081055c5
 81055ac:	081055cd 	.word	0x081055cd
 81055b0:	081055d5 	.word	0x081055d5
 81055b4:	081055dd 	.word	0x081055dd
 81055b8:	081055e5 	.word	0x081055e5
 81055bc:	2300      	movs	r3, #0
 81055be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81055c2:	e1ea      	b.n	810599a <UART_SetConfig+0x5a6>
 81055c4:	2304      	movs	r3, #4
 81055c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81055ca:	e1e6      	b.n	810599a <UART_SetConfig+0x5a6>
 81055cc:	2308      	movs	r3, #8
 81055ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81055d2:	e1e2      	b.n	810599a <UART_SetConfig+0x5a6>
 81055d4:	2310      	movs	r3, #16
 81055d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81055da:	e1de      	b.n	810599a <UART_SetConfig+0x5a6>
 81055dc:	2320      	movs	r3, #32
 81055de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81055e2:	e1da      	b.n	810599a <UART_SetConfig+0x5a6>
 81055e4:	2340      	movs	r3, #64	@ 0x40
 81055e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81055ea:	e1d6      	b.n	810599a <UART_SetConfig+0x5a6>
 81055ec:	2380      	movs	r3, #128	@ 0x80
 81055ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81055f2:	e1d2      	b.n	810599a <UART_SetConfig+0x5a6>
 81055f4:	697b      	ldr	r3, [r7, #20]
 81055f6:	681b      	ldr	r3, [r3, #0]
 81055f8:	4a4c      	ldr	r2, [pc, #304]	@ (810572c <UART_SetConfig+0x338>)
 81055fa:	4293      	cmp	r3, r2
 81055fc:	d130      	bne.n	8105660 <UART_SetConfig+0x26c>
 81055fe:	4b49      	ldr	r3, [pc, #292]	@ (8105724 <UART_SetConfig+0x330>)
 8105600:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105602:	f003 0307 	and.w	r3, r3, #7
 8105606:	2b05      	cmp	r3, #5
 8105608:	d826      	bhi.n	8105658 <UART_SetConfig+0x264>
 810560a:	a201      	add	r2, pc, #4	@ (adr r2, 8105610 <UART_SetConfig+0x21c>)
 810560c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105610:	08105629 	.word	0x08105629
 8105614:	08105631 	.word	0x08105631
 8105618:	08105639 	.word	0x08105639
 810561c:	08105641 	.word	0x08105641
 8105620:	08105649 	.word	0x08105649
 8105624:	08105651 	.word	0x08105651
 8105628:	2300      	movs	r3, #0
 810562a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810562e:	e1b4      	b.n	810599a <UART_SetConfig+0x5a6>
 8105630:	2304      	movs	r3, #4
 8105632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105636:	e1b0      	b.n	810599a <UART_SetConfig+0x5a6>
 8105638:	2308      	movs	r3, #8
 810563a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810563e:	e1ac      	b.n	810599a <UART_SetConfig+0x5a6>
 8105640:	2310      	movs	r3, #16
 8105642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105646:	e1a8      	b.n	810599a <UART_SetConfig+0x5a6>
 8105648:	2320      	movs	r3, #32
 810564a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810564e:	e1a4      	b.n	810599a <UART_SetConfig+0x5a6>
 8105650:	2340      	movs	r3, #64	@ 0x40
 8105652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105656:	e1a0      	b.n	810599a <UART_SetConfig+0x5a6>
 8105658:	2380      	movs	r3, #128	@ 0x80
 810565a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810565e:	e19c      	b.n	810599a <UART_SetConfig+0x5a6>
 8105660:	697b      	ldr	r3, [r7, #20]
 8105662:	681b      	ldr	r3, [r3, #0]
 8105664:	4a32      	ldr	r2, [pc, #200]	@ (8105730 <UART_SetConfig+0x33c>)
 8105666:	4293      	cmp	r3, r2
 8105668:	d130      	bne.n	81056cc <UART_SetConfig+0x2d8>
 810566a:	4b2e      	ldr	r3, [pc, #184]	@ (8105724 <UART_SetConfig+0x330>)
 810566c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810566e:	f003 0307 	and.w	r3, r3, #7
 8105672:	2b05      	cmp	r3, #5
 8105674:	d826      	bhi.n	81056c4 <UART_SetConfig+0x2d0>
 8105676:	a201      	add	r2, pc, #4	@ (adr r2, 810567c <UART_SetConfig+0x288>)
 8105678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810567c:	08105695 	.word	0x08105695
 8105680:	0810569d 	.word	0x0810569d
 8105684:	081056a5 	.word	0x081056a5
 8105688:	081056ad 	.word	0x081056ad
 810568c:	081056b5 	.word	0x081056b5
 8105690:	081056bd 	.word	0x081056bd
 8105694:	2300      	movs	r3, #0
 8105696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810569a:	e17e      	b.n	810599a <UART_SetConfig+0x5a6>
 810569c:	2304      	movs	r3, #4
 810569e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81056a2:	e17a      	b.n	810599a <UART_SetConfig+0x5a6>
 81056a4:	2308      	movs	r3, #8
 81056a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81056aa:	e176      	b.n	810599a <UART_SetConfig+0x5a6>
 81056ac:	2310      	movs	r3, #16
 81056ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81056b2:	e172      	b.n	810599a <UART_SetConfig+0x5a6>
 81056b4:	2320      	movs	r3, #32
 81056b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81056ba:	e16e      	b.n	810599a <UART_SetConfig+0x5a6>
 81056bc:	2340      	movs	r3, #64	@ 0x40
 81056be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81056c2:	e16a      	b.n	810599a <UART_SetConfig+0x5a6>
 81056c4:	2380      	movs	r3, #128	@ 0x80
 81056c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81056ca:	e166      	b.n	810599a <UART_SetConfig+0x5a6>
 81056cc:	697b      	ldr	r3, [r7, #20]
 81056ce:	681b      	ldr	r3, [r3, #0]
 81056d0:	4a18      	ldr	r2, [pc, #96]	@ (8105734 <UART_SetConfig+0x340>)
 81056d2:	4293      	cmp	r3, r2
 81056d4:	d140      	bne.n	8105758 <UART_SetConfig+0x364>
 81056d6:	4b13      	ldr	r3, [pc, #76]	@ (8105724 <UART_SetConfig+0x330>)
 81056d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81056da:	f003 0307 	and.w	r3, r3, #7
 81056de:	2b05      	cmp	r3, #5
 81056e0:	d836      	bhi.n	8105750 <UART_SetConfig+0x35c>
 81056e2:	a201      	add	r2, pc, #4	@ (adr r2, 81056e8 <UART_SetConfig+0x2f4>)
 81056e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81056e8:	08105701 	.word	0x08105701
 81056ec:	08105709 	.word	0x08105709
 81056f0:	08105711 	.word	0x08105711
 81056f4:	08105739 	.word	0x08105739
 81056f8:	08105741 	.word	0x08105741
 81056fc:	08105749 	.word	0x08105749
 8105700:	2300      	movs	r3, #0
 8105702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105706:	e148      	b.n	810599a <UART_SetConfig+0x5a6>
 8105708:	2304      	movs	r3, #4
 810570a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810570e:	e144      	b.n	810599a <UART_SetConfig+0x5a6>
 8105710:	2308      	movs	r3, #8
 8105712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105716:	e140      	b.n	810599a <UART_SetConfig+0x5a6>
 8105718:	cfff69f3 	.word	0xcfff69f3
 810571c:	58000c00 	.word	0x58000c00
 8105720:	40011000 	.word	0x40011000
 8105724:	58024400 	.word	0x58024400
 8105728:	40004400 	.word	0x40004400
 810572c:	40004800 	.word	0x40004800
 8105730:	40004c00 	.word	0x40004c00
 8105734:	40005000 	.word	0x40005000
 8105738:	2310      	movs	r3, #16
 810573a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810573e:	e12c      	b.n	810599a <UART_SetConfig+0x5a6>
 8105740:	2320      	movs	r3, #32
 8105742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105746:	e128      	b.n	810599a <UART_SetConfig+0x5a6>
 8105748:	2340      	movs	r3, #64	@ 0x40
 810574a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810574e:	e124      	b.n	810599a <UART_SetConfig+0x5a6>
 8105750:	2380      	movs	r3, #128	@ 0x80
 8105752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105756:	e120      	b.n	810599a <UART_SetConfig+0x5a6>
 8105758:	697b      	ldr	r3, [r7, #20]
 810575a:	681b      	ldr	r3, [r3, #0]
 810575c:	4acb      	ldr	r2, [pc, #812]	@ (8105a8c <UART_SetConfig+0x698>)
 810575e:	4293      	cmp	r3, r2
 8105760:	d176      	bne.n	8105850 <UART_SetConfig+0x45c>
 8105762:	4bcb      	ldr	r3, [pc, #812]	@ (8105a90 <UART_SetConfig+0x69c>)
 8105764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105766:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810576a:	2b28      	cmp	r3, #40	@ 0x28
 810576c:	d86c      	bhi.n	8105848 <UART_SetConfig+0x454>
 810576e:	a201      	add	r2, pc, #4	@ (adr r2, 8105774 <UART_SetConfig+0x380>)
 8105770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105774:	08105819 	.word	0x08105819
 8105778:	08105849 	.word	0x08105849
 810577c:	08105849 	.word	0x08105849
 8105780:	08105849 	.word	0x08105849
 8105784:	08105849 	.word	0x08105849
 8105788:	08105849 	.word	0x08105849
 810578c:	08105849 	.word	0x08105849
 8105790:	08105849 	.word	0x08105849
 8105794:	08105821 	.word	0x08105821
 8105798:	08105849 	.word	0x08105849
 810579c:	08105849 	.word	0x08105849
 81057a0:	08105849 	.word	0x08105849
 81057a4:	08105849 	.word	0x08105849
 81057a8:	08105849 	.word	0x08105849
 81057ac:	08105849 	.word	0x08105849
 81057b0:	08105849 	.word	0x08105849
 81057b4:	08105829 	.word	0x08105829
 81057b8:	08105849 	.word	0x08105849
 81057bc:	08105849 	.word	0x08105849
 81057c0:	08105849 	.word	0x08105849
 81057c4:	08105849 	.word	0x08105849
 81057c8:	08105849 	.word	0x08105849
 81057cc:	08105849 	.word	0x08105849
 81057d0:	08105849 	.word	0x08105849
 81057d4:	08105831 	.word	0x08105831
 81057d8:	08105849 	.word	0x08105849
 81057dc:	08105849 	.word	0x08105849
 81057e0:	08105849 	.word	0x08105849
 81057e4:	08105849 	.word	0x08105849
 81057e8:	08105849 	.word	0x08105849
 81057ec:	08105849 	.word	0x08105849
 81057f0:	08105849 	.word	0x08105849
 81057f4:	08105839 	.word	0x08105839
 81057f8:	08105849 	.word	0x08105849
 81057fc:	08105849 	.word	0x08105849
 8105800:	08105849 	.word	0x08105849
 8105804:	08105849 	.word	0x08105849
 8105808:	08105849 	.word	0x08105849
 810580c:	08105849 	.word	0x08105849
 8105810:	08105849 	.word	0x08105849
 8105814:	08105841 	.word	0x08105841
 8105818:	2301      	movs	r3, #1
 810581a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810581e:	e0bc      	b.n	810599a <UART_SetConfig+0x5a6>
 8105820:	2304      	movs	r3, #4
 8105822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105826:	e0b8      	b.n	810599a <UART_SetConfig+0x5a6>
 8105828:	2308      	movs	r3, #8
 810582a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810582e:	e0b4      	b.n	810599a <UART_SetConfig+0x5a6>
 8105830:	2310      	movs	r3, #16
 8105832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105836:	e0b0      	b.n	810599a <UART_SetConfig+0x5a6>
 8105838:	2320      	movs	r3, #32
 810583a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810583e:	e0ac      	b.n	810599a <UART_SetConfig+0x5a6>
 8105840:	2340      	movs	r3, #64	@ 0x40
 8105842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105846:	e0a8      	b.n	810599a <UART_SetConfig+0x5a6>
 8105848:	2380      	movs	r3, #128	@ 0x80
 810584a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810584e:	e0a4      	b.n	810599a <UART_SetConfig+0x5a6>
 8105850:	697b      	ldr	r3, [r7, #20]
 8105852:	681b      	ldr	r3, [r3, #0]
 8105854:	4a8f      	ldr	r2, [pc, #572]	@ (8105a94 <UART_SetConfig+0x6a0>)
 8105856:	4293      	cmp	r3, r2
 8105858:	d130      	bne.n	81058bc <UART_SetConfig+0x4c8>
 810585a:	4b8d      	ldr	r3, [pc, #564]	@ (8105a90 <UART_SetConfig+0x69c>)
 810585c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810585e:	f003 0307 	and.w	r3, r3, #7
 8105862:	2b05      	cmp	r3, #5
 8105864:	d826      	bhi.n	81058b4 <UART_SetConfig+0x4c0>
 8105866:	a201      	add	r2, pc, #4	@ (adr r2, 810586c <UART_SetConfig+0x478>)
 8105868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810586c:	08105885 	.word	0x08105885
 8105870:	0810588d 	.word	0x0810588d
 8105874:	08105895 	.word	0x08105895
 8105878:	0810589d 	.word	0x0810589d
 810587c:	081058a5 	.word	0x081058a5
 8105880:	081058ad 	.word	0x081058ad
 8105884:	2300      	movs	r3, #0
 8105886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810588a:	e086      	b.n	810599a <UART_SetConfig+0x5a6>
 810588c:	2304      	movs	r3, #4
 810588e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105892:	e082      	b.n	810599a <UART_SetConfig+0x5a6>
 8105894:	2308      	movs	r3, #8
 8105896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810589a:	e07e      	b.n	810599a <UART_SetConfig+0x5a6>
 810589c:	2310      	movs	r3, #16
 810589e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81058a2:	e07a      	b.n	810599a <UART_SetConfig+0x5a6>
 81058a4:	2320      	movs	r3, #32
 81058a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81058aa:	e076      	b.n	810599a <UART_SetConfig+0x5a6>
 81058ac:	2340      	movs	r3, #64	@ 0x40
 81058ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81058b2:	e072      	b.n	810599a <UART_SetConfig+0x5a6>
 81058b4:	2380      	movs	r3, #128	@ 0x80
 81058b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81058ba:	e06e      	b.n	810599a <UART_SetConfig+0x5a6>
 81058bc:	697b      	ldr	r3, [r7, #20]
 81058be:	681b      	ldr	r3, [r3, #0]
 81058c0:	4a75      	ldr	r2, [pc, #468]	@ (8105a98 <UART_SetConfig+0x6a4>)
 81058c2:	4293      	cmp	r3, r2
 81058c4:	d130      	bne.n	8105928 <UART_SetConfig+0x534>
 81058c6:	4b72      	ldr	r3, [pc, #456]	@ (8105a90 <UART_SetConfig+0x69c>)
 81058c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81058ca:	f003 0307 	and.w	r3, r3, #7
 81058ce:	2b05      	cmp	r3, #5
 81058d0:	d826      	bhi.n	8105920 <UART_SetConfig+0x52c>
 81058d2:	a201      	add	r2, pc, #4	@ (adr r2, 81058d8 <UART_SetConfig+0x4e4>)
 81058d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81058d8:	081058f1 	.word	0x081058f1
 81058dc:	081058f9 	.word	0x081058f9
 81058e0:	08105901 	.word	0x08105901
 81058e4:	08105909 	.word	0x08105909
 81058e8:	08105911 	.word	0x08105911
 81058ec:	08105919 	.word	0x08105919
 81058f0:	2300      	movs	r3, #0
 81058f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81058f6:	e050      	b.n	810599a <UART_SetConfig+0x5a6>
 81058f8:	2304      	movs	r3, #4
 81058fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81058fe:	e04c      	b.n	810599a <UART_SetConfig+0x5a6>
 8105900:	2308      	movs	r3, #8
 8105902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105906:	e048      	b.n	810599a <UART_SetConfig+0x5a6>
 8105908:	2310      	movs	r3, #16
 810590a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810590e:	e044      	b.n	810599a <UART_SetConfig+0x5a6>
 8105910:	2320      	movs	r3, #32
 8105912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105916:	e040      	b.n	810599a <UART_SetConfig+0x5a6>
 8105918:	2340      	movs	r3, #64	@ 0x40
 810591a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810591e:	e03c      	b.n	810599a <UART_SetConfig+0x5a6>
 8105920:	2380      	movs	r3, #128	@ 0x80
 8105922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105926:	e038      	b.n	810599a <UART_SetConfig+0x5a6>
 8105928:	697b      	ldr	r3, [r7, #20]
 810592a:	681b      	ldr	r3, [r3, #0]
 810592c:	4a5b      	ldr	r2, [pc, #364]	@ (8105a9c <UART_SetConfig+0x6a8>)
 810592e:	4293      	cmp	r3, r2
 8105930:	d130      	bne.n	8105994 <UART_SetConfig+0x5a0>
 8105932:	4b57      	ldr	r3, [pc, #348]	@ (8105a90 <UART_SetConfig+0x69c>)
 8105934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105936:	f003 0307 	and.w	r3, r3, #7
 810593a:	2b05      	cmp	r3, #5
 810593c:	d826      	bhi.n	810598c <UART_SetConfig+0x598>
 810593e:	a201      	add	r2, pc, #4	@ (adr r2, 8105944 <UART_SetConfig+0x550>)
 8105940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105944:	0810595d 	.word	0x0810595d
 8105948:	08105965 	.word	0x08105965
 810594c:	0810596d 	.word	0x0810596d
 8105950:	08105975 	.word	0x08105975
 8105954:	0810597d 	.word	0x0810597d
 8105958:	08105985 	.word	0x08105985
 810595c:	2302      	movs	r3, #2
 810595e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105962:	e01a      	b.n	810599a <UART_SetConfig+0x5a6>
 8105964:	2304      	movs	r3, #4
 8105966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810596a:	e016      	b.n	810599a <UART_SetConfig+0x5a6>
 810596c:	2308      	movs	r3, #8
 810596e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105972:	e012      	b.n	810599a <UART_SetConfig+0x5a6>
 8105974:	2310      	movs	r3, #16
 8105976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810597a:	e00e      	b.n	810599a <UART_SetConfig+0x5a6>
 810597c:	2320      	movs	r3, #32
 810597e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105982:	e00a      	b.n	810599a <UART_SetConfig+0x5a6>
 8105984:	2340      	movs	r3, #64	@ 0x40
 8105986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810598a:	e006      	b.n	810599a <UART_SetConfig+0x5a6>
 810598c:	2380      	movs	r3, #128	@ 0x80
 810598e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8105992:	e002      	b.n	810599a <UART_SetConfig+0x5a6>
 8105994:	2380      	movs	r3, #128	@ 0x80
 8105996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810599a:	697b      	ldr	r3, [r7, #20]
 810599c:	681b      	ldr	r3, [r3, #0]
 810599e:	4a3f      	ldr	r2, [pc, #252]	@ (8105a9c <UART_SetConfig+0x6a8>)
 81059a0:	4293      	cmp	r3, r2
 81059a2:	f040 80f8 	bne.w	8105b96 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81059a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81059aa:	2b20      	cmp	r3, #32
 81059ac:	dc46      	bgt.n	8105a3c <UART_SetConfig+0x648>
 81059ae:	2b02      	cmp	r3, #2
 81059b0:	f2c0 8082 	blt.w	8105ab8 <UART_SetConfig+0x6c4>
 81059b4:	3b02      	subs	r3, #2
 81059b6:	2b1e      	cmp	r3, #30
 81059b8:	d87e      	bhi.n	8105ab8 <UART_SetConfig+0x6c4>
 81059ba:	a201      	add	r2, pc, #4	@ (adr r2, 81059c0 <UART_SetConfig+0x5cc>)
 81059bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81059c0:	08105a43 	.word	0x08105a43
 81059c4:	08105ab9 	.word	0x08105ab9
 81059c8:	08105a4b 	.word	0x08105a4b
 81059cc:	08105ab9 	.word	0x08105ab9
 81059d0:	08105ab9 	.word	0x08105ab9
 81059d4:	08105ab9 	.word	0x08105ab9
 81059d8:	08105a5b 	.word	0x08105a5b
 81059dc:	08105ab9 	.word	0x08105ab9
 81059e0:	08105ab9 	.word	0x08105ab9
 81059e4:	08105ab9 	.word	0x08105ab9
 81059e8:	08105ab9 	.word	0x08105ab9
 81059ec:	08105ab9 	.word	0x08105ab9
 81059f0:	08105ab9 	.word	0x08105ab9
 81059f4:	08105ab9 	.word	0x08105ab9
 81059f8:	08105a6b 	.word	0x08105a6b
 81059fc:	08105ab9 	.word	0x08105ab9
 8105a00:	08105ab9 	.word	0x08105ab9
 8105a04:	08105ab9 	.word	0x08105ab9
 8105a08:	08105ab9 	.word	0x08105ab9
 8105a0c:	08105ab9 	.word	0x08105ab9
 8105a10:	08105ab9 	.word	0x08105ab9
 8105a14:	08105ab9 	.word	0x08105ab9
 8105a18:	08105ab9 	.word	0x08105ab9
 8105a1c:	08105ab9 	.word	0x08105ab9
 8105a20:	08105ab9 	.word	0x08105ab9
 8105a24:	08105ab9 	.word	0x08105ab9
 8105a28:	08105ab9 	.word	0x08105ab9
 8105a2c:	08105ab9 	.word	0x08105ab9
 8105a30:	08105ab9 	.word	0x08105ab9
 8105a34:	08105ab9 	.word	0x08105ab9
 8105a38:	08105aab 	.word	0x08105aab
 8105a3c:	2b40      	cmp	r3, #64	@ 0x40
 8105a3e:	d037      	beq.n	8105ab0 <UART_SetConfig+0x6bc>
 8105a40:	e03a      	b.n	8105ab8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8105a42:	f7fe f96f 	bl	8103d24 <HAL_RCCEx_GetD3PCLK1Freq>
 8105a46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8105a48:	e03c      	b.n	8105ac4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105a4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105a4e:	4618      	mov	r0, r3
 8105a50:	f7fe f97e 	bl	8103d50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105a58:	e034      	b.n	8105ac4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105a5a:	f107 0318 	add.w	r3, r7, #24
 8105a5e:	4618      	mov	r0, r3
 8105a60:	f7fe faca 	bl	8103ff8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105a64:	69fb      	ldr	r3, [r7, #28]
 8105a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105a68:	e02c      	b.n	8105ac4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105a6a:	4b09      	ldr	r3, [pc, #36]	@ (8105a90 <UART_SetConfig+0x69c>)
 8105a6c:	681b      	ldr	r3, [r3, #0]
 8105a6e:	f003 0320 	and.w	r3, r3, #32
 8105a72:	2b00      	cmp	r3, #0
 8105a74:	d016      	beq.n	8105aa4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105a76:	4b06      	ldr	r3, [pc, #24]	@ (8105a90 <UART_SetConfig+0x69c>)
 8105a78:	681b      	ldr	r3, [r3, #0]
 8105a7a:	08db      	lsrs	r3, r3, #3
 8105a7c:	f003 0303 	and.w	r3, r3, #3
 8105a80:	4a07      	ldr	r2, [pc, #28]	@ (8105aa0 <UART_SetConfig+0x6ac>)
 8105a82:	fa22 f303 	lsr.w	r3, r2, r3
 8105a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105a88:	e01c      	b.n	8105ac4 <UART_SetConfig+0x6d0>
 8105a8a:	bf00      	nop
 8105a8c:	40011400 	.word	0x40011400
 8105a90:	58024400 	.word	0x58024400
 8105a94:	40007800 	.word	0x40007800
 8105a98:	40007c00 	.word	0x40007c00
 8105a9c:	58000c00 	.word	0x58000c00
 8105aa0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8105aa4:	4b9d      	ldr	r3, [pc, #628]	@ (8105d1c <UART_SetConfig+0x928>)
 8105aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105aa8:	e00c      	b.n	8105ac4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105aaa:	4b9d      	ldr	r3, [pc, #628]	@ (8105d20 <UART_SetConfig+0x92c>)
 8105aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105aae:	e009      	b.n	8105ac4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105ab0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8105ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105ab6:	e005      	b.n	8105ac4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8105ab8:	2300      	movs	r3, #0
 8105aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8105abc:	2301      	movs	r3, #1
 8105abe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8105ac2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8105ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105ac6:	2b00      	cmp	r3, #0
 8105ac8:	f000 81de 	beq.w	8105e88 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8105acc:	697b      	ldr	r3, [r7, #20]
 8105ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105ad0:	4a94      	ldr	r2, [pc, #592]	@ (8105d24 <UART_SetConfig+0x930>)
 8105ad2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105ad6:	461a      	mov	r2, r3
 8105ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105ada:	fbb3 f3f2 	udiv	r3, r3, r2
 8105ade:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105ae0:	697b      	ldr	r3, [r7, #20]
 8105ae2:	685a      	ldr	r2, [r3, #4]
 8105ae4:	4613      	mov	r3, r2
 8105ae6:	005b      	lsls	r3, r3, #1
 8105ae8:	4413      	add	r3, r2
 8105aea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8105aec:	429a      	cmp	r2, r3
 8105aee:	d305      	bcc.n	8105afc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8105af0:	697b      	ldr	r3, [r7, #20]
 8105af2:	685b      	ldr	r3, [r3, #4]
 8105af4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105af6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8105af8:	429a      	cmp	r2, r3
 8105afa:	d903      	bls.n	8105b04 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8105afc:	2301      	movs	r3, #1
 8105afe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8105b02:	e1c1      	b.n	8105e88 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105b06:	2200      	movs	r2, #0
 8105b08:	60bb      	str	r3, [r7, #8]
 8105b0a:	60fa      	str	r2, [r7, #12]
 8105b0c:	697b      	ldr	r3, [r7, #20]
 8105b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105b10:	4a84      	ldr	r2, [pc, #528]	@ (8105d24 <UART_SetConfig+0x930>)
 8105b12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105b16:	b29b      	uxth	r3, r3
 8105b18:	2200      	movs	r2, #0
 8105b1a:	603b      	str	r3, [r7, #0]
 8105b1c:	607a      	str	r2, [r7, #4]
 8105b1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105b22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8105b26:	f7fb f8c7 	bl	8100cb8 <__aeabi_uldivmod>
 8105b2a:	4602      	mov	r2, r0
 8105b2c:	460b      	mov	r3, r1
 8105b2e:	4610      	mov	r0, r2
 8105b30:	4619      	mov	r1, r3
 8105b32:	f04f 0200 	mov.w	r2, #0
 8105b36:	f04f 0300 	mov.w	r3, #0
 8105b3a:	020b      	lsls	r3, r1, #8
 8105b3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8105b40:	0202      	lsls	r2, r0, #8
 8105b42:	6979      	ldr	r1, [r7, #20]
 8105b44:	6849      	ldr	r1, [r1, #4]
 8105b46:	0849      	lsrs	r1, r1, #1
 8105b48:	2000      	movs	r0, #0
 8105b4a:	460c      	mov	r4, r1
 8105b4c:	4605      	mov	r5, r0
 8105b4e:	eb12 0804 	adds.w	r8, r2, r4
 8105b52:	eb43 0905 	adc.w	r9, r3, r5
 8105b56:	697b      	ldr	r3, [r7, #20]
 8105b58:	685b      	ldr	r3, [r3, #4]
 8105b5a:	2200      	movs	r2, #0
 8105b5c:	469a      	mov	sl, r3
 8105b5e:	4693      	mov	fp, r2
 8105b60:	4652      	mov	r2, sl
 8105b62:	465b      	mov	r3, fp
 8105b64:	4640      	mov	r0, r8
 8105b66:	4649      	mov	r1, r9
 8105b68:	f7fb f8a6 	bl	8100cb8 <__aeabi_uldivmod>
 8105b6c:	4602      	mov	r2, r0
 8105b6e:	460b      	mov	r3, r1
 8105b70:	4613      	mov	r3, r2
 8105b72:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8105b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105b76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8105b7a:	d308      	bcc.n	8105b8e <UART_SetConfig+0x79a>
 8105b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105b7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105b82:	d204      	bcs.n	8105b8e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8105b84:	697b      	ldr	r3, [r7, #20]
 8105b86:	681b      	ldr	r3, [r3, #0]
 8105b88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8105b8a:	60da      	str	r2, [r3, #12]
 8105b8c:	e17c      	b.n	8105e88 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8105b8e:	2301      	movs	r3, #1
 8105b90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8105b94:	e178      	b.n	8105e88 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8105b96:	697b      	ldr	r3, [r7, #20]
 8105b98:	69db      	ldr	r3, [r3, #28]
 8105b9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8105b9e:	f040 80c5 	bne.w	8105d2c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8105ba2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8105ba6:	2b20      	cmp	r3, #32
 8105ba8:	dc48      	bgt.n	8105c3c <UART_SetConfig+0x848>
 8105baa:	2b00      	cmp	r3, #0
 8105bac:	db7b      	blt.n	8105ca6 <UART_SetConfig+0x8b2>
 8105bae:	2b20      	cmp	r3, #32
 8105bb0:	d879      	bhi.n	8105ca6 <UART_SetConfig+0x8b2>
 8105bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8105bb8 <UART_SetConfig+0x7c4>)
 8105bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105bb8:	08105c43 	.word	0x08105c43
 8105bbc:	08105c4b 	.word	0x08105c4b
 8105bc0:	08105ca7 	.word	0x08105ca7
 8105bc4:	08105ca7 	.word	0x08105ca7
 8105bc8:	08105c53 	.word	0x08105c53
 8105bcc:	08105ca7 	.word	0x08105ca7
 8105bd0:	08105ca7 	.word	0x08105ca7
 8105bd4:	08105ca7 	.word	0x08105ca7
 8105bd8:	08105c63 	.word	0x08105c63
 8105bdc:	08105ca7 	.word	0x08105ca7
 8105be0:	08105ca7 	.word	0x08105ca7
 8105be4:	08105ca7 	.word	0x08105ca7
 8105be8:	08105ca7 	.word	0x08105ca7
 8105bec:	08105ca7 	.word	0x08105ca7
 8105bf0:	08105ca7 	.word	0x08105ca7
 8105bf4:	08105ca7 	.word	0x08105ca7
 8105bf8:	08105c73 	.word	0x08105c73
 8105bfc:	08105ca7 	.word	0x08105ca7
 8105c00:	08105ca7 	.word	0x08105ca7
 8105c04:	08105ca7 	.word	0x08105ca7
 8105c08:	08105ca7 	.word	0x08105ca7
 8105c0c:	08105ca7 	.word	0x08105ca7
 8105c10:	08105ca7 	.word	0x08105ca7
 8105c14:	08105ca7 	.word	0x08105ca7
 8105c18:	08105ca7 	.word	0x08105ca7
 8105c1c:	08105ca7 	.word	0x08105ca7
 8105c20:	08105ca7 	.word	0x08105ca7
 8105c24:	08105ca7 	.word	0x08105ca7
 8105c28:	08105ca7 	.word	0x08105ca7
 8105c2c:	08105ca7 	.word	0x08105ca7
 8105c30:	08105ca7 	.word	0x08105ca7
 8105c34:	08105ca7 	.word	0x08105ca7
 8105c38:	08105c99 	.word	0x08105c99
 8105c3c:	2b40      	cmp	r3, #64	@ 0x40
 8105c3e:	d02e      	beq.n	8105c9e <UART_SetConfig+0x8aa>
 8105c40:	e031      	b.n	8105ca6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8105c42:	f7fc fe39 	bl	81028b8 <HAL_RCC_GetPCLK1Freq>
 8105c46:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8105c48:	e033      	b.n	8105cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105c4a:	f7fc fe4b 	bl	81028e4 <HAL_RCC_GetPCLK2Freq>
 8105c4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8105c50:	e02f      	b.n	8105cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105c52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105c56:	4618      	mov	r0, r3
 8105c58:	f7fe f87a 	bl	8103d50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105c60:	e027      	b.n	8105cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105c62:	f107 0318 	add.w	r3, r7, #24
 8105c66:	4618      	mov	r0, r3
 8105c68:	f7fe f9c6 	bl	8103ff8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105c6c:	69fb      	ldr	r3, [r7, #28]
 8105c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105c70:	e01f      	b.n	8105cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105c72:	4b2d      	ldr	r3, [pc, #180]	@ (8105d28 <UART_SetConfig+0x934>)
 8105c74:	681b      	ldr	r3, [r3, #0]
 8105c76:	f003 0320 	and.w	r3, r3, #32
 8105c7a:	2b00      	cmp	r3, #0
 8105c7c:	d009      	beq.n	8105c92 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105c7e:	4b2a      	ldr	r3, [pc, #168]	@ (8105d28 <UART_SetConfig+0x934>)
 8105c80:	681b      	ldr	r3, [r3, #0]
 8105c82:	08db      	lsrs	r3, r3, #3
 8105c84:	f003 0303 	and.w	r3, r3, #3
 8105c88:	4a24      	ldr	r2, [pc, #144]	@ (8105d1c <UART_SetConfig+0x928>)
 8105c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8105c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105c90:	e00f      	b.n	8105cb2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8105c92:	4b22      	ldr	r3, [pc, #136]	@ (8105d1c <UART_SetConfig+0x928>)
 8105c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105c96:	e00c      	b.n	8105cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105c98:	4b21      	ldr	r3, [pc, #132]	@ (8105d20 <UART_SetConfig+0x92c>)
 8105c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105c9c:	e009      	b.n	8105cb2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105c9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8105ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105ca4:	e005      	b.n	8105cb2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8105ca6:	2300      	movs	r3, #0
 8105ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8105caa:	2301      	movs	r3, #1
 8105cac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8105cb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8105cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105cb4:	2b00      	cmp	r3, #0
 8105cb6:	f000 80e7 	beq.w	8105e88 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105cba:	697b      	ldr	r3, [r7, #20]
 8105cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105cbe:	4a19      	ldr	r2, [pc, #100]	@ (8105d24 <UART_SetConfig+0x930>)
 8105cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105cc4:	461a      	mov	r2, r3
 8105cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105cc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8105ccc:	005a      	lsls	r2, r3, #1
 8105cce:	697b      	ldr	r3, [r7, #20]
 8105cd0:	685b      	ldr	r3, [r3, #4]
 8105cd2:	085b      	lsrs	r3, r3, #1
 8105cd4:	441a      	add	r2, r3
 8105cd6:	697b      	ldr	r3, [r7, #20]
 8105cd8:	685b      	ldr	r3, [r3, #4]
 8105cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8105cde:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8105ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105ce2:	2b0f      	cmp	r3, #15
 8105ce4:	d916      	bls.n	8105d14 <UART_SetConfig+0x920>
 8105ce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105cec:	d212      	bcs.n	8105d14 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8105cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105cf0:	b29b      	uxth	r3, r3
 8105cf2:	f023 030f 	bic.w	r3, r3, #15
 8105cf6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8105cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105cfa:	085b      	lsrs	r3, r3, #1
 8105cfc:	b29b      	uxth	r3, r3
 8105cfe:	f003 0307 	and.w	r3, r3, #7
 8105d02:	b29a      	uxth	r2, r3
 8105d04:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8105d06:	4313      	orrs	r3, r2
 8105d08:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8105d0a:	697b      	ldr	r3, [r7, #20]
 8105d0c:	681b      	ldr	r3, [r3, #0]
 8105d0e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8105d10:	60da      	str	r2, [r3, #12]
 8105d12:	e0b9      	b.n	8105e88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8105d14:	2301      	movs	r3, #1
 8105d16:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8105d1a:	e0b5      	b.n	8105e88 <UART_SetConfig+0xa94>
 8105d1c:	03d09000 	.word	0x03d09000
 8105d20:	003d0900 	.word	0x003d0900
 8105d24:	081091f8 	.word	0x081091f8
 8105d28:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8105d2c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8105d30:	2b20      	cmp	r3, #32
 8105d32:	dc49      	bgt.n	8105dc8 <UART_SetConfig+0x9d4>
 8105d34:	2b00      	cmp	r3, #0
 8105d36:	db7c      	blt.n	8105e32 <UART_SetConfig+0xa3e>
 8105d38:	2b20      	cmp	r3, #32
 8105d3a:	d87a      	bhi.n	8105e32 <UART_SetConfig+0xa3e>
 8105d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8105d44 <UART_SetConfig+0x950>)
 8105d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105d42:	bf00      	nop
 8105d44:	08105dcf 	.word	0x08105dcf
 8105d48:	08105dd7 	.word	0x08105dd7
 8105d4c:	08105e33 	.word	0x08105e33
 8105d50:	08105e33 	.word	0x08105e33
 8105d54:	08105ddf 	.word	0x08105ddf
 8105d58:	08105e33 	.word	0x08105e33
 8105d5c:	08105e33 	.word	0x08105e33
 8105d60:	08105e33 	.word	0x08105e33
 8105d64:	08105def 	.word	0x08105def
 8105d68:	08105e33 	.word	0x08105e33
 8105d6c:	08105e33 	.word	0x08105e33
 8105d70:	08105e33 	.word	0x08105e33
 8105d74:	08105e33 	.word	0x08105e33
 8105d78:	08105e33 	.word	0x08105e33
 8105d7c:	08105e33 	.word	0x08105e33
 8105d80:	08105e33 	.word	0x08105e33
 8105d84:	08105dff 	.word	0x08105dff
 8105d88:	08105e33 	.word	0x08105e33
 8105d8c:	08105e33 	.word	0x08105e33
 8105d90:	08105e33 	.word	0x08105e33
 8105d94:	08105e33 	.word	0x08105e33
 8105d98:	08105e33 	.word	0x08105e33
 8105d9c:	08105e33 	.word	0x08105e33
 8105da0:	08105e33 	.word	0x08105e33
 8105da4:	08105e33 	.word	0x08105e33
 8105da8:	08105e33 	.word	0x08105e33
 8105dac:	08105e33 	.word	0x08105e33
 8105db0:	08105e33 	.word	0x08105e33
 8105db4:	08105e33 	.word	0x08105e33
 8105db8:	08105e33 	.word	0x08105e33
 8105dbc:	08105e33 	.word	0x08105e33
 8105dc0:	08105e33 	.word	0x08105e33
 8105dc4:	08105e25 	.word	0x08105e25
 8105dc8:	2b40      	cmp	r3, #64	@ 0x40
 8105dca:	d02e      	beq.n	8105e2a <UART_SetConfig+0xa36>
 8105dcc:	e031      	b.n	8105e32 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8105dce:	f7fc fd73 	bl	81028b8 <HAL_RCC_GetPCLK1Freq>
 8105dd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8105dd4:	e033      	b.n	8105e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105dd6:	f7fc fd85 	bl	81028e4 <HAL_RCC_GetPCLK2Freq>
 8105dda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8105ddc:	e02f      	b.n	8105e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8105de2:	4618      	mov	r0, r3
 8105de4:	f7fd ffb4 	bl	8103d50 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8105dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105dec:	e027      	b.n	8105e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105dee:	f107 0318 	add.w	r3, r7, #24
 8105df2:	4618      	mov	r0, r3
 8105df4:	f7fe f900 	bl	8103ff8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105df8:	69fb      	ldr	r3, [r7, #28]
 8105dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105dfc:	e01f      	b.n	8105e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8105eb4 <UART_SetConfig+0xac0>)
 8105e00:	681b      	ldr	r3, [r3, #0]
 8105e02:	f003 0320 	and.w	r3, r3, #32
 8105e06:	2b00      	cmp	r3, #0
 8105e08:	d009      	beq.n	8105e1e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8105eb4 <UART_SetConfig+0xac0>)
 8105e0c:	681b      	ldr	r3, [r3, #0]
 8105e0e:	08db      	lsrs	r3, r3, #3
 8105e10:	f003 0303 	and.w	r3, r3, #3
 8105e14:	4a28      	ldr	r2, [pc, #160]	@ (8105eb8 <UART_SetConfig+0xac4>)
 8105e16:	fa22 f303 	lsr.w	r3, r2, r3
 8105e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105e1c:	e00f      	b.n	8105e3e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8105e1e:	4b26      	ldr	r3, [pc, #152]	@ (8105eb8 <UART_SetConfig+0xac4>)
 8105e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105e22:	e00c      	b.n	8105e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105e24:	4b25      	ldr	r3, [pc, #148]	@ (8105ebc <UART_SetConfig+0xac8>)
 8105e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105e28:	e009      	b.n	8105e3e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105e2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8105e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8105e30:	e005      	b.n	8105e3e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8105e32:	2300      	movs	r3, #0
 8105e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8105e36:	2301      	movs	r3, #1
 8105e38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8105e3c:	bf00      	nop
    }

    if (pclk != 0U)
 8105e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105e40:	2b00      	cmp	r3, #0
 8105e42:	d021      	beq.n	8105e88 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105e44:	697b      	ldr	r3, [r7, #20]
 8105e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105e48:	4a1d      	ldr	r2, [pc, #116]	@ (8105ec0 <UART_SetConfig+0xacc>)
 8105e4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105e4e:	461a      	mov	r2, r3
 8105e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8105e52:	fbb3 f2f2 	udiv	r2, r3, r2
 8105e56:	697b      	ldr	r3, [r7, #20]
 8105e58:	685b      	ldr	r3, [r3, #4]
 8105e5a:	085b      	lsrs	r3, r3, #1
 8105e5c:	441a      	add	r2, r3
 8105e5e:	697b      	ldr	r3, [r7, #20]
 8105e60:	685b      	ldr	r3, [r3, #4]
 8105e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8105e66:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8105e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105e6a:	2b0f      	cmp	r3, #15
 8105e6c:	d909      	bls.n	8105e82 <UART_SetConfig+0xa8e>
 8105e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105e74:	d205      	bcs.n	8105e82 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8105e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105e78:	b29a      	uxth	r2, r3
 8105e7a:	697b      	ldr	r3, [r7, #20]
 8105e7c:	681b      	ldr	r3, [r3, #0]
 8105e7e:	60da      	str	r2, [r3, #12]
 8105e80:	e002      	b.n	8105e88 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8105e82:	2301      	movs	r3, #1
 8105e84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8105e88:	697b      	ldr	r3, [r7, #20]
 8105e8a:	2201      	movs	r2, #1
 8105e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8105e90:	697b      	ldr	r3, [r7, #20]
 8105e92:	2201      	movs	r2, #1
 8105e94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8105e98:	697b      	ldr	r3, [r7, #20]
 8105e9a:	2200      	movs	r2, #0
 8105e9c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8105e9e:	697b      	ldr	r3, [r7, #20]
 8105ea0:	2200      	movs	r2, #0
 8105ea2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8105ea4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8105ea8:	4618      	mov	r0, r3
 8105eaa:	3748      	adds	r7, #72	@ 0x48
 8105eac:	46bd      	mov	sp, r7
 8105eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8105eb2:	bf00      	nop
 8105eb4:	58024400 	.word	0x58024400
 8105eb8:	03d09000 	.word	0x03d09000
 8105ebc:	003d0900 	.word	0x003d0900
 8105ec0:	081091f8 	.word	0x081091f8

08105ec4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8105ec4:	b480      	push	{r7}
 8105ec6:	b083      	sub	sp, #12
 8105ec8:	af00      	add	r7, sp, #0
 8105eca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8105ecc:	687b      	ldr	r3, [r7, #4]
 8105ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105ed0:	f003 0308 	and.w	r3, r3, #8
 8105ed4:	2b00      	cmp	r3, #0
 8105ed6:	d00a      	beq.n	8105eee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8105ed8:	687b      	ldr	r3, [r7, #4]
 8105eda:	681b      	ldr	r3, [r3, #0]
 8105edc:	685b      	ldr	r3, [r3, #4]
 8105ede:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8105ee2:	687b      	ldr	r3, [r7, #4]
 8105ee4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8105ee6:	687b      	ldr	r3, [r7, #4]
 8105ee8:	681b      	ldr	r3, [r3, #0]
 8105eea:	430a      	orrs	r2, r1
 8105eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8105eee:	687b      	ldr	r3, [r7, #4]
 8105ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105ef2:	f003 0301 	and.w	r3, r3, #1
 8105ef6:	2b00      	cmp	r3, #0
 8105ef8:	d00a      	beq.n	8105f10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8105efa:	687b      	ldr	r3, [r7, #4]
 8105efc:	681b      	ldr	r3, [r3, #0]
 8105efe:	685b      	ldr	r3, [r3, #4]
 8105f00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8105f04:	687b      	ldr	r3, [r7, #4]
 8105f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8105f08:	687b      	ldr	r3, [r7, #4]
 8105f0a:	681b      	ldr	r3, [r3, #0]
 8105f0c:	430a      	orrs	r2, r1
 8105f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8105f10:	687b      	ldr	r3, [r7, #4]
 8105f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105f14:	f003 0302 	and.w	r3, r3, #2
 8105f18:	2b00      	cmp	r3, #0
 8105f1a:	d00a      	beq.n	8105f32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8105f1c:	687b      	ldr	r3, [r7, #4]
 8105f1e:	681b      	ldr	r3, [r3, #0]
 8105f20:	685b      	ldr	r3, [r3, #4]
 8105f22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8105f26:	687b      	ldr	r3, [r7, #4]
 8105f28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8105f2a:	687b      	ldr	r3, [r7, #4]
 8105f2c:	681b      	ldr	r3, [r3, #0]
 8105f2e:	430a      	orrs	r2, r1
 8105f30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8105f32:	687b      	ldr	r3, [r7, #4]
 8105f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105f36:	f003 0304 	and.w	r3, r3, #4
 8105f3a:	2b00      	cmp	r3, #0
 8105f3c:	d00a      	beq.n	8105f54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8105f3e:	687b      	ldr	r3, [r7, #4]
 8105f40:	681b      	ldr	r3, [r3, #0]
 8105f42:	685b      	ldr	r3, [r3, #4]
 8105f44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8105f48:	687b      	ldr	r3, [r7, #4]
 8105f4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8105f4c:	687b      	ldr	r3, [r7, #4]
 8105f4e:	681b      	ldr	r3, [r3, #0]
 8105f50:	430a      	orrs	r2, r1
 8105f52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8105f54:	687b      	ldr	r3, [r7, #4]
 8105f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105f58:	f003 0310 	and.w	r3, r3, #16
 8105f5c:	2b00      	cmp	r3, #0
 8105f5e:	d00a      	beq.n	8105f76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8105f60:	687b      	ldr	r3, [r7, #4]
 8105f62:	681b      	ldr	r3, [r3, #0]
 8105f64:	689b      	ldr	r3, [r3, #8]
 8105f66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8105f6a:	687b      	ldr	r3, [r7, #4]
 8105f6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8105f6e:	687b      	ldr	r3, [r7, #4]
 8105f70:	681b      	ldr	r3, [r3, #0]
 8105f72:	430a      	orrs	r2, r1
 8105f74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8105f76:	687b      	ldr	r3, [r7, #4]
 8105f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105f7a:	f003 0320 	and.w	r3, r3, #32
 8105f7e:	2b00      	cmp	r3, #0
 8105f80:	d00a      	beq.n	8105f98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8105f82:	687b      	ldr	r3, [r7, #4]
 8105f84:	681b      	ldr	r3, [r3, #0]
 8105f86:	689b      	ldr	r3, [r3, #8]
 8105f88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8105f8c:	687b      	ldr	r3, [r7, #4]
 8105f8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8105f90:	687b      	ldr	r3, [r7, #4]
 8105f92:	681b      	ldr	r3, [r3, #0]
 8105f94:	430a      	orrs	r2, r1
 8105f96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8105f98:	687b      	ldr	r3, [r7, #4]
 8105f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8105fa0:	2b00      	cmp	r3, #0
 8105fa2:	d01a      	beq.n	8105fda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8105fa4:	687b      	ldr	r3, [r7, #4]
 8105fa6:	681b      	ldr	r3, [r3, #0]
 8105fa8:	685b      	ldr	r3, [r3, #4]
 8105faa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8105fae:	687b      	ldr	r3, [r7, #4]
 8105fb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8105fb2:	687b      	ldr	r3, [r7, #4]
 8105fb4:	681b      	ldr	r3, [r3, #0]
 8105fb6:	430a      	orrs	r2, r1
 8105fb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8105fba:	687b      	ldr	r3, [r7, #4]
 8105fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8105fbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105fc2:	d10a      	bne.n	8105fda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8105fc4:	687b      	ldr	r3, [r7, #4]
 8105fc6:	681b      	ldr	r3, [r3, #0]
 8105fc8:	685b      	ldr	r3, [r3, #4]
 8105fca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8105fce:	687b      	ldr	r3, [r7, #4]
 8105fd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8105fd2:	687b      	ldr	r3, [r7, #4]
 8105fd4:	681b      	ldr	r3, [r3, #0]
 8105fd6:	430a      	orrs	r2, r1
 8105fd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8105fda:	687b      	ldr	r3, [r7, #4]
 8105fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8105fe2:	2b00      	cmp	r3, #0
 8105fe4:	d00a      	beq.n	8105ffc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8105fe6:	687b      	ldr	r3, [r7, #4]
 8105fe8:	681b      	ldr	r3, [r3, #0]
 8105fea:	685b      	ldr	r3, [r3, #4]
 8105fec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8105ff0:	687b      	ldr	r3, [r7, #4]
 8105ff2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8105ff4:	687b      	ldr	r3, [r7, #4]
 8105ff6:	681b      	ldr	r3, [r3, #0]
 8105ff8:	430a      	orrs	r2, r1
 8105ffa:	605a      	str	r2, [r3, #4]
  }
}
 8105ffc:	bf00      	nop
 8105ffe:	370c      	adds	r7, #12
 8106000:	46bd      	mov	sp, r7
 8106002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106006:	4770      	bx	lr

08106008 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8106008:	b580      	push	{r7, lr}
 810600a:	b098      	sub	sp, #96	@ 0x60
 810600c:	af02      	add	r7, sp, #8
 810600e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106010:	687b      	ldr	r3, [r7, #4]
 8106012:	2200      	movs	r2, #0
 8106014:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8106018:	f7fb ff16 	bl	8101e48 <HAL_GetTick>
 810601c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810601e:	687b      	ldr	r3, [r7, #4]
 8106020:	681b      	ldr	r3, [r3, #0]
 8106022:	681b      	ldr	r3, [r3, #0]
 8106024:	f003 0308 	and.w	r3, r3, #8
 8106028:	2b08      	cmp	r3, #8
 810602a:	d12f      	bne.n	810608c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810602c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8106030:	9300      	str	r3, [sp, #0]
 8106032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8106034:	2200      	movs	r2, #0
 8106036:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810603a:	6878      	ldr	r0, [r7, #4]
 810603c:	f000 f88e 	bl	810615c <UART_WaitOnFlagUntilTimeout>
 8106040:	4603      	mov	r3, r0
 8106042:	2b00      	cmp	r3, #0
 8106044:	d022      	beq.n	810608c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8106046:	687b      	ldr	r3, [r7, #4]
 8106048:	681b      	ldr	r3, [r3, #0]
 810604a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810604c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810604e:	e853 3f00 	ldrex	r3, [r3]
 8106052:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8106054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106056:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810605a:	653b      	str	r3, [r7, #80]	@ 0x50
 810605c:	687b      	ldr	r3, [r7, #4]
 810605e:	681b      	ldr	r3, [r3, #0]
 8106060:	461a      	mov	r2, r3
 8106062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8106064:	647b      	str	r3, [r7, #68]	@ 0x44
 8106066:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106068:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810606a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810606c:	e841 2300 	strex	r3, r2, [r1]
 8106070:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8106072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8106074:	2b00      	cmp	r3, #0
 8106076:	d1e6      	bne.n	8106046 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8106078:	687b      	ldr	r3, [r7, #4]
 810607a:	2220      	movs	r2, #32
 810607c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8106080:	687b      	ldr	r3, [r7, #4]
 8106082:	2200      	movs	r2, #0
 8106084:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8106088:	2303      	movs	r3, #3
 810608a:	e063      	b.n	8106154 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810608c:	687b      	ldr	r3, [r7, #4]
 810608e:	681b      	ldr	r3, [r3, #0]
 8106090:	681b      	ldr	r3, [r3, #0]
 8106092:	f003 0304 	and.w	r3, r3, #4
 8106096:	2b04      	cmp	r3, #4
 8106098:	d149      	bne.n	810612e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810609a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810609e:	9300      	str	r3, [sp, #0]
 81060a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 81060a2:	2200      	movs	r2, #0
 81060a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 81060a8:	6878      	ldr	r0, [r7, #4]
 81060aa:	f000 f857 	bl	810615c <UART_WaitOnFlagUntilTimeout>
 81060ae:	4603      	mov	r3, r0
 81060b0:	2b00      	cmp	r3, #0
 81060b2:	d03c      	beq.n	810612e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81060b4:	687b      	ldr	r3, [r7, #4]
 81060b6:	681b      	ldr	r3, [r3, #0]
 81060b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81060ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81060bc:	e853 3f00 	ldrex	r3, [r3]
 81060c0:	623b      	str	r3, [r7, #32]
   return(result);
 81060c2:	6a3b      	ldr	r3, [r7, #32]
 81060c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 81060c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81060ca:	687b      	ldr	r3, [r7, #4]
 81060cc:	681b      	ldr	r3, [r3, #0]
 81060ce:	461a      	mov	r2, r3
 81060d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81060d2:	633b      	str	r3, [r7, #48]	@ 0x30
 81060d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81060d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 81060d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 81060da:	e841 2300 	strex	r3, r2, [r1]
 81060de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 81060e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81060e2:	2b00      	cmp	r3, #0
 81060e4:	d1e6      	bne.n	81060b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 81060e6:	687b      	ldr	r3, [r7, #4]
 81060e8:	681b      	ldr	r3, [r3, #0]
 81060ea:	3308      	adds	r3, #8
 81060ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81060ee:	693b      	ldr	r3, [r7, #16]
 81060f0:	e853 3f00 	ldrex	r3, [r3]
 81060f4:	60fb      	str	r3, [r7, #12]
   return(result);
 81060f6:	68fb      	ldr	r3, [r7, #12]
 81060f8:	f023 0301 	bic.w	r3, r3, #1
 81060fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 81060fe:	687b      	ldr	r3, [r7, #4]
 8106100:	681b      	ldr	r3, [r3, #0]
 8106102:	3308      	adds	r3, #8
 8106104:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8106106:	61fa      	str	r2, [r7, #28]
 8106108:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810610a:	69b9      	ldr	r1, [r7, #24]
 810610c:	69fa      	ldr	r2, [r7, #28]
 810610e:	e841 2300 	strex	r3, r2, [r1]
 8106112:	617b      	str	r3, [r7, #20]
   return(result);
 8106114:	697b      	ldr	r3, [r7, #20]
 8106116:	2b00      	cmp	r3, #0
 8106118:	d1e5      	bne.n	81060e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810611a:	687b      	ldr	r3, [r7, #4]
 810611c:	2220      	movs	r2, #32
 810611e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8106122:	687b      	ldr	r3, [r7, #4]
 8106124:	2200      	movs	r2, #0
 8106126:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810612a:	2303      	movs	r3, #3
 810612c:	e012      	b.n	8106154 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810612e:	687b      	ldr	r3, [r7, #4]
 8106130:	2220      	movs	r2, #32
 8106132:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8106136:	687b      	ldr	r3, [r7, #4]
 8106138:	2220      	movs	r2, #32
 810613a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810613e:	687b      	ldr	r3, [r7, #4]
 8106140:	2200      	movs	r2, #0
 8106142:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8106144:	687b      	ldr	r3, [r7, #4]
 8106146:	2200      	movs	r2, #0
 8106148:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810614a:	687b      	ldr	r3, [r7, #4]
 810614c:	2200      	movs	r2, #0
 810614e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8106152:	2300      	movs	r3, #0
}
 8106154:	4618      	mov	r0, r3
 8106156:	3758      	adds	r7, #88	@ 0x58
 8106158:	46bd      	mov	sp, r7
 810615a:	bd80      	pop	{r7, pc}

0810615c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810615c:	b580      	push	{r7, lr}
 810615e:	b084      	sub	sp, #16
 8106160:	af00      	add	r7, sp, #0
 8106162:	60f8      	str	r0, [r7, #12]
 8106164:	60b9      	str	r1, [r7, #8]
 8106166:	603b      	str	r3, [r7, #0]
 8106168:	4613      	mov	r3, r2
 810616a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810616c:	e04f      	b.n	810620e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810616e:	69bb      	ldr	r3, [r7, #24]
 8106170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8106174:	d04b      	beq.n	810620e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8106176:	f7fb fe67 	bl	8101e48 <HAL_GetTick>
 810617a:	4602      	mov	r2, r0
 810617c:	683b      	ldr	r3, [r7, #0]
 810617e:	1ad3      	subs	r3, r2, r3
 8106180:	69ba      	ldr	r2, [r7, #24]
 8106182:	429a      	cmp	r2, r3
 8106184:	d302      	bcc.n	810618c <UART_WaitOnFlagUntilTimeout+0x30>
 8106186:	69bb      	ldr	r3, [r7, #24]
 8106188:	2b00      	cmp	r3, #0
 810618a:	d101      	bne.n	8106190 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810618c:	2303      	movs	r3, #3
 810618e:	e04e      	b.n	810622e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8106190:	68fb      	ldr	r3, [r7, #12]
 8106192:	681b      	ldr	r3, [r3, #0]
 8106194:	681b      	ldr	r3, [r3, #0]
 8106196:	f003 0304 	and.w	r3, r3, #4
 810619a:	2b00      	cmp	r3, #0
 810619c:	d037      	beq.n	810620e <UART_WaitOnFlagUntilTimeout+0xb2>
 810619e:	68bb      	ldr	r3, [r7, #8]
 81061a0:	2b80      	cmp	r3, #128	@ 0x80
 81061a2:	d034      	beq.n	810620e <UART_WaitOnFlagUntilTimeout+0xb2>
 81061a4:	68bb      	ldr	r3, [r7, #8]
 81061a6:	2b40      	cmp	r3, #64	@ 0x40
 81061a8:	d031      	beq.n	810620e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 81061aa:	68fb      	ldr	r3, [r7, #12]
 81061ac:	681b      	ldr	r3, [r3, #0]
 81061ae:	69db      	ldr	r3, [r3, #28]
 81061b0:	f003 0308 	and.w	r3, r3, #8
 81061b4:	2b08      	cmp	r3, #8
 81061b6:	d110      	bne.n	81061da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 81061b8:	68fb      	ldr	r3, [r7, #12]
 81061ba:	681b      	ldr	r3, [r3, #0]
 81061bc:	2208      	movs	r2, #8
 81061be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 81061c0:	68f8      	ldr	r0, [r7, #12]
 81061c2:	f000 f838 	bl	8106236 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 81061c6:	68fb      	ldr	r3, [r7, #12]
 81061c8:	2208      	movs	r2, #8
 81061ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81061ce:	68fb      	ldr	r3, [r7, #12]
 81061d0:	2200      	movs	r2, #0
 81061d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 81061d6:	2301      	movs	r3, #1
 81061d8:	e029      	b.n	810622e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 81061da:	68fb      	ldr	r3, [r7, #12]
 81061dc:	681b      	ldr	r3, [r3, #0]
 81061de:	69db      	ldr	r3, [r3, #28]
 81061e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 81061e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81061e8:	d111      	bne.n	810620e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 81061ea:	68fb      	ldr	r3, [r7, #12]
 81061ec:	681b      	ldr	r3, [r3, #0]
 81061ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 81061f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 81061f4:	68f8      	ldr	r0, [r7, #12]
 81061f6:	f000 f81e 	bl	8106236 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81061fa:	68fb      	ldr	r3, [r7, #12]
 81061fc:	2220      	movs	r2, #32
 81061fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8106202:	68fb      	ldr	r3, [r7, #12]
 8106204:	2200      	movs	r2, #0
 8106206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810620a:	2303      	movs	r3, #3
 810620c:	e00f      	b.n	810622e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810620e:	68fb      	ldr	r3, [r7, #12]
 8106210:	681b      	ldr	r3, [r3, #0]
 8106212:	69da      	ldr	r2, [r3, #28]
 8106214:	68bb      	ldr	r3, [r7, #8]
 8106216:	4013      	ands	r3, r2
 8106218:	68ba      	ldr	r2, [r7, #8]
 810621a:	429a      	cmp	r2, r3
 810621c:	bf0c      	ite	eq
 810621e:	2301      	moveq	r3, #1
 8106220:	2300      	movne	r3, #0
 8106222:	b2db      	uxtb	r3, r3
 8106224:	461a      	mov	r2, r3
 8106226:	79fb      	ldrb	r3, [r7, #7]
 8106228:	429a      	cmp	r2, r3
 810622a:	d0a0      	beq.n	810616e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810622c:	2300      	movs	r3, #0
}
 810622e:	4618      	mov	r0, r3
 8106230:	3710      	adds	r7, #16
 8106232:	46bd      	mov	sp, r7
 8106234:	bd80      	pop	{r7, pc}

08106236 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8106236:	b480      	push	{r7}
 8106238:	b095      	sub	sp, #84	@ 0x54
 810623a:	af00      	add	r7, sp, #0
 810623c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810623e:	687b      	ldr	r3, [r7, #4]
 8106240:	681b      	ldr	r3, [r3, #0]
 8106242:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106246:	e853 3f00 	ldrex	r3, [r3]
 810624a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810624c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810624e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8106252:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8106254:	687b      	ldr	r3, [r7, #4]
 8106256:	681b      	ldr	r3, [r3, #0]
 8106258:	461a      	mov	r2, r3
 810625a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810625c:	643b      	str	r3, [r7, #64]	@ 0x40
 810625e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106260:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8106262:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8106264:	e841 2300 	strex	r3, r2, [r1]
 8106268:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810626a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810626c:	2b00      	cmp	r3, #0
 810626e:	d1e6      	bne.n	810623e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8106270:	687b      	ldr	r3, [r7, #4]
 8106272:	681b      	ldr	r3, [r3, #0]
 8106274:	3308      	adds	r3, #8
 8106276:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106278:	6a3b      	ldr	r3, [r7, #32]
 810627a:	e853 3f00 	ldrex	r3, [r3]
 810627e:	61fb      	str	r3, [r7, #28]
   return(result);
 8106280:	69fb      	ldr	r3, [r7, #28]
 8106282:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8106286:	f023 0301 	bic.w	r3, r3, #1
 810628a:	64bb      	str	r3, [r7, #72]	@ 0x48
 810628c:	687b      	ldr	r3, [r7, #4]
 810628e:	681b      	ldr	r3, [r3, #0]
 8106290:	3308      	adds	r3, #8
 8106292:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8106294:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8106296:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106298:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810629a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810629c:	e841 2300 	strex	r3, r2, [r1]
 81062a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 81062a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81062a4:	2b00      	cmp	r3, #0
 81062a6:	d1e3      	bne.n	8106270 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81062a8:	687b      	ldr	r3, [r7, #4]
 81062aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81062ac:	2b01      	cmp	r3, #1
 81062ae:	d118      	bne.n	81062e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81062b0:	687b      	ldr	r3, [r7, #4]
 81062b2:	681b      	ldr	r3, [r3, #0]
 81062b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81062b6:	68fb      	ldr	r3, [r7, #12]
 81062b8:	e853 3f00 	ldrex	r3, [r3]
 81062bc:	60bb      	str	r3, [r7, #8]
   return(result);
 81062be:	68bb      	ldr	r3, [r7, #8]
 81062c0:	f023 0310 	bic.w	r3, r3, #16
 81062c4:	647b      	str	r3, [r7, #68]	@ 0x44
 81062c6:	687b      	ldr	r3, [r7, #4]
 81062c8:	681b      	ldr	r3, [r3, #0]
 81062ca:	461a      	mov	r2, r3
 81062cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81062ce:	61bb      	str	r3, [r7, #24]
 81062d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81062d2:	6979      	ldr	r1, [r7, #20]
 81062d4:	69ba      	ldr	r2, [r7, #24]
 81062d6:	e841 2300 	strex	r3, r2, [r1]
 81062da:	613b      	str	r3, [r7, #16]
   return(result);
 81062dc:	693b      	ldr	r3, [r7, #16]
 81062de:	2b00      	cmp	r3, #0
 81062e0:	d1e6      	bne.n	81062b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 81062e2:	687b      	ldr	r3, [r7, #4]
 81062e4:	2220      	movs	r2, #32
 81062e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81062ea:	687b      	ldr	r3, [r7, #4]
 81062ec:	2200      	movs	r2, #0
 81062ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 81062f0:	687b      	ldr	r3, [r7, #4]
 81062f2:	2200      	movs	r2, #0
 81062f4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 81062f6:	bf00      	nop
 81062f8:	3754      	adds	r7, #84	@ 0x54
 81062fa:	46bd      	mov	sp, r7
 81062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106300:	4770      	bx	lr

08106302 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8106302:	b480      	push	{r7}
 8106304:	b085      	sub	sp, #20
 8106306:	af00      	add	r7, sp, #0
 8106308:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810630a:	687b      	ldr	r3, [r7, #4]
 810630c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8106310:	2b01      	cmp	r3, #1
 8106312:	d101      	bne.n	8106318 <HAL_UARTEx_DisableFifoMode+0x16>
 8106314:	2302      	movs	r3, #2
 8106316:	e027      	b.n	8106368 <HAL_UARTEx_DisableFifoMode+0x66>
 8106318:	687b      	ldr	r3, [r7, #4]
 810631a:	2201      	movs	r2, #1
 810631c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8106320:	687b      	ldr	r3, [r7, #4]
 8106322:	2224      	movs	r2, #36	@ 0x24
 8106324:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106328:	687b      	ldr	r3, [r7, #4]
 810632a:	681b      	ldr	r3, [r3, #0]
 810632c:	681b      	ldr	r3, [r3, #0]
 810632e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8106330:	687b      	ldr	r3, [r7, #4]
 8106332:	681b      	ldr	r3, [r3, #0]
 8106334:	681a      	ldr	r2, [r3, #0]
 8106336:	687b      	ldr	r3, [r7, #4]
 8106338:	681b      	ldr	r3, [r3, #0]
 810633a:	f022 0201 	bic.w	r2, r2, #1
 810633e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8106340:	68fb      	ldr	r3, [r7, #12]
 8106342:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8106346:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8106348:	687b      	ldr	r3, [r7, #4]
 810634a:	2200      	movs	r2, #0
 810634c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810634e:	687b      	ldr	r3, [r7, #4]
 8106350:	681b      	ldr	r3, [r3, #0]
 8106352:	68fa      	ldr	r2, [r7, #12]
 8106354:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8106356:	687b      	ldr	r3, [r7, #4]
 8106358:	2220      	movs	r2, #32
 810635a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810635e:	687b      	ldr	r3, [r7, #4]
 8106360:	2200      	movs	r2, #0
 8106362:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8106366:	2300      	movs	r3, #0
}
 8106368:	4618      	mov	r0, r3
 810636a:	3714      	adds	r7, #20
 810636c:	46bd      	mov	sp, r7
 810636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106372:	4770      	bx	lr

08106374 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8106374:	b580      	push	{r7, lr}
 8106376:	b084      	sub	sp, #16
 8106378:	af00      	add	r7, sp, #0
 810637a:	6078      	str	r0, [r7, #4]
 810637c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810637e:	687b      	ldr	r3, [r7, #4]
 8106380:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8106384:	2b01      	cmp	r3, #1
 8106386:	d101      	bne.n	810638c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8106388:	2302      	movs	r3, #2
 810638a:	e02d      	b.n	81063e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810638c:	687b      	ldr	r3, [r7, #4]
 810638e:	2201      	movs	r2, #1
 8106390:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8106394:	687b      	ldr	r3, [r7, #4]
 8106396:	2224      	movs	r2, #36	@ 0x24
 8106398:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810639c:	687b      	ldr	r3, [r7, #4]
 810639e:	681b      	ldr	r3, [r3, #0]
 81063a0:	681b      	ldr	r3, [r3, #0]
 81063a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81063a4:	687b      	ldr	r3, [r7, #4]
 81063a6:	681b      	ldr	r3, [r3, #0]
 81063a8:	681a      	ldr	r2, [r3, #0]
 81063aa:	687b      	ldr	r3, [r7, #4]
 81063ac:	681b      	ldr	r3, [r3, #0]
 81063ae:	f022 0201 	bic.w	r2, r2, #1
 81063b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 81063b4:	687b      	ldr	r3, [r7, #4]
 81063b6:	681b      	ldr	r3, [r3, #0]
 81063b8:	689b      	ldr	r3, [r3, #8]
 81063ba:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 81063be:	687b      	ldr	r3, [r7, #4]
 81063c0:	681b      	ldr	r3, [r3, #0]
 81063c2:	683a      	ldr	r2, [r7, #0]
 81063c4:	430a      	orrs	r2, r1
 81063c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81063c8:	6878      	ldr	r0, [r7, #4]
 81063ca:	f000 f84f 	bl	810646c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81063ce:	687b      	ldr	r3, [r7, #4]
 81063d0:	681b      	ldr	r3, [r3, #0]
 81063d2:	68fa      	ldr	r2, [r7, #12]
 81063d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81063d6:	687b      	ldr	r3, [r7, #4]
 81063d8:	2220      	movs	r2, #32
 81063da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81063de:	687b      	ldr	r3, [r7, #4]
 81063e0:	2200      	movs	r2, #0
 81063e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81063e6:	2300      	movs	r3, #0
}
 81063e8:	4618      	mov	r0, r3
 81063ea:	3710      	adds	r7, #16
 81063ec:	46bd      	mov	sp, r7
 81063ee:	bd80      	pop	{r7, pc}

081063f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81063f0:	b580      	push	{r7, lr}
 81063f2:	b084      	sub	sp, #16
 81063f4:	af00      	add	r7, sp, #0
 81063f6:	6078      	str	r0, [r7, #4]
 81063f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81063fa:	687b      	ldr	r3, [r7, #4]
 81063fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8106400:	2b01      	cmp	r3, #1
 8106402:	d101      	bne.n	8106408 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8106404:	2302      	movs	r3, #2
 8106406:	e02d      	b.n	8106464 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8106408:	687b      	ldr	r3, [r7, #4]
 810640a:	2201      	movs	r2, #1
 810640c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8106410:	687b      	ldr	r3, [r7, #4]
 8106412:	2224      	movs	r2, #36	@ 0x24
 8106414:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106418:	687b      	ldr	r3, [r7, #4]
 810641a:	681b      	ldr	r3, [r3, #0]
 810641c:	681b      	ldr	r3, [r3, #0]
 810641e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8106420:	687b      	ldr	r3, [r7, #4]
 8106422:	681b      	ldr	r3, [r3, #0]
 8106424:	681a      	ldr	r2, [r3, #0]
 8106426:	687b      	ldr	r3, [r7, #4]
 8106428:	681b      	ldr	r3, [r3, #0]
 810642a:	f022 0201 	bic.w	r2, r2, #1
 810642e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8106430:	687b      	ldr	r3, [r7, #4]
 8106432:	681b      	ldr	r3, [r3, #0]
 8106434:	689b      	ldr	r3, [r3, #8]
 8106436:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810643a:	687b      	ldr	r3, [r7, #4]
 810643c:	681b      	ldr	r3, [r3, #0]
 810643e:	683a      	ldr	r2, [r7, #0]
 8106440:	430a      	orrs	r2, r1
 8106442:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8106444:	6878      	ldr	r0, [r7, #4]
 8106446:	f000 f811 	bl	810646c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810644a:	687b      	ldr	r3, [r7, #4]
 810644c:	681b      	ldr	r3, [r3, #0]
 810644e:	68fa      	ldr	r2, [r7, #12]
 8106450:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8106452:	687b      	ldr	r3, [r7, #4]
 8106454:	2220      	movs	r2, #32
 8106456:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810645a:	687b      	ldr	r3, [r7, #4]
 810645c:	2200      	movs	r2, #0
 810645e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8106462:	2300      	movs	r3, #0
}
 8106464:	4618      	mov	r0, r3
 8106466:	3710      	adds	r7, #16
 8106468:	46bd      	mov	sp, r7
 810646a:	bd80      	pop	{r7, pc}

0810646c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810646c:	b480      	push	{r7}
 810646e:	b085      	sub	sp, #20
 8106470:	af00      	add	r7, sp, #0
 8106472:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8106474:	687b      	ldr	r3, [r7, #4]
 8106476:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106478:	2b00      	cmp	r3, #0
 810647a:	d108      	bne.n	810648e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810647c:	687b      	ldr	r3, [r7, #4]
 810647e:	2201      	movs	r2, #1
 8106480:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8106484:	687b      	ldr	r3, [r7, #4]
 8106486:	2201      	movs	r2, #1
 8106488:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810648c:	e031      	b.n	81064f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810648e:	2310      	movs	r3, #16
 8106490:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8106492:	2310      	movs	r3, #16
 8106494:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8106496:	687b      	ldr	r3, [r7, #4]
 8106498:	681b      	ldr	r3, [r3, #0]
 810649a:	689b      	ldr	r3, [r3, #8]
 810649c:	0e5b      	lsrs	r3, r3, #25
 810649e:	b2db      	uxtb	r3, r3
 81064a0:	f003 0307 	and.w	r3, r3, #7
 81064a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 81064a6:	687b      	ldr	r3, [r7, #4]
 81064a8:	681b      	ldr	r3, [r3, #0]
 81064aa:	689b      	ldr	r3, [r3, #8]
 81064ac:	0f5b      	lsrs	r3, r3, #29
 81064ae:	b2db      	uxtb	r3, r3
 81064b0:	f003 0307 	and.w	r3, r3, #7
 81064b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81064b6:	7bbb      	ldrb	r3, [r7, #14]
 81064b8:	7b3a      	ldrb	r2, [r7, #12]
 81064ba:	4911      	ldr	r1, [pc, #68]	@ (8106500 <UARTEx_SetNbDataToProcess+0x94>)
 81064bc:	5c8a      	ldrb	r2, [r1, r2]
 81064be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 81064c2:	7b3a      	ldrb	r2, [r7, #12]
 81064c4:	490f      	ldr	r1, [pc, #60]	@ (8106504 <UARTEx_SetNbDataToProcess+0x98>)
 81064c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81064c8:	fb93 f3f2 	sdiv	r3, r3, r2
 81064cc:	b29a      	uxth	r2, r3
 81064ce:	687b      	ldr	r3, [r7, #4]
 81064d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81064d4:	7bfb      	ldrb	r3, [r7, #15]
 81064d6:	7b7a      	ldrb	r2, [r7, #13]
 81064d8:	4909      	ldr	r1, [pc, #36]	@ (8106500 <UARTEx_SetNbDataToProcess+0x94>)
 81064da:	5c8a      	ldrb	r2, [r1, r2]
 81064dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 81064e0:	7b7a      	ldrb	r2, [r7, #13]
 81064e2:	4908      	ldr	r1, [pc, #32]	@ (8106504 <UARTEx_SetNbDataToProcess+0x98>)
 81064e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81064e6:	fb93 f3f2 	sdiv	r3, r3, r2
 81064ea:	b29a      	uxth	r2, r3
 81064ec:	687b      	ldr	r3, [r7, #4]
 81064ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 81064f2:	bf00      	nop
 81064f4:	3714      	adds	r7, #20
 81064f6:	46bd      	mov	sp, r7
 81064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064fc:	4770      	bx	lr
 81064fe:	bf00      	nop
 8106500:	08109210 	.word	0x08109210
 8106504:	08109218 	.word	0x08109218

08106508 <__cvt>:
 8106508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810650c:	ec57 6b10 	vmov	r6, r7, d0
 8106510:	2f00      	cmp	r7, #0
 8106512:	460c      	mov	r4, r1
 8106514:	4619      	mov	r1, r3
 8106516:	463b      	mov	r3, r7
 8106518:	bfbb      	ittet	lt
 810651a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 810651e:	461f      	movlt	r7, r3
 8106520:	2300      	movge	r3, #0
 8106522:	232d      	movlt	r3, #45	@ 0x2d
 8106524:	700b      	strb	r3, [r1, #0]
 8106526:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8106528:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 810652c:	4691      	mov	r9, r2
 810652e:	f023 0820 	bic.w	r8, r3, #32
 8106532:	bfbc      	itt	lt
 8106534:	4632      	movlt	r2, r6
 8106536:	4616      	movlt	r6, r2
 8106538:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810653c:	d005      	beq.n	810654a <__cvt+0x42>
 810653e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8106542:	d100      	bne.n	8106546 <__cvt+0x3e>
 8106544:	3401      	adds	r4, #1
 8106546:	2102      	movs	r1, #2
 8106548:	e000      	b.n	810654c <__cvt+0x44>
 810654a:	2103      	movs	r1, #3
 810654c:	ab03      	add	r3, sp, #12
 810654e:	9301      	str	r3, [sp, #4]
 8106550:	ab02      	add	r3, sp, #8
 8106552:	9300      	str	r3, [sp, #0]
 8106554:	ec47 6b10 	vmov	d0, r6, r7
 8106558:	4653      	mov	r3, sl
 810655a:	4622      	mov	r2, r4
 810655c:	f000 fe70 	bl	8107240 <_dtoa_r>
 8106560:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8106564:	4605      	mov	r5, r0
 8106566:	d119      	bne.n	810659c <__cvt+0x94>
 8106568:	f019 0f01 	tst.w	r9, #1
 810656c:	d00e      	beq.n	810658c <__cvt+0x84>
 810656e:	eb00 0904 	add.w	r9, r0, r4
 8106572:	2200      	movs	r2, #0
 8106574:	2300      	movs	r3, #0
 8106576:	4630      	mov	r0, r6
 8106578:	4639      	mov	r1, r7
 810657a:	f7fa fb2d 	bl	8100bd8 <__aeabi_dcmpeq>
 810657e:	b108      	cbz	r0, 8106584 <__cvt+0x7c>
 8106580:	f8cd 900c 	str.w	r9, [sp, #12]
 8106584:	2230      	movs	r2, #48	@ 0x30
 8106586:	9b03      	ldr	r3, [sp, #12]
 8106588:	454b      	cmp	r3, r9
 810658a:	d31e      	bcc.n	81065ca <__cvt+0xc2>
 810658c:	9b03      	ldr	r3, [sp, #12]
 810658e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8106590:	1b5b      	subs	r3, r3, r5
 8106592:	4628      	mov	r0, r5
 8106594:	6013      	str	r3, [r2, #0]
 8106596:	b004      	add	sp, #16
 8106598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810659c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 81065a0:	eb00 0904 	add.w	r9, r0, r4
 81065a4:	d1e5      	bne.n	8106572 <__cvt+0x6a>
 81065a6:	7803      	ldrb	r3, [r0, #0]
 81065a8:	2b30      	cmp	r3, #48	@ 0x30
 81065aa:	d10a      	bne.n	81065c2 <__cvt+0xba>
 81065ac:	2200      	movs	r2, #0
 81065ae:	2300      	movs	r3, #0
 81065b0:	4630      	mov	r0, r6
 81065b2:	4639      	mov	r1, r7
 81065b4:	f7fa fb10 	bl	8100bd8 <__aeabi_dcmpeq>
 81065b8:	b918      	cbnz	r0, 81065c2 <__cvt+0xba>
 81065ba:	f1c4 0401 	rsb	r4, r4, #1
 81065be:	f8ca 4000 	str.w	r4, [sl]
 81065c2:	f8da 3000 	ldr.w	r3, [sl]
 81065c6:	4499      	add	r9, r3
 81065c8:	e7d3      	b.n	8106572 <__cvt+0x6a>
 81065ca:	1c59      	adds	r1, r3, #1
 81065cc:	9103      	str	r1, [sp, #12]
 81065ce:	701a      	strb	r2, [r3, #0]
 81065d0:	e7d9      	b.n	8106586 <__cvt+0x7e>

081065d2 <__exponent>:
 81065d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 81065d4:	2900      	cmp	r1, #0
 81065d6:	bfba      	itte	lt
 81065d8:	4249      	neglt	r1, r1
 81065da:	232d      	movlt	r3, #45	@ 0x2d
 81065dc:	232b      	movge	r3, #43	@ 0x2b
 81065de:	2909      	cmp	r1, #9
 81065e0:	7002      	strb	r2, [r0, #0]
 81065e2:	7043      	strb	r3, [r0, #1]
 81065e4:	dd29      	ble.n	810663a <__exponent+0x68>
 81065e6:	f10d 0307 	add.w	r3, sp, #7
 81065ea:	461d      	mov	r5, r3
 81065ec:	270a      	movs	r7, #10
 81065ee:	461a      	mov	r2, r3
 81065f0:	fbb1 f6f7 	udiv	r6, r1, r7
 81065f4:	fb07 1416 	mls	r4, r7, r6, r1
 81065f8:	3430      	adds	r4, #48	@ 0x30
 81065fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 81065fe:	460c      	mov	r4, r1
 8106600:	2c63      	cmp	r4, #99	@ 0x63
 8106602:	f103 33ff 	add.w	r3, r3, #4294967295
 8106606:	4631      	mov	r1, r6
 8106608:	dcf1      	bgt.n	81065ee <__exponent+0x1c>
 810660a:	3130      	adds	r1, #48	@ 0x30
 810660c:	1e94      	subs	r4, r2, #2
 810660e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8106612:	1c41      	adds	r1, r0, #1
 8106614:	4623      	mov	r3, r4
 8106616:	42ab      	cmp	r3, r5
 8106618:	d30a      	bcc.n	8106630 <__exponent+0x5e>
 810661a:	f10d 0309 	add.w	r3, sp, #9
 810661e:	1a9b      	subs	r3, r3, r2
 8106620:	42ac      	cmp	r4, r5
 8106622:	bf88      	it	hi
 8106624:	2300      	movhi	r3, #0
 8106626:	3302      	adds	r3, #2
 8106628:	4403      	add	r3, r0
 810662a:	1a18      	subs	r0, r3, r0
 810662c:	b003      	add	sp, #12
 810662e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8106630:	f813 6b01 	ldrb.w	r6, [r3], #1
 8106634:	f801 6f01 	strb.w	r6, [r1, #1]!
 8106638:	e7ed      	b.n	8106616 <__exponent+0x44>
 810663a:	2330      	movs	r3, #48	@ 0x30
 810663c:	3130      	adds	r1, #48	@ 0x30
 810663e:	7083      	strb	r3, [r0, #2]
 8106640:	70c1      	strb	r1, [r0, #3]
 8106642:	1d03      	adds	r3, r0, #4
 8106644:	e7f1      	b.n	810662a <__exponent+0x58>
	...

08106648 <_printf_float>:
 8106648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810664c:	b08d      	sub	sp, #52	@ 0x34
 810664e:	460c      	mov	r4, r1
 8106650:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8106654:	4616      	mov	r6, r2
 8106656:	461f      	mov	r7, r3
 8106658:	4605      	mov	r5, r0
 810665a:	f000 fcef 	bl	810703c <_localeconv_r>
 810665e:	6803      	ldr	r3, [r0, #0]
 8106660:	9304      	str	r3, [sp, #16]
 8106662:	4618      	mov	r0, r3
 8106664:	f7f9 fe8c 	bl	8100380 <strlen>
 8106668:	2300      	movs	r3, #0
 810666a:	930a      	str	r3, [sp, #40]	@ 0x28
 810666c:	f8d8 3000 	ldr.w	r3, [r8]
 8106670:	9005      	str	r0, [sp, #20]
 8106672:	3307      	adds	r3, #7
 8106674:	f023 0307 	bic.w	r3, r3, #7
 8106678:	f103 0208 	add.w	r2, r3, #8
 810667c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8106680:	f8d4 b000 	ldr.w	fp, [r4]
 8106684:	f8c8 2000 	str.w	r2, [r8]
 8106688:	e9d3 8900 	ldrd	r8, r9, [r3]
 810668c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8106690:	9307      	str	r3, [sp, #28]
 8106692:	f8cd 8018 	str.w	r8, [sp, #24]
 8106696:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 810669a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810669e:	4b9c      	ldr	r3, [pc, #624]	@ (8106910 <_printf_float+0x2c8>)
 81066a0:	f04f 32ff 	mov.w	r2, #4294967295
 81066a4:	f7fa faca 	bl	8100c3c <__aeabi_dcmpun>
 81066a8:	bb70      	cbnz	r0, 8106708 <_printf_float+0xc0>
 81066aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81066ae:	4b98      	ldr	r3, [pc, #608]	@ (8106910 <_printf_float+0x2c8>)
 81066b0:	f04f 32ff 	mov.w	r2, #4294967295
 81066b4:	f7fa faa4 	bl	8100c00 <__aeabi_dcmple>
 81066b8:	bb30      	cbnz	r0, 8106708 <_printf_float+0xc0>
 81066ba:	2200      	movs	r2, #0
 81066bc:	2300      	movs	r3, #0
 81066be:	4640      	mov	r0, r8
 81066c0:	4649      	mov	r1, r9
 81066c2:	f7fa fa93 	bl	8100bec <__aeabi_dcmplt>
 81066c6:	b110      	cbz	r0, 81066ce <_printf_float+0x86>
 81066c8:	232d      	movs	r3, #45	@ 0x2d
 81066ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 81066ce:	4a91      	ldr	r2, [pc, #580]	@ (8106914 <_printf_float+0x2cc>)
 81066d0:	4b91      	ldr	r3, [pc, #580]	@ (8106918 <_printf_float+0x2d0>)
 81066d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 81066d6:	bf94      	ite	ls
 81066d8:	4690      	movls	r8, r2
 81066da:	4698      	movhi	r8, r3
 81066dc:	2303      	movs	r3, #3
 81066de:	6123      	str	r3, [r4, #16]
 81066e0:	f02b 0304 	bic.w	r3, fp, #4
 81066e4:	6023      	str	r3, [r4, #0]
 81066e6:	f04f 0900 	mov.w	r9, #0
 81066ea:	9700      	str	r7, [sp, #0]
 81066ec:	4633      	mov	r3, r6
 81066ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 81066f0:	4621      	mov	r1, r4
 81066f2:	4628      	mov	r0, r5
 81066f4:	f000 f9d2 	bl	8106a9c <_printf_common>
 81066f8:	3001      	adds	r0, #1
 81066fa:	f040 808d 	bne.w	8106818 <_printf_float+0x1d0>
 81066fe:	f04f 30ff 	mov.w	r0, #4294967295
 8106702:	b00d      	add	sp, #52	@ 0x34
 8106704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106708:	4642      	mov	r2, r8
 810670a:	464b      	mov	r3, r9
 810670c:	4640      	mov	r0, r8
 810670e:	4649      	mov	r1, r9
 8106710:	f7fa fa94 	bl	8100c3c <__aeabi_dcmpun>
 8106714:	b140      	cbz	r0, 8106728 <_printf_float+0xe0>
 8106716:	464b      	mov	r3, r9
 8106718:	2b00      	cmp	r3, #0
 810671a:	bfbc      	itt	lt
 810671c:	232d      	movlt	r3, #45	@ 0x2d
 810671e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8106722:	4a7e      	ldr	r2, [pc, #504]	@ (810691c <_printf_float+0x2d4>)
 8106724:	4b7e      	ldr	r3, [pc, #504]	@ (8106920 <_printf_float+0x2d8>)
 8106726:	e7d4      	b.n	81066d2 <_printf_float+0x8a>
 8106728:	6863      	ldr	r3, [r4, #4]
 810672a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 810672e:	9206      	str	r2, [sp, #24]
 8106730:	1c5a      	adds	r2, r3, #1
 8106732:	d13b      	bne.n	81067ac <_printf_float+0x164>
 8106734:	2306      	movs	r3, #6
 8106736:	6063      	str	r3, [r4, #4]
 8106738:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 810673c:	2300      	movs	r3, #0
 810673e:	6022      	str	r2, [r4, #0]
 8106740:	9303      	str	r3, [sp, #12]
 8106742:	ab0a      	add	r3, sp, #40	@ 0x28
 8106744:	e9cd a301 	strd	sl, r3, [sp, #4]
 8106748:	ab09      	add	r3, sp, #36	@ 0x24
 810674a:	9300      	str	r3, [sp, #0]
 810674c:	6861      	ldr	r1, [r4, #4]
 810674e:	ec49 8b10 	vmov	d0, r8, r9
 8106752:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8106756:	4628      	mov	r0, r5
 8106758:	f7ff fed6 	bl	8106508 <__cvt>
 810675c:	9b06      	ldr	r3, [sp, #24]
 810675e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8106760:	2b47      	cmp	r3, #71	@ 0x47
 8106762:	4680      	mov	r8, r0
 8106764:	d129      	bne.n	81067ba <_printf_float+0x172>
 8106766:	1cc8      	adds	r0, r1, #3
 8106768:	db02      	blt.n	8106770 <_printf_float+0x128>
 810676a:	6863      	ldr	r3, [r4, #4]
 810676c:	4299      	cmp	r1, r3
 810676e:	dd41      	ble.n	81067f4 <_printf_float+0x1ac>
 8106770:	f1aa 0a02 	sub.w	sl, sl, #2
 8106774:	fa5f fa8a 	uxtb.w	sl, sl
 8106778:	3901      	subs	r1, #1
 810677a:	4652      	mov	r2, sl
 810677c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8106780:	9109      	str	r1, [sp, #36]	@ 0x24
 8106782:	f7ff ff26 	bl	81065d2 <__exponent>
 8106786:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8106788:	1813      	adds	r3, r2, r0
 810678a:	2a01      	cmp	r2, #1
 810678c:	4681      	mov	r9, r0
 810678e:	6123      	str	r3, [r4, #16]
 8106790:	dc02      	bgt.n	8106798 <_printf_float+0x150>
 8106792:	6822      	ldr	r2, [r4, #0]
 8106794:	07d2      	lsls	r2, r2, #31
 8106796:	d501      	bpl.n	810679c <_printf_float+0x154>
 8106798:	3301      	adds	r3, #1
 810679a:	6123      	str	r3, [r4, #16]
 810679c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 81067a0:	2b00      	cmp	r3, #0
 81067a2:	d0a2      	beq.n	81066ea <_printf_float+0xa2>
 81067a4:	232d      	movs	r3, #45	@ 0x2d
 81067a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 81067aa:	e79e      	b.n	81066ea <_printf_float+0xa2>
 81067ac:	9a06      	ldr	r2, [sp, #24]
 81067ae:	2a47      	cmp	r2, #71	@ 0x47
 81067b0:	d1c2      	bne.n	8106738 <_printf_float+0xf0>
 81067b2:	2b00      	cmp	r3, #0
 81067b4:	d1c0      	bne.n	8106738 <_printf_float+0xf0>
 81067b6:	2301      	movs	r3, #1
 81067b8:	e7bd      	b.n	8106736 <_printf_float+0xee>
 81067ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 81067be:	d9db      	bls.n	8106778 <_printf_float+0x130>
 81067c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 81067c4:	d118      	bne.n	81067f8 <_printf_float+0x1b0>
 81067c6:	2900      	cmp	r1, #0
 81067c8:	6863      	ldr	r3, [r4, #4]
 81067ca:	dd0b      	ble.n	81067e4 <_printf_float+0x19c>
 81067cc:	6121      	str	r1, [r4, #16]
 81067ce:	b913      	cbnz	r3, 81067d6 <_printf_float+0x18e>
 81067d0:	6822      	ldr	r2, [r4, #0]
 81067d2:	07d0      	lsls	r0, r2, #31
 81067d4:	d502      	bpl.n	81067dc <_printf_float+0x194>
 81067d6:	3301      	adds	r3, #1
 81067d8:	440b      	add	r3, r1
 81067da:	6123      	str	r3, [r4, #16]
 81067dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 81067de:	f04f 0900 	mov.w	r9, #0
 81067e2:	e7db      	b.n	810679c <_printf_float+0x154>
 81067e4:	b913      	cbnz	r3, 81067ec <_printf_float+0x1a4>
 81067e6:	6822      	ldr	r2, [r4, #0]
 81067e8:	07d2      	lsls	r2, r2, #31
 81067ea:	d501      	bpl.n	81067f0 <_printf_float+0x1a8>
 81067ec:	3302      	adds	r3, #2
 81067ee:	e7f4      	b.n	81067da <_printf_float+0x192>
 81067f0:	2301      	movs	r3, #1
 81067f2:	e7f2      	b.n	81067da <_printf_float+0x192>
 81067f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 81067f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81067fa:	4299      	cmp	r1, r3
 81067fc:	db05      	blt.n	810680a <_printf_float+0x1c2>
 81067fe:	6823      	ldr	r3, [r4, #0]
 8106800:	6121      	str	r1, [r4, #16]
 8106802:	07d8      	lsls	r0, r3, #31
 8106804:	d5ea      	bpl.n	81067dc <_printf_float+0x194>
 8106806:	1c4b      	adds	r3, r1, #1
 8106808:	e7e7      	b.n	81067da <_printf_float+0x192>
 810680a:	2900      	cmp	r1, #0
 810680c:	bfd4      	ite	le
 810680e:	f1c1 0202 	rsble	r2, r1, #2
 8106812:	2201      	movgt	r2, #1
 8106814:	4413      	add	r3, r2
 8106816:	e7e0      	b.n	81067da <_printf_float+0x192>
 8106818:	6823      	ldr	r3, [r4, #0]
 810681a:	055a      	lsls	r2, r3, #21
 810681c:	d407      	bmi.n	810682e <_printf_float+0x1e6>
 810681e:	6923      	ldr	r3, [r4, #16]
 8106820:	4642      	mov	r2, r8
 8106822:	4631      	mov	r1, r6
 8106824:	4628      	mov	r0, r5
 8106826:	47b8      	blx	r7
 8106828:	3001      	adds	r0, #1
 810682a:	d12b      	bne.n	8106884 <_printf_float+0x23c>
 810682c:	e767      	b.n	81066fe <_printf_float+0xb6>
 810682e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8106832:	f240 80dd 	bls.w	81069f0 <_printf_float+0x3a8>
 8106836:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 810683a:	2200      	movs	r2, #0
 810683c:	2300      	movs	r3, #0
 810683e:	f7fa f9cb 	bl	8100bd8 <__aeabi_dcmpeq>
 8106842:	2800      	cmp	r0, #0
 8106844:	d033      	beq.n	81068ae <_printf_float+0x266>
 8106846:	4a37      	ldr	r2, [pc, #220]	@ (8106924 <_printf_float+0x2dc>)
 8106848:	2301      	movs	r3, #1
 810684a:	4631      	mov	r1, r6
 810684c:	4628      	mov	r0, r5
 810684e:	47b8      	blx	r7
 8106850:	3001      	adds	r0, #1
 8106852:	f43f af54 	beq.w	81066fe <_printf_float+0xb6>
 8106856:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 810685a:	4543      	cmp	r3, r8
 810685c:	db02      	blt.n	8106864 <_printf_float+0x21c>
 810685e:	6823      	ldr	r3, [r4, #0]
 8106860:	07d8      	lsls	r0, r3, #31
 8106862:	d50f      	bpl.n	8106884 <_printf_float+0x23c>
 8106864:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8106868:	4631      	mov	r1, r6
 810686a:	4628      	mov	r0, r5
 810686c:	47b8      	blx	r7
 810686e:	3001      	adds	r0, #1
 8106870:	f43f af45 	beq.w	81066fe <_printf_float+0xb6>
 8106874:	f04f 0900 	mov.w	r9, #0
 8106878:	f108 38ff 	add.w	r8, r8, #4294967295
 810687c:	f104 0a1a 	add.w	sl, r4, #26
 8106880:	45c8      	cmp	r8, r9
 8106882:	dc09      	bgt.n	8106898 <_printf_float+0x250>
 8106884:	6823      	ldr	r3, [r4, #0]
 8106886:	079b      	lsls	r3, r3, #30
 8106888:	f100 8103 	bmi.w	8106a92 <_printf_float+0x44a>
 810688c:	68e0      	ldr	r0, [r4, #12]
 810688e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8106890:	4298      	cmp	r0, r3
 8106892:	bfb8      	it	lt
 8106894:	4618      	movlt	r0, r3
 8106896:	e734      	b.n	8106702 <_printf_float+0xba>
 8106898:	2301      	movs	r3, #1
 810689a:	4652      	mov	r2, sl
 810689c:	4631      	mov	r1, r6
 810689e:	4628      	mov	r0, r5
 81068a0:	47b8      	blx	r7
 81068a2:	3001      	adds	r0, #1
 81068a4:	f43f af2b 	beq.w	81066fe <_printf_float+0xb6>
 81068a8:	f109 0901 	add.w	r9, r9, #1
 81068ac:	e7e8      	b.n	8106880 <_printf_float+0x238>
 81068ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81068b0:	2b00      	cmp	r3, #0
 81068b2:	dc39      	bgt.n	8106928 <_printf_float+0x2e0>
 81068b4:	4a1b      	ldr	r2, [pc, #108]	@ (8106924 <_printf_float+0x2dc>)
 81068b6:	2301      	movs	r3, #1
 81068b8:	4631      	mov	r1, r6
 81068ba:	4628      	mov	r0, r5
 81068bc:	47b8      	blx	r7
 81068be:	3001      	adds	r0, #1
 81068c0:	f43f af1d 	beq.w	81066fe <_printf_float+0xb6>
 81068c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 81068c8:	ea59 0303 	orrs.w	r3, r9, r3
 81068cc:	d102      	bne.n	81068d4 <_printf_float+0x28c>
 81068ce:	6823      	ldr	r3, [r4, #0]
 81068d0:	07d9      	lsls	r1, r3, #31
 81068d2:	d5d7      	bpl.n	8106884 <_printf_float+0x23c>
 81068d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81068d8:	4631      	mov	r1, r6
 81068da:	4628      	mov	r0, r5
 81068dc:	47b8      	blx	r7
 81068de:	3001      	adds	r0, #1
 81068e0:	f43f af0d 	beq.w	81066fe <_printf_float+0xb6>
 81068e4:	f04f 0a00 	mov.w	sl, #0
 81068e8:	f104 0b1a 	add.w	fp, r4, #26
 81068ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81068ee:	425b      	negs	r3, r3
 81068f0:	4553      	cmp	r3, sl
 81068f2:	dc01      	bgt.n	81068f8 <_printf_float+0x2b0>
 81068f4:	464b      	mov	r3, r9
 81068f6:	e793      	b.n	8106820 <_printf_float+0x1d8>
 81068f8:	2301      	movs	r3, #1
 81068fa:	465a      	mov	r2, fp
 81068fc:	4631      	mov	r1, r6
 81068fe:	4628      	mov	r0, r5
 8106900:	47b8      	blx	r7
 8106902:	3001      	adds	r0, #1
 8106904:	f43f aefb 	beq.w	81066fe <_printf_float+0xb6>
 8106908:	f10a 0a01 	add.w	sl, sl, #1
 810690c:	e7ee      	b.n	81068ec <_printf_float+0x2a4>
 810690e:	bf00      	nop
 8106910:	7fefffff 	.word	0x7fefffff
 8106914:	08109220 	.word	0x08109220
 8106918:	08109224 	.word	0x08109224
 810691c:	08109228 	.word	0x08109228
 8106920:	0810922c 	.word	0x0810922c
 8106924:	08109230 	.word	0x08109230
 8106928:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810692a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 810692e:	4553      	cmp	r3, sl
 8106930:	bfa8      	it	ge
 8106932:	4653      	movge	r3, sl
 8106934:	2b00      	cmp	r3, #0
 8106936:	4699      	mov	r9, r3
 8106938:	dc36      	bgt.n	81069a8 <_printf_float+0x360>
 810693a:	f04f 0b00 	mov.w	fp, #0
 810693e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8106942:	f104 021a 	add.w	r2, r4, #26
 8106946:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8106948:	9306      	str	r3, [sp, #24]
 810694a:	eba3 0309 	sub.w	r3, r3, r9
 810694e:	455b      	cmp	r3, fp
 8106950:	dc31      	bgt.n	81069b6 <_printf_float+0x36e>
 8106952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8106954:	459a      	cmp	sl, r3
 8106956:	dc3a      	bgt.n	81069ce <_printf_float+0x386>
 8106958:	6823      	ldr	r3, [r4, #0]
 810695a:	07da      	lsls	r2, r3, #31
 810695c:	d437      	bmi.n	81069ce <_printf_float+0x386>
 810695e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8106960:	ebaa 0903 	sub.w	r9, sl, r3
 8106964:	9b06      	ldr	r3, [sp, #24]
 8106966:	ebaa 0303 	sub.w	r3, sl, r3
 810696a:	4599      	cmp	r9, r3
 810696c:	bfa8      	it	ge
 810696e:	4699      	movge	r9, r3
 8106970:	f1b9 0f00 	cmp.w	r9, #0
 8106974:	dc33      	bgt.n	81069de <_printf_float+0x396>
 8106976:	f04f 0800 	mov.w	r8, #0
 810697a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810697e:	f104 0b1a 	add.w	fp, r4, #26
 8106982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8106984:	ebaa 0303 	sub.w	r3, sl, r3
 8106988:	eba3 0309 	sub.w	r3, r3, r9
 810698c:	4543      	cmp	r3, r8
 810698e:	f77f af79 	ble.w	8106884 <_printf_float+0x23c>
 8106992:	2301      	movs	r3, #1
 8106994:	465a      	mov	r2, fp
 8106996:	4631      	mov	r1, r6
 8106998:	4628      	mov	r0, r5
 810699a:	47b8      	blx	r7
 810699c:	3001      	adds	r0, #1
 810699e:	f43f aeae 	beq.w	81066fe <_printf_float+0xb6>
 81069a2:	f108 0801 	add.w	r8, r8, #1
 81069a6:	e7ec      	b.n	8106982 <_printf_float+0x33a>
 81069a8:	4642      	mov	r2, r8
 81069aa:	4631      	mov	r1, r6
 81069ac:	4628      	mov	r0, r5
 81069ae:	47b8      	blx	r7
 81069b0:	3001      	adds	r0, #1
 81069b2:	d1c2      	bne.n	810693a <_printf_float+0x2f2>
 81069b4:	e6a3      	b.n	81066fe <_printf_float+0xb6>
 81069b6:	2301      	movs	r3, #1
 81069b8:	4631      	mov	r1, r6
 81069ba:	4628      	mov	r0, r5
 81069bc:	9206      	str	r2, [sp, #24]
 81069be:	47b8      	blx	r7
 81069c0:	3001      	adds	r0, #1
 81069c2:	f43f ae9c 	beq.w	81066fe <_printf_float+0xb6>
 81069c6:	9a06      	ldr	r2, [sp, #24]
 81069c8:	f10b 0b01 	add.w	fp, fp, #1
 81069cc:	e7bb      	b.n	8106946 <_printf_float+0x2fe>
 81069ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81069d2:	4631      	mov	r1, r6
 81069d4:	4628      	mov	r0, r5
 81069d6:	47b8      	blx	r7
 81069d8:	3001      	adds	r0, #1
 81069da:	d1c0      	bne.n	810695e <_printf_float+0x316>
 81069dc:	e68f      	b.n	81066fe <_printf_float+0xb6>
 81069de:	9a06      	ldr	r2, [sp, #24]
 81069e0:	464b      	mov	r3, r9
 81069e2:	4442      	add	r2, r8
 81069e4:	4631      	mov	r1, r6
 81069e6:	4628      	mov	r0, r5
 81069e8:	47b8      	blx	r7
 81069ea:	3001      	adds	r0, #1
 81069ec:	d1c3      	bne.n	8106976 <_printf_float+0x32e>
 81069ee:	e686      	b.n	81066fe <_printf_float+0xb6>
 81069f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 81069f4:	f1ba 0f01 	cmp.w	sl, #1
 81069f8:	dc01      	bgt.n	81069fe <_printf_float+0x3b6>
 81069fa:	07db      	lsls	r3, r3, #31
 81069fc:	d536      	bpl.n	8106a6c <_printf_float+0x424>
 81069fe:	2301      	movs	r3, #1
 8106a00:	4642      	mov	r2, r8
 8106a02:	4631      	mov	r1, r6
 8106a04:	4628      	mov	r0, r5
 8106a06:	47b8      	blx	r7
 8106a08:	3001      	adds	r0, #1
 8106a0a:	f43f ae78 	beq.w	81066fe <_printf_float+0xb6>
 8106a0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8106a12:	4631      	mov	r1, r6
 8106a14:	4628      	mov	r0, r5
 8106a16:	47b8      	blx	r7
 8106a18:	3001      	adds	r0, #1
 8106a1a:	f43f ae70 	beq.w	81066fe <_printf_float+0xb6>
 8106a1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8106a22:	2200      	movs	r2, #0
 8106a24:	2300      	movs	r3, #0
 8106a26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8106a2a:	f7fa f8d5 	bl	8100bd8 <__aeabi_dcmpeq>
 8106a2e:	b9c0      	cbnz	r0, 8106a62 <_printf_float+0x41a>
 8106a30:	4653      	mov	r3, sl
 8106a32:	f108 0201 	add.w	r2, r8, #1
 8106a36:	4631      	mov	r1, r6
 8106a38:	4628      	mov	r0, r5
 8106a3a:	47b8      	blx	r7
 8106a3c:	3001      	adds	r0, #1
 8106a3e:	d10c      	bne.n	8106a5a <_printf_float+0x412>
 8106a40:	e65d      	b.n	81066fe <_printf_float+0xb6>
 8106a42:	2301      	movs	r3, #1
 8106a44:	465a      	mov	r2, fp
 8106a46:	4631      	mov	r1, r6
 8106a48:	4628      	mov	r0, r5
 8106a4a:	47b8      	blx	r7
 8106a4c:	3001      	adds	r0, #1
 8106a4e:	f43f ae56 	beq.w	81066fe <_printf_float+0xb6>
 8106a52:	f108 0801 	add.w	r8, r8, #1
 8106a56:	45d0      	cmp	r8, sl
 8106a58:	dbf3      	blt.n	8106a42 <_printf_float+0x3fa>
 8106a5a:	464b      	mov	r3, r9
 8106a5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8106a60:	e6df      	b.n	8106822 <_printf_float+0x1da>
 8106a62:	f04f 0800 	mov.w	r8, #0
 8106a66:	f104 0b1a 	add.w	fp, r4, #26
 8106a6a:	e7f4      	b.n	8106a56 <_printf_float+0x40e>
 8106a6c:	2301      	movs	r3, #1
 8106a6e:	4642      	mov	r2, r8
 8106a70:	e7e1      	b.n	8106a36 <_printf_float+0x3ee>
 8106a72:	2301      	movs	r3, #1
 8106a74:	464a      	mov	r2, r9
 8106a76:	4631      	mov	r1, r6
 8106a78:	4628      	mov	r0, r5
 8106a7a:	47b8      	blx	r7
 8106a7c:	3001      	adds	r0, #1
 8106a7e:	f43f ae3e 	beq.w	81066fe <_printf_float+0xb6>
 8106a82:	f108 0801 	add.w	r8, r8, #1
 8106a86:	68e3      	ldr	r3, [r4, #12]
 8106a88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8106a8a:	1a5b      	subs	r3, r3, r1
 8106a8c:	4543      	cmp	r3, r8
 8106a8e:	dcf0      	bgt.n	8106a72 <_printf_float+0x42a>
 8106a90:	e6fc      	b.n	810688c <_printf_float+0x244>
 8106a92:	f04f 0800 	mov.w	r8, #0
 8106a96:	f104 0919 	add.w	r9, r4, #25
 8106a9a:	e7f4      	b.n	8106a86 <_printf_float+0x43e>

08106a9c <_printf_common>:
 8106a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8106aa0:	4616      	mov	r6, r2
 8106aa2:	4698      	mov	r8, r3
 8106aa4:	688a      	ldr	r2, [r1, #8]
 8106aa6:	690b      	ldr	r3, [r1, #16]
 8106aa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8106aac:	4293      	cmp	r3, r2
 8106aae:	bfb8      	it	lt
 8106ab0:	4613      	movlt	r3, r2
 8106ab2:	6033      	str	r3, [r6, #0]
 8106ab4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8106ab8:	4607      	mov	r7, r0
 8106aba:	460c      	mov	r4, r1
 8106abc:	b10a      	cbz	r2, 8106ac2 <_printf_common+0x26>
 8106abe:	3301      	adds	r3, #1
 8106ac0:	6033      	str	r3, [r6, #0]
 8106ac2:	6823      	ldr	r3, [r4, #0]
 8106ac4:	0699      	lsls	r1, r3, #26
 8106ac6:	bf42      	ittt	mi
 8106ac8:	6833      	ldrmi	r3, [r6, #0]
 8106aca:	3302      	addmi	r3, #2
 8106acc:	6033      	strmi	r3, [r6, #0]
 8106ace:	6825      	ldr	r5, [r4, #0]
 8106ad0:	f015 0506 	ands.w	r5, r5, #6
 8106ad4:	d106      	bne.n	8106ae4 <_printf_common+0x48>
 8106ad6:	f104 0a19 	add.w	sl, r4, #25
 8106ada:	68e3      	ldr	r3, [r4, #12]
 8106adc:	6832      	ldr	r2, [r6, #0]
 8106ade:	1a9b      	subs	r3, r3, r2
 8106ae0:	42ab      	cmp	r3, r5
 8106ae2:	dc26      	bgt.n	8106b32 <_printf_common+0x96>
 8106ae4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8106ae8:	6822      	ldr	r2, [r4, #0]
 8106aea:	3b00      	subs	r3, #0
 8106aec:	bf18      	it	ne
 8106aee:	2301      	movne	r3, #1
 8106af0:	0692      	lsls	r2, r2, #26
 8106af2:	d42b      	bmi.n	8106b4c <_printf_common+0xb0>
 8106af4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8106af8:	4641      	mov	r1, r8
 8106afa:	4638      	mov	r0, r7
 8106afc:	47c8      	blx	r9
 8106afe:	3001      	adds	r0, #1
 8106b00:	d01e      	beq.n	8106b40 <_printf_common+0xa4>
 8106b02:	6823      	ldr	r3, [r4, #0]
 8106b04:	6922      	ldr	r2, [r4, #16]
 8106b06:	f003 0306 	and.w	r3, r3, #6
 8106b0a:	2b04      	cmp	r3, #4
 8106b0c:	bf02      	ittt	eq
 8106b0e:	68e5      	ldreq	r5, [r4, #12]
 8106b10:	6833      	ldreq	r3, [r6, #0]
 8106b12:	1aed      	subeq	r5, r5, r3
 8106b14:	68a3      	ldr	r3, [r4, #8]
 8106b16:	bf0c      	ite	eq
 8106b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8106b1c:	2500      	movne	r5, #0
 8106b1e:	4293      	cmp	r3, r2
 8106b20:	bfc4      	itt	gt
 8106b22:	1a9b      	subgt	r3, r3, r2
 8106b24:	18ed      	addgt	r5, r5, r3
 8106b26:	2600      	movs	r6, #0
 8106b28:	341a      	adds	r4, #26
 8106b2a:	42b5      	cmp	r5, r6
 8106b2c:	d11a      	bne.n	8106b64 <_printf_common+0xc8>
 8106b2e:	2000      	movs	r0, #0
 8106b30:	e008      	b.n	8106b44 <_printf_common+0xa8>
 8106b32:	2301      	movs	r3, #1
 8106b34:	4652      	mov	r2, sl
 8106b36:	4641      	mov	r1, r8
 8106b38:	4638      	mov	r0, r7
 8106b3a:	47c8      	blx	r9
 8106b3c:	3001      	adds	r0, #1
 8106b3e:	d103      	bne.n	8106b48 <_printf_common+0xac>
 8106b40:	f04f 30ff 	mov.w	r0, #4294967295
 8106b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106b48:	3501      	adds	r5, #1
 8106b4a:	e7c6      	b.n	8106ada <_printf_common+0x3e>
 8106b4c:	18e1      	adds	r1, r4, r3
 8106b4e:	1c5a      	adds	r2, r3, #1
 8106b50:	2030      	movs	r0, #48	@ 0x30
 8106b52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8106b56:	4422      	add	r2, r4
 8106b58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8106b5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8106b60:	3302      	adds	r3, #2
 8106b62:	e7c7      	b.n	8106af4 <_printf_common+0x58>
 8106b64:	2301      	movs	r3, #1
 8106b66:	4622      	mov	r2, r4
 8106b68:	4641      	mov	r1, r8
 8106b6a:	4638      	mov	r0, r7
 8106b6c:	47c8      	blx	r9
 8106b6e:	3001      	adds	r0, #1
 8106b70:	d0e6      	beq.n	8106b40 <_printf_common+0xa4>
 8106b72:	3601      	adds	r6, #1
 8106b74:	e7d9      	b.n	8106b2a <_printf_common+0x8e>
	...

08106b78 <_printf_i>:
 8106b78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8106b7c:	7e0f      	ldrb	r7, [r1, #24]
 8106b7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8106b80:	2f78      	cmp	r7, #120	@ 0x78
 8106b82:	4691      	mov	r9, r2
 8106b84:	4680      	mov	r8, r0
 8106b86:	460c      	mov	r4, r1
 8106b88:	469a      	mov	sl, r3
 8106b8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8106b8e:	d807      	bhi.n	8106ba0 <_printf_i+0x28>
 8106b90:	2f62      	cmp	r7, #98	@ 0x62
 8106b92:	d80a      	bhi.n	8106baa <_printf_i+0x32>
 8106b94:	2f00      	cmp	r7, #0
 8106b96:	f000 80d2 	beq.w	8106d3e <_printf_i+0x1c6>
 8106b9a:	2f58      	cmp	r7, #88	@ 0x58
 8106b9c:	f000 80b9 	beq.w	8106d12 <_printf_i+0x19a>
 8106ba0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8106ba4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8106ba8:	e03a      	b.n	8106c20 <_printf_i+0xa8>
 8106baa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8106bae:	2b15      	cmp	r3, #21
 8106bb0:	d8f6      	bhi.n	8106ba0 <_printf_i+0x28>
 8106bb2:	a101      	add	r1, pc, #4	@ (adr r1, 8106bb8 <_printf_i+0x40>)
 8106bb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8106bb8:	08106c11 	.word	0x08106c11
 8106bbc:	08106c25 	.word	0x08106c25
 8106bc0:	08106ba1 	.word	0x08106ba1
 8106bc4:	08106ba1 	.word	0x08106ba1
 8106bc8:	08106ba1 	.word	0x08106ba1
 8106bcc:	08106ba1 	.word	0x08106ba1
 8106bd0:	08106c25 	.word	0x08106c25
 8106bd4:	08106ba1 	.word	0x08106ba1
 8106bd8:	08106ba1 	.word	0x08106ba1
 8106bdc:	08106ba1 	.word	0x08106ba1
 8106be0:	08106ba1 	.word	0x08106ba1
 8106be4:	08106d25 	.word	0x08106d25
 8106be8:	08106c4f 	.word	0x08106c4f
 8106bec:	08106cdf 	.word	0x08106cdf
 8106bf0:	08106ba1 	.word	0x08106ba1
 8106bf4:	08106ba1 	.word	0x08106ba1
 8106bf8:	08106d47 	.word	0x08106d47
 8106bfc:	08106ba1 	.word	0x08106ba1
 8106c00:	08106c4f 	.word	0x08106c4f
 8106c04:	08106ba1 	.word	0x08106ba1
 8106c08:	08106ba1 	.word	0x08106ba1
 8106c0c:	08106ce7 	.word	0x08106ce7
 8106c10:	6833      	ldr	r3, [r6, #0]
 8106c12:	1d1a      	adds	r2, r3, #4
 8106c14:	681b      	ldr	r3, [r3, #0]
 8106c16:	6032      	str	r2, [r6, #0]
 8106c18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8106c1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8106c20:	2301      	movs	r3, #1
 8106c22:	e09d      	b.n	8106d60 <_printf_i+0x1e8>
 8106c24:	6833      	ldr	r3, [r6, #0]
 8106c26:	6820      	ldr	r0, [r4, #0]
 8106c28:	1d19      	adds	r1, r3, #4
 8106c2a:	6031      	str	r1, [r6, #0]
 8106c2c:	0606      	lsls	r6, r0, #24
 8106c2e:	d501      	bpl.n	8106c34 <_printf_i+0xbc>
 8106c30:	681d      	ldr	r5, [r3, #0]
 8106c32:	e003      	b.n	8106c3c <_printf_i+0xc4>
 8106c34:	0645      	lsls	r5, r0, #25
 8106c36:	d5fb      	bpl.n	8106c30 <_printf_i+0xb8>
 8106c38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8106c3c:	2d00      	cmp	r5, #0
 8106c3e:	da03      	bge.n	8106c48 <_printf_i+0xd0>
 8106c40:	232d      	movs	r3, #45	@ 0x2d
 8106c42:	426d      	negs	r5, r5
 8106c44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8106c48:	4859      	ldr	r0, [pc, #356]	@ (8106db0 <_printf_i+0x238>)
 8106c4a:	230a      	movs	r3, #10
 8106c4c:	e011      	b.n	8106c72 <_printf_i+0xfa>
 8106c4e:	6821      	ldr	r1, [r4, #0]
 8106c50:	6833      	ldr	r3, [r6, #0]
 8106c52:	0608      	lsls	r0, r1, #24
 8106c54:	f853 5b04 	ldr.w	r5, [r3], #4
 8106c58:	d402      	bmi.n	8106c60 <_printf_i+0xe8>
 8106c5a:	0649      	lsls	r1, r1, #25
 8106c5c:	bf48      	it	mi
 8106c5e:	b2ad      	uxthmi	r5, r5
 8106c60:	2f6f      	cmp	r7, #111	@ 0x6f
 8106c62:	4853      	ldr	r0, [pc, #332]	@ (8106db0 <_printf_i+0x238>)
 8106c64:	6033      	str	r3, [r6, #0]
 8106c66:	bf14      	ite	ne
 8106c68:	230a      	movne	r3, #10
 8106c6a:	2308      	moveq	r3, #8
 8106c6c:	2100      	movs	r1, #0
 8106c6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8106c72:	6866      	ldr	r6, [r4, #4]
 8106c74:	60a6      	str	r6, [r4, #8]
 8106c76:	2e00      	cmp	r6, #0
 8106c78:	bfa2      	ittt	ge
 8106c7a:	6821      	ldrge	r1, [r4, #0]
 8106c7c:	f021 0104 	bicge.w	r1, r1, #4
 8106c80:	6021      	strge	r1, [r4, #0]
 8106c82:	b90d      	cbnz	r5, 8106c88 <_printf_i+0x110>
 8106c84:	2e00      	cmp	r6, #0
 8106c86:	d04b      	beq.n	8106d20 <_printf_i+0x1a8>
 8106c88:	4616      	mov	r6, r2
 8106c8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8106c8e:	fb03 5711 	mls	r7, r3, r1, r5
 8106c92:	5dc7      	ldrb	r7, [r0, r7]
 8106c94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8106c98:	462f      	mov	r7, r5
 8106c9a:	42bb      	cmp	r3, r7
 8106c9c:	460d      	mov	r5, r1
 8106c9e:	d9f4      	bls.n	8106c8a <_printf_i+0x112>
 8106ca0:	2b08      	cmp	r3, #8
 8106ca2:	d10b      	bne.n	8106cbc <_printf_i+0x144>
 8106ca4:	6823      	ldr	r3, [r4, #0]
 8106ca6:	07df      	lsls	r7, r3, #31
 8106ca8:	d508      	bpl.n	8106cbc <_printf_i+0x144>
 8106caa:	6923      	ldr	r3, [r4, #16]
 8106cac:	6861      	ldr	r1, [r4, #4]
 8106cae:	4299      	cmp	r1, r3
 8106cb0:	bfde      	ittt	le
 8106cb2:	2330      	movle	r3, #48	@ 0x30
 8106cb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8106cb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8106cbc:	1b92      	subs	r2, r2, r6
 8106cbe:	6122      	str	r2, [r4, #16]
 8106cc0:	f8cd a000 	str.w	sl, [sp]
 8106cc4:	464b      	mov	r3, r9
 8106cc6:	aa03      	add	r2, sp, #12
 8106cc8:	4621      	mov	r1, r4
 8106cca:	4640      	mov	r0, r8
 8106ccc:	f7ff fee6 	bl	8106a9c <_printf_common>
 8106cd0:	3001      	adds	r0, #1
 8106cd2:	d14a      	bne.n	8106d6a <_printf_i+0x1f2>
 8106cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8106cd8:	b004      	add	sp, #16
 8106cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106cde:	6823      	ldr	r3, [r4, #0]
 8106ce0:	f043 0320 	orr.w	r3, r3, #32
 8106ce4:	6023      	str	r3, [r4, #0]
 8106ce6:	4833      	ldr	r0, [pc, #204]	@ (8106db4 <_printf_i+0x23c>)
 8106ce8:	2778      	movs	r7, #120	@ 0x78
 8106cea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8106cee:	6823      	ldr	r3, [r4, #0]
 8106cf0:	6831      	ldr	r1, [r6, #0]
 8106cf2:	061f      	lsls	r7, r3, #24
 8106cf4:	f851 5b04 	ldr.w	r5, [r1], #4
 8106cf8:	d402      	bmi.n	8106d00 <_printf_i+0x188>
 8106cfa:	065f      	lsls	r7, r3, #25
 8106cfc:	bf48      	it	mi
 8106cfe:	b2ad      	uxthmi	r5, r5
 8106d00:	6031      	str	r1, [r6, #0]
 8106d02:	07d9      	lsls	r1, r3, #31
 8106d04:	bf44      	itt	mi
 8106d06:	f043 0320 	orrmi.w	r3, r3, #32
 8106d0a:	6023      	strmi	r3, [r4, #0]
 8106d0c:	b11d      	cbz	r5, 8106d16 <_printf_i+0x19e>
 8106d0e:	2310      	movs	r3, #16
 8106d10:	e7ac      	b.n	8106c6c <_printf_i+0xf4>
 8106d12:	4827      	ldr	r0, [pc, #156]	@ (8106db0 <_printf_i+0x238>)
 8106d14:	e7e9      	b.n	8106cea <_printf_i+0x172>
 8106d16:	6823      	ldr	r3, [r4, #0]
 8106d18:	f023 0320 	bic.w	r3, r3, #32
 8106d1c:	6023      	str	r3, [r4, #0]
 8106d1e:	e7f6      	b.n	8106d0e <_printf_i+0x196>
 8106d20:	4616      	mov	r6, r2
 8106d22:	e7bd      	b.n	8106ca0 <_printf_i+0x128>
 8106d24:	6833      	ldr	r3, [r6, #0]
 8106d26:	6825      	ldr	r5, [r4, #0]
 8106d28:	6961      	ldr	r1, [r4, #20]
 8106d2a:	1d18      	adds	r0, r3, #4
 8106d2c:	6030      	str	r0, [r6, #0]
 8106d2e:	062e      	lsls	r6, r5, #24
 8106d30:	681b      	ldr	r3, [r3, #0]
 8106d32:	d501      	bpl.n	8106d38 <_printf_i+0x1c0>
 8106d34:	6019      	str	r1, [r3, #0]
 8106d36:	e002      	b.n	8106d3e <_printf_i+0x1c6>
 8106d38:	0668      	lsls	r0, r5, #25
 8106d3a:	d5fb      	bpl.n	8106d34 <_printf_i+0x1bc>
 8106d3c:	8019      	strh	r1, [r3, #0]
 8106d3e:	2300      	movs	r3, #0
 8106d40:	6123      	str	r3, [r4, #16]
 8106d42:	4616      	mov	r6, r2
 8106d44:	e7bc      	b.n	8106cc0 <_printf_i+0x148>
 8106d46:	6833      	ldr	r3, [r6, #0]
 8106d48:	1d1a      	adds	r2, r3, #4
 8106d4a:	6032      	str	r2, [r6, #0]
 8106d4c:	681e      	ldr	r6, [r3, #0]
 8106d4e:	6862      	ldr	r2, [r4, #4]
 8106d50:	2100      	movs	r1, #0
 8106d52:	4630      	mov	r0, r6
 8106d54:	f7f9 fac4 	bl	81002e0 <memchr>
 8106d58:	b108      	cbz	r0, 8106d5e <_printf_i+0x1e6>
 8106d5a:	1b80      	subs	r0, r0, r6
 8106d5c:	6060      	str	r0, [r4, #4]
 8106d5e:	6863      	ldr	r3, [r4, #4]
 8106d60:	6123      	str	r3, [r4, #16]
 8106d62:	2300      	movs	r3, #0
 8106d64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8106d68:	e7aa      	b.n	8106cc0 <_printf_i+0x148>
 8106d6a:	6923      	ldr	r3, [r4, #16]
 8106d6c:	4632      	mov	r2, r6
 8106d6e:	4649      	mov	r1, r9
 8106d70:	4640      	mov	r0, r8
 8106d72:	47d0      	blx	sl
 8106d74:	3001      	adds	r0, #1
 8106d76:	d0ad      	beq.n	8106cd4 <_printf_i+0x15c>
 8106d78:	6823      	ldr	r3, [r4, #0]
 8106d7a:	079b      	lsls	r3, r3, #30
 8106d7c:	d413      	bmi.n	8106da6 <_printf_i+0x22e>
 8106d7e:	68e0      	ldr	r0, [r4, #12]
 8106d80:	9b03      	ldr	r3, [sp, #12]
 8106d82:	4298      	cmp	r0, r3
 8106d84:	bfb8      	it	lt
 8106d86:	4618      	movlt	r0, r3
 8106d88:	e7a6      	b.n	8106cd8 <_printf_i+0x160>
 8106d8a:	2301      	movs	r3, #1
 8106d8c:	4632      	mov	r2, r6
 8106d8e:	4649      	mov	r1, r9
 8106d90:	4640      	mov	r0, r8
 8106d92:	47d0      	blx	sl
 8106d94:	3001      	adds	r0, #1
 8106d96:	d09d      	beq.n	8106cd4 <_printf_i+0x15c>
 8106d98:	3501      	adds	r5, #1
 8106d9a:	68e3      	ldr	r3, [r4, #12]
 8106d9c:	9903      	ldr	r1, [sp, #12]
 8106d9e:	1a5b      	subs	r3, r3, r1
 8106da0:	42ab      	cmp	r3, r5
 8106da2:	dcf2      	bgt.n	8106d8a <_printf_i+0x212>
 8106da4:	e7eb      	b.n	8106d7e <_printf_i+0x206>
 8106da6:	2500      	movs	r5, #0
 8106da8:	f104 0619 	add.w	r6, r4, #25
 8106dac:	e7f5      	b.n	8106d9a <_printf_i+0x222>
 8106dae:	bf00      	nop
 8106db0:	08109232 	.word	0x08109232
 8106db4:	08109243 	.word	0x08109243

08106db8 <std>:
 8106db8:	2300      	movs	r3, #0
 8106dba:	b510      	push	{r4, lr}
 8106dbc:	4604      	mov	r4, r0
 8106dbe:	e9c0 3300 	strd	r3, r3, [r0]
 8106dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8106dc6:	6083      	str	r3, [r0, #8]
 8106dc8:	8181      	strh	r1, [r0, #12]
 8106dca:	6643      	str	r3, [r0, #100]	@ 0x64
 8106dcc:	81c2      	strh	r2, [r0, #14]
 8106dce:	6183      	str	r3, [r0, #24]
 8106dd0:	4619      	mov	r1, r3
 8106dd2:	2208      	movs	r2, #8
 8106dd4:	305c      	adds	r0, #92	@ 0x5c
 8106dd6:	f000 f928 	bl	810702a <memset>
 8106dda:	4b0d      	ldr	r3, [pc, #52]	@ (8106e10 <std+0x58>)
 8106ddc:	6263      	str	r3, [r4, #36]	@ 0x24
 8106dde:	4b0d      	ldr	r3, [pc, #52]	@ (8106e14 <std+0x5c>)
 8106de0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8106de2:	4b0d      	ldr	r3, [pc, #52]	@ (8106e18 <std+0x60>)
 8106de4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8106de6:	4b0d      	ldr	r3, [pc, #52]	@ (8106e1c <std+0x64>)
 8106de8:	6323      	str	r3, [r4, #48]	@ 0x30
 8106dea:	4b0d      	ldr	r3, [pc, #52]	@ (8106e20 <std+0x68>)
 8106dec:	6224      	str	r4, [r4, #32]
 8106dee:	429c      	cmp	r4, r3
 8106df0:	d006      	beq.n	8106e00 <std+0x48>
 8106df2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8106df6:	4294      	cmp	r4, r2
 8106df8:	d002      	beq.n	8106e00 <std+0x48>
 8106dfa:	33d0      	adds	r3, #208	@ 0xd0
 8106dfc:	429c      	cmp	r4, r3
 8106dfe:	d105      	bne.n	8106e0c <std+0x54>
 8106e00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8106e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8106e08:	f000 b98c 	b.w	8107124 <__retarget_lock_init_recursive>
 8106e0c:	bd10      	pop	{r4, pc}
 8106e0e:	bf00      	nop
 8106e10:	08106fa5 	.word	0x08106fa5
 8106e14:	08106fc7 	.word	0x08106fc7
 8106e18:	08106fff 	.word	0x08106fff
 8106e1c:	08107023 	.word	0x08107023
 8106e20:	100007b8 	.word	0x100007b8

08106e24 <stdio_exit_handler>:
 8106e24:	4a02      	ldr	r2, [pc, #8]	@ (8106e30 <stdio_exit_handler+0xc>)
 8106e26:	4903      	ldr	r1, [pc, #12]	@ (8106e34 <stdio_exit_handler+0x10>)
 8106e28:	4803      	ldr	r0, [pc, #12]	@ (8106e38 <stdio_exit_handler+0x14>)
 8106e2a:	f000 b869 	b.w	8106f00 <_fwalk_sglue>
 8106e2e:	bf00      	nop
 8106e30:	10000014 	.word	0x10000014
 8106e34:	08108a85 	.word	0x08108a85
 8106e38:	10000024 	.word	0x10000024

08106e3c <cleanup_stdio>:
 8106e3c:	6841      	ldr	r1, [r0, #4]
 8106e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8106e70 <cleanup_stdio+0x34>)
 8106e40:	4299      	cmp	r1, r3
 8106e42:	b510      	push	{r4, lr}
 8106e44:	4604      	mov	r4, r0
 8106e46:	d001      	beq.n	8106e4c <cleanup_stdio+0x10>
 8106e48:	f001 fe1c 	bl	8108a84 <_fflush_r>
 8106e4c:	68a1      	ldr	r1, [r4, #8]
 8106e4e:	4b09      	ldr	r3, [pc, #36]	@ (8106e74 <cleanup_stdio+0x38>)
 8106e50:	4299      	cmp	r1, r3
 8106e52:	d002      	beq.n	8106e5a <cleanup_stdio+0x1e>
 8106e54:	4620      	mov	r0, r4
 8106e56:	f001 fe15 	bl	8108a84 <_fflush_r>
 8106e5a:	68e1      	ldr	r1, [r4, #12]
 8106e5c:	4b06      	ldr	r3, [pc, #24]	@ (8106e78 <cleanup_stdio+0x3c>)
 8106e5e:	4299      	cmp	r1, r3
 8106e60:	d004      	beq.n	8106e6c <cleanup_stdio+0x30>
 8106e62:	4620      	mov	r0, r4
 8106e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8106e68:	f001 be0c 	b.w	8108a84 <_fflush_r>
 8106e6c:	bd10      	pop	{r4, pc}
 8106e6e:	bf00      	nop
 8106e70:	100007b8 	.word	0x100007b8
 8106e74:	10000820 	.word	0x10000820
 8106e78:	10000888 	.word	0x10000888

08106e7c <global_stdio_init.part.0>:
 8106e7c:	b510      	push	{r4, lr}
 8106e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8106eac <global_stdio_init.part.0+0x30>)
 8106e80:	4c0b      	ldr	r4, [pc, #44]	@ (8106eb0 <global_stdio_init.part.0+0x34>)
 8106e82:	4a0c      	ldr	r2, [pc, #48]	@ (8106eb4 <global_stdio_init.part.0+0x38>)
 8106e84:	601a      	str	r2, [r3, #0]
 8106e86:	4620      	mov	r0, r4
 8106e88:	2200      	movs	r2, #0
 8106e8a:	2104      	movs	r1, #4
 8106e8c:	f7ff ff94 	bl	8106db8 <std>
 8106e90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8106e94:	2201      	movs	r2, #1
 8106e96:	2109      	movs	r1, #9
 8106e98:	f7ff ff8e 	bl	8106db8 <std>
 8106e9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8106ea0:	2202      	movs	r2, #2
 8106ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8106ea6:	2112      	movs	r1, #18
 8106ea8:	f7ff bf86 	b.w	8106db8 <std>
 8106eac:	100008f0 	.word	0x100008f0
 8106eb0:	100007b8 	.word	0x100007b8
 8106eb4:	08106e25 	.word	0x08106e25

08106eb8 <__sfp_lock_acquire>:
 8106eb8:	4801      	ldr	r0, [pc, #4]	@ (8106ec0 <__sfp_lock_acquire+0x8>)
 8106eba:	f000 b934 	b.w	8107126 <__retarget_lock_acquire_recursive>
 8106ebe:	bf00      	nop
 8106ec0:	100008f9 	.word	0x100008f9

08106ec4 <__sfp_lock_release>:
 8106ec4:	4801      	ldr	r0, [pc, #4]	@ (8106ecc <__sfp_lock_release+0x8>)
 8106ec6:	f000 b92f 	b.w	8107128 <__retarget_lock_release_recursive>
 8106eca:	bf00      	nop
 8106ecc:	100008f9 	.word	0x100008f9

08106ed0 <__sinit>:
 8106ed0:	b510      	push	{r4, lr}
 8106ed2:	4604      	mov	r4, r0
 8106ed4:	f7ff fff0 	bl	8106eb8 <__sfp_lock_acquire>
 8106ed8:	6a23      	ldr	r3, [r4, #32]
 8106eda:	b11b      	cbz	r3, 8106ee4 <__sinit+0x14>
 8106edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8106ee0:	f7ff bff0 	b.w	8106ec4 <__sfp_lock_release>
 8106ee4:	4b04      	ldr	r3, [pc, #16]	@ (8106ef8 <__sinit+0x28>)
 8106ee6:	6223      	str	r3, [r4, #32]
 8106ee8:	4b04      	ldr	r3, [pc, #16]	@ (8106efc <__sinit+0x2c>)
 8106eea:	681b      	ldr	r3, [r3, #0]
 8106eec:	2b00      	cmp	r3, #0
 8106eee:	d1f5      	bne.n	8106edc <__sinit+0xc>
 8106ef0:	f7ff ffc4 	bl	8106e7c <global_stdio_init.part.0>
 8106ef4:	e7f2      	b.n	8106edc <__sinit+0xc>
 8106ef6:	bf00      	nop
 8106ef8:	08106e3d 	.word	0x08106e3d
 8106efc:	100008f0 	.word	0x100008f0

08106f00 <_fwalk_sglue>:
 8106f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106f04:	4607      	mov	r7, r0
 8106f06:	4688      	mov	r8, r1
 8106f08:	4614      	mov	r4, r2
 8106f0a:	2600      	movs	r6, #0
 8106f0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8106f10:	f1b9 0901 	subs.w	r9, r9, #1
 8106f14:	d505      	bpl.n	8106f22 <_fwalk_sglue+0x22>
 8106f16:	6824      	ldr	r4, [r4, #0]
 8106f18:	2c00      	cmp	r4, #0
 8106f1a:	d1f7      	bne.n	8106f0c <_fwalk_sglue+0xc>
 8106f1c:	4630      	mov	r0, r6
 8106f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8106f22:	89ab      	ldrh	r3, [r5, #12]
 8106f24:	2b01      	cmp	r3, #1
 8106f26:	d907      	bls.n	8106f38 <_fwalk_sglue+0x38>
 8106f28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8106f2c:	3301      	adds	r3, #1
 8106f2e:	d003      	beq.n	8106f38 <_fwalk_sglue+0x38>
 8106f30:	4629      	mov	r1, r5
 8106f32:	4638      	mov	r0, r7
 8106f34:	47c0      	blx	r8
 8106f36:	4306      	orrs	r6, r0
 8106f38:	3568      	adds	r5, #104	@ 0x68
 8106f3a:	e7e9      	b.n	8106f10 <_fwalk_sglue+0x10>

08106f3c <sniprintf>:
 8106f3c:	b40c      	push	{r2, r3}
 8106f3e:	b530      	push	{r4, r5, lr}
 8106f40:	4b17      	ldr	r3, [pc, #92]	@ (8106fa0 <sniprintf+0x64>)
 8106f42:	1e0c      	subs	r4, r1, #0
 8106f44:	681d      	ldr	r5, [r3, #0]
 8106f46:	b09d      	sub	sp, #116	@ 0x74
 8106f48:	da08      	bge.n	8106f5c <sniprintf+0x20>
 8106f4a:	238b      	movs	r3, #139	@ 0x8b
 8106f4c:	602b      	str	r3, [r5, #0]
 8106f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8106f52:	b01d      	add	sp, #116	@ 0x74
 8106f54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8106f58:	b002      	add	sp, #8
 8106f5a:	4770      	bx	lr
 8106f5c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8106f60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8106f64:	bf14      	ite	ne
 8106f66:	f104 33ff 	addne.w	r3, r4, #4294967295
 8106f6a:	4623      	moveq	r3, r4
 8106f6c:	9304      	str	r3, [sp, #16]
 8106f6e:	9307      	str	r3, [sp, #28]
 8106f70:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8106f74:	9002      	str	r0, [sp, #8]
 8106f76:	9006      	str	r0, [sp, #24]
 8106f78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8106f7c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8106f7e:	ab21      	add	r3, sp, #132	@ 0x84
 8106f80:	a902      	add	r1, sp, #8
 8106f82:	4628      	mov	r0, r5
 8106f84:	9301      	str	r3, [sp, #4]
 8106f86:	f001 fbfd 	bl	8108784 <_svfiprintf_r>
 8106f8a:	1c43      	adds	r3, r0, #1
 8106f8c:	bfbc      	itt	lt
 8106f8e:	238b      	movlt	r3, #139	@ 0x8b
 8106f90:	602b      	strlt	r3, [r5, #0]
 8106f92:	2c00      	cmp	r4, #0
 8106f94:	d0dd      	beq.n	8106f52 <sniprintf+0x16>
 8106f96:	9b02      	ldr	r3, [sp, #8]
 8106f98:	2200      	movs	r2, #0
 8106f9a:	701a      	strb	r2, [r3, #0]
 8106f9c:	e7d9      	b.n	8106f52 <sniprintf+0x16>
 8106f9e:	bf00      	nop
 8106fa0:	10000020 	.word	0x10000020

08106fa4 <__sread>:
 8106fa4:	b510      	push	{r4, lr}
 8106fa6:	460c      	mov	r4, r1
 8106fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106fac:	f000 f86c 	bl	8107088 <_read_r>
 8106fb0:	2800      	cmp	r0, #0
 8106fb2:	bfab      	itete	ge
 8106fb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8106fb6:	89a3      	ldrhlt	r3, [r4, #12]
 8106fb8:	181b      	addge	r3, r3, r0
 8106fba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8106fbe:	bfac      	ite	ge
 8106fc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8106fc2:	81a3      	strhlt	r3, [r4, #12]
 8106fc4:	bd10      	pop	{r4, pc}

08106fc6 <__swrite>:
 8106fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8106fca:	461f      	mov	r7, r3
 8106fcc:	898b      	ldrh	r3, [r1, #12]
 8106fce:	05db      	lsls	r3, r3, #23
 8106fd0:	4605      	mov	r5, r0
 8106fd2:	460c      	mov	r4, r1
 8106fd4:	4616      	mov	r6, r2
 8106fd6:	d505      	bpl.n	8106fe4 <__swrite+0x1e>
 8106fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8106fdc:	2302      	movs	r3, #2
 8106fde:	2200      	movs	r2, #0
 8106fe0:	f000 f840 	bl	8107064 <_lseek_r>
 8106fe4:	89a3      	ldrh	r3, [r4, #12]
 8106fe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8106fea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8106fee:	81a3      	strh	r3, [r4, #12]
 8106ff0:	4632      	mov	r2, r6
 8106ff2:	463b      	mov	r3, r7
 8106ff4:	4628      	mov	r0, r5
 8106ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8106ffa:	f000 b857 	b.w	81070ac <_write_r>

08106ffe <__sseek>:
 8106ffe:	b510      	push	{r4, lr}
 8107000:	460c      	mov	r4, r1
 8107002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107006:	f000 f82d 	bl	8107064 <_lseek_r>
 810700a:	1c43      	adds	r3, r0, #1
 810700c:	89a3      	ldrh	r3, [r4, #12]
 810700e:	bf15      	itete	ne
 8107010:	6560      	strne	r0, [r4, #84]	@ 0x54
 8107012:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8107016:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 810701a:	81a3      	strheq	r3, [r4, #12]
 810701c:	bf18      	it	ne
 810701e:	81a3      	strhne	r3, [r4, #12]
 8107020:	bd10      	pop	{r4, pc}

08107022 <__sclose>:
 8107022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107026:	f000 b80d 	b.w	8107044 <_close_r>

0810702a <memset>:
 810702a:	4402      	add	r2, r0
 810702c:	4603      	mov	r3, r0
 810702e:	4293      	cmp	r3, r2
 8107030:	d100      	bne.n	8107034 <memset+0xa>
 8107032:	4770      	bx	lr
 8107034:	f803 1b01 	strb.w	r1, [r3], #1
 8107038:	e7f9      	b.n	810702e <memset+0x4>
	...

0810703c <_localeconv_r>:
 810703c:	4800      	ldr	r0, [pc, #0]	@ (8107040 <_localeconv_r+0x4>)
 810703e:	4770      	bx	lr
 8107040:	10000160 	.word	0x10000160

08107044 <_close_r>:
 8107044:	b538      	push	{r3, r4, r5, lr}
 8107046:	4d06      	ldr	r5, [pc, #24]	@ (8107060 <_close_r+0x1c>)
 8107048:	2300      	movs	r3, #0
 810704a:	4604      	mov	r4, r0
 810704c:	4608      	mov	r0, r1
 810704e:	602b      	str	r3, [r5, #0]
 8107050:	f7fa fcc5 	bl	81019de <_close>
 8107054:	1c43      	adds	r3, r0, #1
 8107056:	d102      	bne.n	810705e <_close_r+0x1a>
 8107058:	682b      	ldr	r3, [r5, #0]
 810705a:	b103      	cbz	r3, 810705e <_close_r+0x1a>
 810705c:	6023      	str	r3, [r4, #0]
 810705e:	bd38      	pop	{r3, r4, r5, pc}
 8107060:	100008f4 	.word	0x100008f4

08107064 <_lseek_r>:
 8107064:	b538      	push	{r3, r4, r5, lr}
 8107066:	4d07      	ldr	r5, [pc, #28]	@ (8107084 <_lseek_r+0x20>)
 8107068:	4604      	mov	r4, r0
 810706a:	4608      	mov	r0, r1
 810706c:	4611      	mov	r1, r2
 810706e:	2200      	movs	r2, #0
 8107070:	602a      	str	r2, [r5, #0]
 8107072:	461a      	mov	r2, r3
 8107074:	f7fa fcda 	bl	8101a2c <_lseek>
 8107078:	1c43      	adds	r3, r0, #1
 810707a:	d102      	bne.n	8107082 <_lseek_r+0x1e>
 810707c:	682b      	ldr	r3, [r5, #0]
 810707e:	b103      	cbz	r3, 8107082 <_lseek_r+0x1e>
 8107080:	6023      	str	r3, [r4, #0]
 8107082:	bd38      	pop	{r3, r4, r5, pc}
 8107084:	100008f4 	.word	0x100008f4

08107088 <_read_r>:
 8107088:	b538      	push	{r3, r4, r5, lr}
 810708a:	4d07      	ldr	r5, [pc, #28]	@ (81070a8 <_read_r+0x20>)
 810708c:	4604      	mov	r4, r0
 810708e:	4608      	mov	r0, r1
 8107090:	4611      	mov	r1, r2
 8107092:	2200      	movs	r2, #0
 8107094:	602a      	str	r2, [r5, #0]
 8107096:	461a      	mov	r2, r3
 8107098:	f7fa fc68 	bl	810196c <_read>
 810709c:	1c43      	adds	r3, r0, #1
 810709e:	d102      	bne.n	81070a6 <_read_r+0x1e>
 81070a0:	682b      	ldr	r3, [r5, #0]
 81070a2:	b103      	cbz	r3, 81070a6 <_read_r+0x1e>
 81070a4:	6023      	str	r3, [r4, #0]
 81070a6:	bd38      	pop	{r3, r4, r5, pc}
 81070a8:	100008f4 	.word	0x100008f4

081070ac <_write_r>:
 81070ac:	b538      	push	{r3, r4, r5, lr}
 81070ae:	4d07      	ldr	r5, [pc, #28]	@ (81070cc <_write_r+0x20>)
 81070b0:	4604      	mov	r4, r0
 81070b2:	4608      	mov	r0, r1
 81070b4:	4611      	mov	r1, r2
 81070b6:	2200      	movs	r2, #0
 81070b8:	602a      	str	r2, [r5, #0]
 81070ba:	461a      	mov	r2, r3
 81070bc:	f7fa fc73 	bl	81019a6 <_write>
 81070c0:	1c43      	adds	r3, r0, #1
 81070c2:	d102      	bne.n	81070ca <_write_r+0x1e>
 81070c4:	682b      	ldr	r3, [r5, #0]
 81070c6:	b103      	cbz	r3, 81070ca <_write_r+0x1e>
 81070c8:	6023      	str	r3, [r4, #0]
 81070ca:	bd38      	pop	{r3, r4, r5, pc}
 81070cc:	100008f4 	.word	0x100008f4

081070d0 <__errno>:
 81070d0:	4b01      	ldr	r3, [pc, #4]	@ (81070d8 <__errno+0x8>)
 81070d2:	6818      	ldr	r0, [r3, #0]
 81070d4:	4770      	bx	lr
 81070d6:	bf00      	nop
 81070d8:	10000020 	.word	0x10000020

081070dc <__libc_init_array>:
 81070dc:	b570      	push	{r4, r5, r6, lr}
 81070de:	4d0d      	ldr	r5, [pc, #52]	@ (8107114 <__libc_init_array+0x38>)
 81070e0:	4c0d      	ldr	r4, [pc, #52]	@ (8107118 <__libc_init_array+0x3c>)
 81070e2:	1b64      	subs	r4, r4, r5
 81070e4:	10a4      	asrs	r4, r4, #2
 81070e6:	2600      	movs	r6, #0
 81070e8:	42a6      	cmp	r6, r4
 81070ea:	d109      	bne.n	8107100 <__libc_init_array+0x24>
 81070ec:	4d0b      	ldr	r5, [pc, #44]	@ (810711c <__libc_init_array+0x40>)
 81070ee:	4c0c      	ldr	r4, [pc, #48]	@ (8107120 <__libc_init_array+0x44>)
 81070f0:	f002 f866 	bl	81091c0 <_init>
 81070f4:	1b64      	subs	r4, r4, r5
 81070f6:	10a4      	asrs	r4, r4, #2
 81070f8:	2600      	movs	r6, #0
 81070fa:	42a6      	cmp	r6, r4
 81070fc:	d105      	bne.n	810710a <__libc_init_array+0x2e>
 81070fe:	bd70      	pop	{r4, r5, r6, pc}
 8107100:	f855 3b04 	ldr.w	r3, [r5], #4
 8107104:	4798      	blx	r3
 8107106:	3601      	adds	r6, #1
 8107108:	e7ee      	b.n	81070e8 <__libc_init_array+0xc>
 810710a:	f855 3b04 	ldr.w	r3, [r5], #4
 810710e:	4798      	blx	r3
 8107110:	3601      	adds	r6, #1
 8107112:	e7f2      	b.n	81070fa <__libc_init_array+0x1e>
 8107114:	08109598 	.word	0x08109598
 8107118:	08109598 	.word	0x08109598
 810711c:	08109598 	.word	0x08109598
 8107120:	0810959c 	.word	0x0810959c

08107124 <__retarget_lock_init_recursive>:
 8107124:	4770      	bx	lr

08107126 <__retarget_lock_acquire_recursive>:
 8107126:	4770      	bx	lr

08107128 <__retarget_lock_release_recursive>:
 8107128:	4770      	bx	lr

0810712a <quorem>:
 810712a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810712e:	6903      	ldr	r3, [r0, #16]
 8107130:	690c      	ldr	r4, [r1, #16]
 8107132:	42a3      	cmp	r3, r4
 8107134:	4607      	mov	r7, r0
 8107136:	db7e      	blt.n	8107236 <quorem+0x10c>
 8107138:	3c01      	subs	r4, #1
 810713a:	f101 0814 	add.w	r8, r1, #20
 810713e:	00a3      	lsls	r3, r4, #2
 8107140:	f100 0514 	add.w	r5, r0, #20
 8107144:	9300      	str	r3, [sp, #0]
 8107146:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810714a:	9301      	str	r3, [sp, #4]
 810714c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8107150:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8107154:	3301      	adds	r3, #1
 8107156:	429a      	cmp	r2, r3
 8107158:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810715c:	fbb2 f6f3 	udiv	r6, r2, r3
 8107160:	d32e      	bcc.n	81071c0 <quorem+0x96>
 8107162:	f04f 0a00 	mov.w	sl, #0
 8107166:	46c4      	mov	ip, r8
 8107168:	46ae      	mov	lr, r5
 810716a:	46d3      	mov	fp, sl
 810716c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8107170:	b298      	uxth	r0, r3
 8107172:	fb06 a000 	mla	r0, r6, r0, sl
 8107176:	0c02      	lsrs	r2, r0, #16
 8107178:	0c1b      	lsrs	r3, r3, #16
 810717a:	fb06 2303 	mla	r3, r6, r3, r2
 810717e:	f8de 2000 	ldr.w	r2, [lr]
 8107182:	b280      	uxth	r0, r0
 8107184:	b292      	uxth	r2, r2
 8107186:	1a12      	subs	r2, r2, r0
 8107188:	445a      	add	r2, fp
 810718a:	f8de 0000 	ldr.w	r0, [lr]
 810718e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8107192:	b29b      	uxth	r3, r3
 8107194:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8107198:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 810719c:	b292      	uxth	r2, r2
 810719e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 81071a2:	45e1      	cmp	r9, ip
 81071a4:	f84e 2b04 	str.w	r2, [lr], #4
 81071a8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 81071ac:	d2de      	bcs.n	810716c <quorem+0x42>
 81071ae:	9b00      	ldr	r3, [sp, #0]
 81071b0:	58eb      	ldr	r3, [r5, r3]
 81071b2:	b92b      	cbnz	r3, 81071c0 <quorem+0x96>
 81071b4:	9b01      	ldr	r3, [sp, #4]
 81071b6:	3b04      	subs	r3, #4
 81071b8:	429d      	cmp	r5, r3
 81071ba:	461a      	mov	r2, r3
 81071bc:	d32f      	bcc.n	810721e <quorem+0xf4>
 81071be:	613c      	str	r4, [r7, #16]
 81071c0:	4638      	mov	r0, r7
 81071c2:	f001 f97b 	bl	81084bc <__mcmp>
 81071c6:	2800      	cmp	r0, #0
 81071c8:	db25      	blt.n	8107216 <quorem+0xec>
 81071ca:	4629      	mov	r1, r5
 81071cc:	2000      	movs	r0, #0
 81071ce:	f858 2b04 	ldr.w	r2, [r8], #4
 81071d2:	f8d1 c000 	ldr.w	ip, [r1]
 81071d6:	fa1f fe82 	uxth.w	lr, r2
 81071da:	fa1f f38c 	uxth.w	r3, ip
 81071de:	eba3 030e 	sub.w	r3, r3, lr
 81071e2:	4403      	add	r3, r0
 81071e4:	0c12      	lsrs	r2, r2, #16
 81071e6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 81071ea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 81071ee:	b29b      	uxth	r3, r3
 81071f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81071f4:	45c1      	cmp	r9, r8
 81071f6:	f841 3b04 	str.w	r3, [r1], #4
 81071fa:	ea4f 4022 	mov.w	r0, r2, asr #16
 81071fe:	d2e6      	bcs.n	81071ce <quorem+0xa4>
 8107200:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8107204:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8107208:	b922      	cbnz	r2, 8107214 <quorem+0xea>
 810720a:	3b04      	subs	r3, #4
 810720c:	429d      	cmp	r5, r3
 810720e:	461a      	mov	r2, r3
 8107210:	d30b      	bcc.n	810722a <quorem+0x100>
 8107212:	613c      	str	r4, [r7, #16]
 8107214:	3601      	adds	r6, #1
 8107216:	4630      	mov	r0, r6
 8107218:	b003      	add	sp, #12
 810721a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810721e:	6812      	ldr	r2, [r2, #0]
 8107220:	3b04      	subs	r3, #4
 8107222:	2a00      	cmp	r2, #0
 8107224:	d1cb      	bne.n	81071be <quorem+0x94>
 8107226:	3c01      	subs	r4, #1
 8107228:	e7c6      	b.n	81071b8 <quorem+0x8e>
 810722a:	6812      	ldr	r2, [r2, #0]
 810722c:	3b04      	subs	r3, #4
 810722e:	2a00      	cmp	r2, #0
 8107230:	d1ef      	bne.n	8107212 <quorem+0xe8>
 8107232:	3c01      	subs	r4, #1
 8107234:	e7ea      	b.n	810720c <quorem+0xe2>
 8107236:	2000      	movs	r0, #0
 8107238:	e7ee      	b.n	8107218 <quorem+0xee>
 810723a:	0000      	movs	r0, r0
 810723c:	0000      	movs	r0, r0
	...

08107240 <_dtoa_r>:
 8107240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107244:	69c7      	ldr	r7, [r0, #28]
 8107246:	b099      	sub	sp, #100	@ 0x64
 8107248:	ed8d 0b02 	vstr	d0, [sp, #8]
 810724c:	ec55 4b10 	vmov	r4, r5, d0
 8107250:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8107252:	9109      	str	r1, [sp, #36]	@ 0x24
 8107254:	4683      	mov	fp, r0
 8107256:	920e      	str	r2, [sp, #56]	@ 0x38
 8107258:	9313      	str	r3, [sp, #76]	@ 0x4c
 810725a:	b97f      	cbnz	r7, 810727c <_dtoa_r+0x3c>
 810725c:	2010      	movs	r0, #16
 810725e:	f000 fdfd 	bl	8107e5c <malloc>
 8107262:	4602      	mov	r2, r0
 8107264:	f8cb 001c 	str.w	r0, [fp, #28]
 8107268:	b920      	cbnz	r0, 8107274 <_dtoa_r+0x34>
 810726a:	4ba7      	ldr	r3, [pc, #668]	@ (8107508 <_dtoa_r+0x2c8>)
 810726c:	21ef      	movs	r1, #239	@ 0xef
 810726e:	48a7      	ldr	r0, [pc, #668]	@ (810750c <_dtoa_r+0x2cc>)
 8107270:	f001 fc68 	bl	8108b44 <__assert_func>
 8107274:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8107278:	6007      	str	r7, [r0, #0]
 810727a:	60c7      	str	r7, [r0, #12]
 810727c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8107280:	6819      	ldr	r1, [r3, #0]
 8107282:	b159      	cbz	r1, 810729c <_dtoa_r+0x5c>
 8107284:	685a      	ldr	r2, [r3, #4]
 8107286:	604a      	str	r2, [r1, #4]
 8107288:	2301      	movs	r3, #1
 810728a:	4093      	lsls	r3, r2
 810728c:	608b      	str	r3, [r1, #8]
 810728e:	4658      	mov	r0, fp
 8107290:	f000 feda 	bl	8108048 <_Bfree>
 8107294:	f8db 301c 	ldr.w	r3, [fp, #28]
 8107298:	2200      	movs	r2, #0
 810729a:	601a      	str	r2, [r3, #0]
 810729c:	1e2b      	subs	r3, r5, #0
 810729e:	bfb9      	ittee	lt
 81072a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 81072a4:	9303      	strlt	r3, [sp, #12]
 81072a6:	2300      	movge	r3, #0
 81072a8:	6033      	strge	r3, [r6, #0]
 81072aa:	9f03      	ldr	r7, [sp, #12]
 81072ac:	4b98      	ldr	r3, [pc, #608]	@ (8107510 <_dtoa_r+0x2d0>)
 81072ae:	bfbc      	itt	lt
 81072b0:	2201      	movlt	r2, #1
 81072b2:	6032      	strlt	r2, [r6, #0]
 81072b4:	43bb      	bics	r3, r7
 81072b6:	d112      	bne.n	81072de <_dtoa_r+0x9e>
 81072b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 81072ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 81072be:	6013      	str	r3, [r2, #0]
 81072c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 81072c4:	4323      	orrs	r3, r4
 81072c6:	f000 854d 	beq.w	8107d64 <_dtoa_r+0xb24>
 81072ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 81072cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8107524 <_dtoa_r+0x2e4>
 81072d0:	2b00      	cmp	r3, #0
 81072d2:	f000 854f 	beq.w	8107d74 <_dtoa_r+0xb34>
 81072d6:	f10a 0303 	add.w	r3, sl, #3
 81072da:	f000 bd49 	b.w	8107d70 <_dtoa_r+0xb30>
 81072de:	ed9d 7b02 	vldr	d7, [sp, #8]
 81072e2:	2200      	movs	r2, #0
 81072e4:	ec51 0b17 	vmov	r0, r1, d7
 81072e8:	2300      	movs	r3, #0
 81072ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 81072ee:	f7f9 fc73 	bl	8100bd8 <__aeabi_dcmpeq>
 81072f2:	4680      	mov	r8, r0
 81072f4:	b158      	cbz	r0, 810730e <_dtoa_r+0xce>
 81072f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 81072f8:	2301      	movs	r3, #1
 81072fa:	6013      	str	r3, [r2, #0]
 81072fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 81072fe:	b113      	cbz	r3, 8107306 <_dtoa_r+0xc6>
 8107300:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8107302:	4b84      	ldr	r3, [pc, #528]	@ (8107514 <_dtoa_r+0x2d4>)
 8107304:	6013      	str	r3, [r2, #0]
 8107306:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8107528 <_dtoa_r+0x2e8>
 810730a:	f000 bd33 	b.w	8107d74 <_dtoa_r+0xb34>
 810730e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8107312:	aa16      	add	r2, sp, #88	@ 0x58
 8107314:	a917      	add	r1, sp, #92	@ 0x5c
 8107316:	4658      	mov	r0, fp
 8107318:	f001 f980 	bl	810861c <__d2b>
 810731c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8107320:	4681      	mov	r9, r0
 8107322:	2e00      	cmp	r6, #0
 8107324:	d077      	beq.n	8107416 <_dtoa_r+0x1d6>
 8107326:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8107328:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 810732c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8107330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8107334:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8107338:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 810733c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8107340:	4619      	mov	r1, r3
 8107342:	2200      	movs	r2, #0
 8107344:	4b74      	ldr	r3, [pc, #464]	@ (8107518 <_dtoa_r+0x2d8>)
 8107346:	f7f9 f827 	bl	8100398 <__aeabi_dsub>
 810734a:	a369      	add	r3, pc, #420	@ (adr r3, 81074f0 <_dtoa_r+0x2b0>)
 810734c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107350:	f7f9 f9da 	bl	8100708 <__aeabi_dmul>
 8107354:	a368      	add	r3, pc, #416	@ (adr r3, 81074f8 <_dtoa_r+0x2b8>)
 8107356:	e9d3 2300 	ldrd	r2, r3, [r3]
 810735a:	f7f9 f81f 	bl	810039c <__adddf3>
 810735e:	4604      	mov	r4, r0
 8107360:	4630      	mov	r0, r6
 8107362:	460d      	mov	r5, r1
 8107364:	f7f9 f966 	bl	8100634 <__aeabi_i2d>
 8107368:	a365      	add	r3, pc, #404	@ (adr r3, 8107500 <_dtoa_r+0x2c0>)
 810736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810736e:	f7f9 f9cb 	bl	8100708 <__aeabi_dmul>
 8107372:	4602      	mov	r2, r0
 8107374:	460b      	mov	r3, r1
 8107376:	4620      	mov	r0, r4
 8107378:	4629      	mov	r1, r5
 810737a:	f7f9 f80f 	bl	810039c <__adddf3>
 810737e:	4604      	mov	r4, r0
 8107380:	460d      	mov	r5, r1
 8107382:	f7f9 fc71 	bl	8100c68 <__aeabi_d2iz>
 8107386:	2200      	movs	r2, #0
 8107388:	4607      	mov	r7, r0
 810738a:	2300      	movs	r3, #0
 810738c:	4620      	mov	r0, r4
 810738e:	4629      	mov	r1, r5
 8107390:	f7f9 fc2c 	bl	8100bec <__aeabi_dcmplt>
 8107394:	b140      	cbz	r0, 81073a8 <_dtoa_r+0x168>
 8107396:	4638      	mov	r0, r7
 8107398:	f7f9 f94c 	bl	8100634 <__aeabi_i2d>
 810739c:	4622      	mov	r2, r4
 810739e:	462b      	mov	r3, r5
 81073a0:	f7f9 fc1a 	bl	8100bd8 <__aeabi_dcmpeq>
 81073a4:	b900      	cbnz	r0, 81073a8 <_dtoa_r+0x168>
 81073a6:	3f01      	subs	r7, #1
 81073a8:	2f16      	cmp	r7, #22
 81073aa:	d851      	bhi.n	8107450 <_dtoa_r+0x210>
 81073ac:	4b5b      	ldr	r3, [pc, #364]	@ (810751c <_dtoa_r+0x2dc>)
 81073ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 81073b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81073b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 81073ba:	f7f9 fc17 	bl	8100bec <__aeabi_dcmplt>
 81073be:	2800      	cmp	r0, #0
 81073c0:	d048      	beq.n	8107454 <_dtoa_r+0x214>
 81073c2:	3f01      	subs	r7, #1
 81073c4:	2300      	movs	r3, #0
 81073c6:	9312      	str	r3, [sp, #72]	@ 0x48
 81073c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 81073ca:	1b9b      	subs	r3, r3, r6
 81073cc:	1e5a      	subs	r2, r3, #1
 81073ce:	bf44      	itt	mi
 81073d0:	f1c3 0801 	rsbmi	r8, r3, #1
 81073d4:	2300      	movmi	r3, #0
 81073d6:	9208      	str	r2, [sp, #32]
 81073d8:	bf54      	ite	pl
 81073da:	f04f 0800 	movpl.w	r8, #0
 81073de:	9308      	strmi	r3, [sp, #32]
 81073e0:	2f00      	cmp	r7, #0
 81073e2:	db39      	blt.n	8107458 <_dtoa_r+0x218>
 81073e4:	9b08      	ldr	r3, [sp, #32]
 81073e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 81073e8:	443b      	add	r3, r7
 81073ea:	9308      	str	r3, [sp, #32]
 81073ec:	2300      	movs	r3, #0
 81073ee:	930a      	str	r3, [sp, #40]	@ 0x28
 81073f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81073f2:	2b09      	cmp	r3, #9
 81073f4:	d864      	bhi.n	81074c0 <_dtoa_r+0x280>
 81073f6:	2b05      	cmp	r3, #5
 81073f8:	bfc4      	itt	gt
 81073fa:	3b04      	subgt	r3, #4
 81073fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 81073fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8107400:	f1a3 0302 	sub.w	r3, r3, #2
 8107404:	bfcc      	ite	gt
 8107406:	2400      	movgt	r4, #0
 8107408:	2401      	movle	r4, #1
 810740a:	2b03      	cmp	r3, #3
 810740c:	d863      	bhi.n	81074d6 <_dtoa_r+0x296>
 810740e:	e8df f003 	tbb	[pc, r3]
 8107412:	372a      	.short	0x372a
 8107414:	5535      	.short	0x5535
 8107416:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 810741a:	441e      	add	r6, r3
 810741c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8107420:	2b20      	cmp	r3, #32
 8107422:	bfc1      	itttt	gt
 8107424:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8107428:	409f      	lslgt	r7, r3
 810742a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 810742e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8107432:	bfd6      	itet	le
 8107434:	f1c3 0320 	rsble	r3, r3, #32
 8107438:	ea47 0003 	orrgt.w	r0, r7, r3
 810743c:	fa04 f003 	lslle.w	r0, r4, r3
 8107440:	f7f9 f8e8 	bl	8100614 <__aeabi_ui2d>
 8107444:	2201      	movs	r2, #1
 8107446:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 810744a:	3e01      	subs	r6, #1
 810744c:	9214      	str	r2, [sp, #80]	@ 0x50
 810744e:	e777      	b.n	8107340 <_dtoa_r+0x100>
 8107450:	2301      	movs	r3, #1
 8107452:	e7b8      	b.n	81073c6 <_dtoa_r+0x186>
 8107454:	9012      	str	r0, [sp, #72]	@ 0x48
 8107456:	e7b7      	b.n	81073c8 <_dtoa_r+0x188>
 8107458:	427b      	negs	r3, r7
 810745a:	930a      	str	r3, [sp, #40]	@ 0x28
 810745c:	2300      	movs	r3, #0
 810745e:	eba8 0807 	sub.w	r8, r8, r7
 8107462:	930f      	str	r3, [sp, #60]	@ 0x3c
 8107464:	e7c4      	b.n	81073f0 <_dtoa_r+0x1b0>
 8107466:	2300      	movs	r3, #0
 8107468:	930b      	str	r3, [sp, #44]	@ 0x2c
 810746a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810746c:	2b00      	cmp	r3, #0
 810746e:	dc35      	bgt.n	81074dc <_dtoa_r+0x29c>
 8107470:	2301      	movs	r3, #1
 8107472:	9300      	str	r3, [sp, #0]
 8107474:	9307      	str	r3, [sp, #28]
 8107476:	461a      	mov	r2, r3
 8107478:	920e      	str	r2, [sp, #56]	@ 0x38
 810747a:	e00b      	b.n	8107494 <_dtoa_r+0x254>
 810747c:	2301      	movs	r3, #1
 810747e:	e7f3      	b.n	8107468 <_dtoa_r+0x228>
 8107480:	2300      	movs	r3, #0
 8107482:	930b      	str	r3, [sp, #44]	@ 0x2c
 8107484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8107486:	18fb      	adds	r3, r7, r3
 8107488:	9300      	str	r3, [sp, #0]
 810748a:	3301      	adds	r3, #1
 810748c:	2b01      	cmp	r3, #1
 810748e:	9307      	str	r3, [sp, #28]
 8107490:	bfb8      	it	lt
 8107492:	2301      	movlt	r3, #1
 8107494:	f8db 001c 	ldr.w	r0, [fp, #28]
 8107498:	2100      	movs	r1, #0
 810749a:	2204      	movs	r2, #4
 810749c:	f102 0514 	add.w	r5, r2, #20
 81074a0:	429d      	cmp	r5, r3
 81074a2:	d91f      	bls.n	81074e4 <_dtoa_r+0x2a4>
 81074a4:	6041      	str	r1, [r0, #4]
 81074a6:	4658      	mov	r0, fp
 81074a8:	f000 fd8e 	bl	8107fc8 <_Balloc>
 81074ac:	4682      	mov	sl, r0
 81074ae:	2800      	cmp	r0, #0
 81074b0:	d13c      	bne.n	810752c <_dtoa_r+0x2ec>
 81074b2:	4b1b      	ldr	r3, [pc, #108]	@ (8107520 <_dtoa_r+0x2e0>)
 81074b4:	4602      	mov	r2, r0
 81074b6:	f240 11af 	movw	r1, #431	@ 0x1af
 81074ba:	e6d8      	b.n	810726e <_dtoa_r+0x2e>
 81074bc:	2301      	movs	r3, #1
 81074be:	e7e0      	b.n	8107482 <_dtoa_r+0x242>
 81074c0:	2401      	movs	r4, #1
 81074c2:	2300      	movs	r3, #0
 81074c4:	9309      	str	r3, [sp, #36]	@ 0x24
 81074c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 81074c8:	f04f 33ff 	mov.w	r3, #4294967295
 81074cc:	9300      	str	r3, [sp, #0]
 81074ce:	9307      	str	r3, [sp, #28]
 81074d0:	2200      	movs	r2, #0
 81074d2:	2312      	movs	r3, #18
 81074d4:	e7d0      	b.n	8107478 <_dtoa_r+0x238>
 81074d6:	2301      	movs	r3, #1
 81074d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 81074da:	e7f5      	b.n	81074c8 <_dtoa_r+0x288>
 81074dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81074de:	9300      	str	r3, [sp, #0]
 81074e0:	9307      	str	r3, [sp, #28]
 81074e2:	e7d7      	b.n	8107494 <_dtoa_r+0x254>
 81074e4:	3101      	adds	r1, #1
 81074e6:	0052      	lsls	r2, r2, #1
 81074e8:	e7d8      	b.n	810749c <_dtoa_r+0x25c>
 81074ea:	bf00      	nop
 81074ec:	f3af 8000 	nop.w
 81074f0:	636f4361 	.word	0x636f4361
 81074f4:	3fd287a7 	.word	0x3fd287a7
 81074f8:	8b60c8b3 	.word	0x8b60c8b3
 81074fc:	3fc68a28 	.word	0x3fc68a28
 8107500:	509f79fb 	.word	0x509f79fb
 8107504:	3fd34413 	.word	0x3fd34413
 8107508:	08109261 	.word	0x08109261
 810750c:	08109278 	.word	0x08109278
 8107510:	7ff00000 	.word	0x7ff00000
 8107514:	08109231 	.word	0x08109231
 8107518:	3ff80000 	.word	0x3ff80000
 810751c:	08109370 	.word	0x08109370
 8107520:	081092d0 	.word	0x081092d0
 8107524:	0810925d 	.word	0x0810925d
 8107528:	08109230 	.word	0x08109230
 810752c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8107530:	6018      	str	r0, [r3, #0]
 8107532:	9b07      	ldr	r3, [sp, #28]
 8107534:	2b0e      	cmp	r3, #14
 8107536:	f200 80a4 	bhi.w	8107682 <_dtoa_r+0x442>
 810753a:	2c00      	cmp	r4, #0
 810753c:	f000 80a1 	beq.w	8107682 <_dtoa_r+0x442>
 8107540:	2f00      	cmp	r7, #0
 8107542:	dd33      	ble.n	81075ac <_dtoa_r+0x36c>
 8107544:	4bad      	ldr	r3, [pc, #692]	@ (81077fc <_dtoa_r+0x5bc>)
 8107546:	f007 020f 	and.w	r2, r7, #15
 810754a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810754e:	ed93 7b00 	vldr	d7, [r3]
 8107552:	05f8      	lsls	r0, r7, #23
 8107554:	ed8d 7b04 	vstr	d7, [sp, #16]
 8107558:	ea4f 1427 	mov.w	r4, r7, asr #4
 810755c:	d516      	bpl.n	810758c <_dtoa_r+0x34c>
 810755e:	4ba8      	ldr	r3, [pc, #672]	@ (8107800 <_dtoa_r+0x5c0>)
 8107560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8107564:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8107568:	f7f9 f9f8 	bl	810095c <__aeabi_ddiv>
 810756c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8107570:	f004 040f 	and.w	r4, r4, #15
 8107574:	2603      	movs	r6, #3
 8107576:	4da2      	ldr	r5, [pc, #648]	@ (8107800 <_dtoa_r+0x5c0>)
 8107578:	b954      	cbnz	r4, 8107590 <_dtoa_r+0x350>
 810757a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810757e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8107582:	f7f9 f9eb 	bl	810095c <__aeabi_ddiv>
 8107586:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810758a:	e028      	b.n	81075de <_dtoa_r+0x39e>
 810758c:	2602      	movs	r6, #2
 810758e:	e7f2      	b.n	8107576 <_dtoa_r+0x336>
 8107590:	07e1      	lsls	r1, r4, #31
 8107592:	d508      	bpl.n	81075a6 <_dtoa_r+0x366>
 8107594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8107598:	e9d5 2300 	ldrd	r2, r3, [r5]
 810759c:	f7f9 f8b4 	bl	8100708 <__aeabi_dmul>
 81075a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 81075a4:	3601      	adds	r6, #1
 81075a6:	1064      	asrs	r4, r4, #1
 81075a8:	3508      	adds	r5, #8
 81075aa:	e7e5      	b.n	8107578 <_dtoa_r+0x338>
 81075ac:	f000 80d2 	beq.w	8107754 <_dtoa_r+0x514>
 81075b0:	427c      	negs	r4, r7
 81075b2:	4b92      	ldr	r3, [pc, #584]	@ (81077fc <_dtoa_r+0x5bc>)
 81075b4:	4d92      	ldr	r5, [pc, #584]	@ (8107800 <_dtoa_r+0x5c0>)
 81075b6:	f004 020f 	and.w	r2, r4, #15
 81075ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81075be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81075c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 81075c6:	f7f9 f89f 	bl	8100708 <__aeabi_dmul>
 81075ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81075ce:	1124      	asrs	r4, r4, #4
 81075d0:	2300      	movs	r3, #0
 81075d2:	2602      	movs	r6, #2
 81075d4:	2c00      	cmp	r4, #0
 81075d6:	f040 80b2 	bne.w	810773e <_dtoa_r+0x4fe>
 81075da:	2b00      	cmp	r3, #0
 81075dc:	d1d3      	bne.n	8107586 <_dtoa_r+0x346>
 81075de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 81075e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 81075e4:	2b00      	cmp	r3, #0
 81075e6:	f000 80b7 	beq.w	8107758 <_dtoa_r+0x518>
 81075ea:	4b86      	ldr	r3, [pc, #536]	@ (8107804 <_dtoa_r+0x5c4>)
 81075ec:	2200      	movs	r2, #0
 81075ee:	4620      	mov	r0, r4
 81075f0:	4629      	mov	r1, r5
 81075f2:	f7f9 fafb 	bl	8100bec <__aeabi_dcmplt>
 81075f6:	2800      	cmp	r0, #0
 81075f8:	f000 80ae 	beq.w	8107758 <_dtoa_r+0x518>
 81075fc:	9b07      	ldr	r3, [sp, #28]
 81075fe:	2b00      	cmp	r3, #0
 8107600:	f000 80aa 	beq.w	8107758 <_dtoa_r+0x518>
 8107604:	9b00      	ldr	r3, [sp, #0]
 8107606:	2b00      	cmp	r3, #0
 8107608:	dd37      	ble.n	810767a <_dtoa_r+0x43a>
 810760a:	1e7b      	subs	r3, r7, #1
 810760c:	9304      	str	r3, [sp, #16]
 810760e:	4620      	mov	r0, r4
 8107610:	4b7d      	ldr	r3, [pc, #500]	@ (8107808 <_dtoa_r+0x5c8>)
 8107612:	2200      	movs	r2, #0
 8107614:	4629      	mov	r1, r5
 8107616:	f7f9 f877 	bl	8100708 <__aeabi_dmul>
 810761a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810761e:	9c00      	ldr	r4, [sp, #0]
 8107620:	3601      	adds	r6, #1
 8107622:	4630      	mov	r0, r6
 8107624:	f7f9 f806 	bl	8100634 <__aeabi_i2d>
 8107628:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810762c:	f7f9 f86c 	bl	8100708 <__aeabi_dmul>
 8107630:	4b76      	ldr	r3, [pc, #472]	@ (810780c <_dtoa_r+0x5cc>)
 8107632:	2200      	movs	r2, #0
 8107634:	f7f8 feb2 	bl	810039c <__adddf3>
 8107638:	4605      	mov	r5, r0
 810763a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 810763e:	2c00      	cmp	r4, #0
 8107640:	f040 808d 	bne.w	810775e <_dtoa_r+0x51e>
 8107644:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8107648:	4b71      	ldr	r3, [pc, #452]	@ (8107810 <_dtoa_r+0x5d0>)
 810764a:	2200      	movs	r2, #0
 810764c:	f7f8 fea4 	bl	8100398 <__aeabi_dsub>
 8107650:	4602      	mov	r2, r0
 8107652:	460b      	mov	r3, r1
 8107654:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8107658:	462a      	mov	r2, r5
 810765a:	4633      	mov	r3, r6
 810765c:	f7f9 fae4 	bl	8100c28 <__aeabi_dcmpgt>
 8107660:	2800      	cmp	r0, #0
 8107662:	f040 828b 	bne.w	8107b7c <_dtoa_r+0x93c>
 8107666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810766a:	462a      	mov	r2, r5
 810766c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8107670:	f7f9 fabc 	bl	8100bec <__aeabi_dcmplt>
 8107674:	2800      	cmp	r0, #0
 8107676:	f040 8128 	bne.w	81078ca <_dtoa_r+0x68a>
 810767a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 810767e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8107682:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8107684:	2b00      	cmp	r3, #0
 8107686:	f2c0 815a 	blt.w	810793e <_dtoa_r+0x6fe>
 810768a:	2f0e      	cmp	r7, #14
 810768c:	f300 8157 	bgt.w	810793e <_dtoa_r+0x6fe>
 8107690:	4b5a      	ldr	r3, [pc, #360]	@ (81077fc <_dtoa_r+0x5bc>)
 8107692:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8107696:	ed93 7b00 	vldr	d7, [r3]
 810769a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810769c:	2b00      	cmp	r3, #0
 810769e:	ed8d 7b00 	vstr	d7, [sp]
 81076a2:	da03      	bge.n	81076ac <_dtoa_r+0x46c>
 81076a4:	9b07      	ldr	r3, [sp, #28]
 81076a6:	2b00      	cmp	r3, #0
 81076a8:	f340 8101 	ble.w	81078ae <_dtoa_r+0x66e>
 81076ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 81076b0:	4656      	mov	r6, sl
 81076b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 81076b6:	4620      	mov	r0, r4
 81076b8:	4629      	mov	r1, r5
 81076ba:	f7f9 f94f 	bl	810095c <__aeabi_ddiv>
 81076be:	f7f9 fad3 	bl	8100c68 <__aeabi_d2iz>
 81076c2:	4680      	mov	r8, r0
 81076c4:	f7f8 ffb6 	bl	8100634 <__aeabi_i2d>
 81076c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 81076cc:	f7f9 f81c 	bl	8100708 <__aeabi_dmul>
 81076d0:	4602      	mov	r2, r0
 81076d2:	460b      	mov	r3, r1
 81076d4:	4620      	mov	r0, r4
 81076d6:	4629      	mov	r1, r5
 81076d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 81076dc:	f7f8 fe5c 	bl	8100398 <__aeabi_dsub>
 81076e0:	f806 4b01 	strb.w	r4, [r6], #1
 81076e4:	9d07      	ldr	r5, [sp, #28]
 81076e6:	eba6 040a 	sub.w	r4, r6, sl
 81076ea:	42a5      	cmp	r5, r4
 81076ec:	4602      	mov	r2, r0
 81076ee:	460b      	mov	r3, r1
 81076f0:	f040 8117 	bne.w	8107922 <_dtoa_r+0x6e2>
 81076f4:	f7f8 fe52 	bl	810039c <__adddf3>
 81076f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 81076fc:	4604      	mov	r4, r0
 81076fe:	460d      	mov	r5, r1
 8107700:	f7f9 fa92 	bl	8100c28 <__aeabi_dcmpgt>
 8107704:	2800      	cmp	r0, #0
 8107706:	f040 80f9 	bne.w	81078fc <_dtoa_r+0x6bc>
 810770a:	e9dd 2300 	ldrd	r2, r3, [sp]
 810770e:	4620      	mov	r0, r4
 8107710:	4629      	mov	r1, r5
 8107712:	f7f9 fa61 	bl	8100bd8 <__aeabi_dcmpeq>
 8107716:	b118      	cbz	r0, 8107720 <_dtoa_r+0x4e0>
 8107718:	f018 0f01 	tst.w	r8, #1
 810771c:	f040 80ee 	bne.w	81078fc <_dtoa_r+0x6bc>
 8107720:	4649      	mov	r1, r9
 8107722:	4658      	mov	r0, fp
 8107724:	f000 fc90 	bl	8108048 <_Bfree>
 8107728:	2300      	movs	r3, #0
 810772a:	7033      	strb	r3, [r6, #0]
 810772c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 810772e:	3701      	adds	r7, #1
 8107730:	601f      	str	r7, [r3, #0]
 8107732:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8107734:	2b00      	cmp	r3, #0
 8107736:	f000 831d 	beq.w	8107d74 <_dtoa_r+0xb34>
 810773a:	601e      	str	r6, [r3, #0]
 810773c:	e31a      	b.n	8107d74 <_dtoa_r+0xb34>
 810773e:	07e2      	lsls	r2, r4, #31
 8107740:	d505      	bpl.n	810774e <_dtoa_r+0x50e>
 8107742:	e9d5 2300 	ldrd	r2, r3, [r5]
 8107746:	f7f8 ffdf 	bl	8100708 <__aeabi_dmul>
 810774a:	3601      	adds	r6, #1
 810774c:	2301      	movs	r3, #1
 810774e:	1064      	asrs	r4, r4, #1
 8107750:	3508      	adds	r5, #8
 8107752:	e73f      	b.n	81075d4 <_dtoa_r+0x394>
 8107754:	2602      	movs	r6, #2
 8107756:	e742      	b.n	81075de <_dtoa_r+0x39e>
 8107758:	9c07      	ldr	r4, [sp, #28]
 810775a:	9704      	str	r7, [sp, #16]
 810775c:	e761      	b.n	8107622 <_dtoa_r+0x3e2>
 810775e:	4b27      	ldr	r3, [pc, #156]	@ (81077fc <_dtoa_r+0x5bc>)
 8107760:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8107762:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8107766:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810776a:	4454      	add	r4, sl
 810776c:	2900      	cmp	r1, #0
 810776e:	d053      	beq.n	8107818 <_dtoa_r+0x5d8>
 8107770:	4928      	ldr	r1, [pc, #160]	@ (8107814 <_dtoa_r+0x5d4>)
 8107772:	2000      	movs	r0, #0
 8107774:	f7f9 f8f2 	bl	810095c <__aeabi_ddiv>
 8107778:	4633      	mov	r3, r6
 810777a:	462a      	mov	r2, r5
 810777c:	f7f8 fe0c 	bl	8100398 <__aeabi_dsub>
 8107780:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8107784:	4656      	mov	r6, sl
 8107786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810778a:	f7f9 fa6d 	bl	8100c68 <__aeabi_d2iz>
 810778e:	4605      	mov	r5, r0
 8107790:	f7f8 ff50 	bl	8100634 <__aeabi_i2d>
 8107794:	4602      	mov	r2, r0
 8107796:	460b      	mov	r3, r1
 8107798:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810779c:	f7f8 fdfc 	bl	8100398 <__aeabi_dsub>
 81077a0:	3530      	adds	r5, #48	@ 0x30
 81077a2:	4602      	mov	r2, r0
 81077a4:	460b      	mov	r3, r1
 81077a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 81077aa:	f806 5b01 	strb.w	r5, [r6], #1
 81077ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 81077b2:	f7f9 fa1b 	bl	8100bec <__aeabi_dcmplt>
 81077b6:	2800      	cmp	r0, #0
 81077b8:	d171      	bne.n	810789e <_dtoa_r+0x65e>
 81077ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81077be:	4911      	ldr	r1, [pc, #68]	@ (8107804 <_dtoa_r+0x5c4>)
 81077c0:	2000      	movs	r0, #0
 81077c2:	f7f8 fde9 	bl	8100398 <__aeabi_dsub>
 81077c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 81077ca:	f7f9 fa0f 	bl	8100bec <__aeabi_dcmplt>
 81077ce:	2800      	cmp	r0, #0
 81077d0:	f040 8095 	bne.w	81078fe <_dtoa_r+0x6be>
 81077d4:	42a6      	cmp	r6, r4
 81077d6:	f43f af50 	beq.w	810767a <_dtoa_r+0x43a>
 81077da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 81077de:	4b0a      	ldr	r3, [pc, #40]	@ (8107808 <_dtoa_r+0x5c8>)
 81077e0:	2200      	movs	r2, #0
 81077e2:	f7f8 ff91 	bl	8100708 <__aeabi_dmul>
 81077e6:	4b08      	ldr	r3, [pc, #32]	@ (8107808 <_dtoa_r+0x5c8>)
 81077e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 81077ec:	2200      	movs	r2, #0
 81077ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81077f2:	f7f8 ff89 	bl	8100708 <__aeabi_dmul>
 81077f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81077fa:	e7c4      	b.n	8107786 <_dtoa_r+0x546>
 81077fc:	08109370 	.word	0x08109370
 8107800:	08109348 	.word	0x08109348
 8107804:	3ff00000 	.word	0x3ff00000
 8107808:	40240000 	.word	0x40240000
 810780c:	401c0000 	.word	0x401c0000
 8107810:	40140000 	.word	0x40140000
 8107814:	3fe00000 	.word	0x3fe00000
 8107818:	4631      	mov	r1, r6
 810781a:	4628      	mov	r0, r5
 810781c:	f7f8 ff74 	bl	8100708 <__aeabi_dmul>
 8107820:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8107824:	9415      	str	r4, [sp, #84]	@ 0x54
 8107826:	4656      	mov	r6, sl
 8107828:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810782c:	f7f9 fa1c 	bl	8100c68 <__aeabi_d2iz>
 8107830:	4605      	mov	r5, r0
 8107832:	f7f8 feff 	bl	8100634 <__aeabi_i2d>
 8107836:	4602      	mov	r2, r0
 8107838:	460b      	mov	r3, r1
 810783a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810783e:	f7f8 fdab 	bl	8100398 <__aeabi_dsub>
 8107842:	3530      	adds	r5, #48	@ 0x30
 8107844:	f806 5b01 	strb.w	r5, [r6], #1
 8107848:	4602      	mov	r2, r0
 810784a:	460b      	mov	r3, r1
 810784c:	42a6      	cmp	r6, r4
 810784e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8107852:	f04f 0200 	mov.w	r2, #0
 8107856:	d124      	bne.n	81078a2 <_dtoa_r+0x662>
 8107858:	4bac      	ldr	r3, [pc, #688]	@ (8107b0c <_dtoa_r+0x8cc>)
 810785a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 810785e:	f7f8 fd9d 	bl	810039c <__adddf3>
 8107862:	4602      	mov	r2, r0
 8107864:	460b      	mov	r3, r1
 8107866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810786a:	f7f9 f9dd 	bl	8100c28 <__aeabi_dcmpgt>
 810786e:	2800      	cmp	r0, #0
 8107870:	d145      	bne.n	81078fe <_dtoa_r+0x6be>
 8107872:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8107876:	49a5      	ldr	r1, [pc, #660]	@ (8107b0c <_dtoa_r+0x8cc>)
 8107878:	2000      	movs	r0, #0
 810787a:	f7f8 fd8d 	bl	8100398 <__aeabi_dsub>
 810787e:	4602      	mov	r2, r0
 8107880:	460b      	mov	r3, r1
 8107882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8107886:	f7f9 f9b1 	bl	8100bec <__aeabi_dcmplt>
 810788a:	2800      	cmp	r0, #0
 810788c:	f43f aef5 	beq.w	810767a <_dtoa_r+0x43a>
 8107890:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8107892:	1e73      	subs	r3, r6, #1
 8107894:	9315      	str	r3, [sp, #84]	@ 0x54
 8107896:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810789a:	2b30      	cmp	r3, #48	@ 0x30
 810789c:	d0f8      	beq.n	8107890 <_dtoa_r+0x650>
 810789e:	9f04      	ldr	r7, [sp, #16]
 81078a0:	e73e      	b.n	8107720 <_dtoa_r+0x4e0>
 81078a2:	4b9b      	ldr	r3, [pc, #620]	@ (8107b10 <_dtoa_r+0x8d0>)
 81078a4:	f7f8 ff30 	bl	8100708 <__aeabi_dmul>
 81078a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81078ac:	e7bc      	b.n	8107828 <_dtoa_r+0x5e8>
 81078ae:	d10c      	bne.n	81078ca <_dtoa_r+0x68a>
 81078b0:	4b98      	ldr	r3, [pc, #608]	@ (8107b14 <_dtoa_r+0x8d4>)
 81078b2:	2200      	movs	r2, #0
 81078b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 81078b8:	f7f8 ff26 	bl	8100708 <__aeabi_dmul>
 81078bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81078c0:	f7f9 f9a8 	bl	8100c14 <__aeabi_dcmpge>
 81078c4:	2800      	cmp	r0, #0
 81078c6:	f000 8157 	beq.w	8107b78 <_dtoa_r+0x938>
 81078ca:	2400      	movs	r4, #0
 81078cc:	4625      	mov	r5, r4
 81078ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81078d0:	43db      	mvns	r3, r3
 81078d2:	9304      	str	r3, [sp, #16]
 81078d4:	4656      	mov	r6, sl
 81078d6:	2700      	movs	r7, #0
 81078d8:	4621      	mov	r1, r4
 81078da:	4658      	mov	r0, fp
 81078dc:	f000 fbb4 	bl	8108048 <_Bfree>
 81078e0:	2d00      	cmp	r5, #0
 81078e2:	d0dc      	beq.n	810789e <_dtoa_r+0x65e>
 81078e4:	b12f      	cbz	r7, 81078f2 <_dtoa_r+0x6b2>
 81078e6:	42af      	cmp	r7, r5
 81078e8:	d003      	beq.n	81078f2 <_dtoa_r+0x6b2>
 81078ea:	4639      	mov	r1, r7
 81078ec:	4658      	mov	r0, fp
 81078ee:	f000 fbab 	bl	8108048 <_Bfree>
 81078f2:	4629      	mov	r1, r5
 81078f4:	4658      	mov	r0, fp
 81078f6:	f000 fba7 	bl	8108048 <_Bfree>
 81078fa:	e7d0      	b.n	810789e <_dtoa_r+0x65e>
 81078fc:	9704      	str	r7, [sp, #16]
 81078fe:	4633      	mov	r3, r6
 8107900:	461e      	mov	r6, r3
 8107902:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8107906:	2a39      	cmp	r2, #57	@ 0x39
 8107908:	d107      	bne.n	810791a <_dtoa_r+0x6da>
 810790a:	459a      	cmp	sl, r3
 810790c:	d1f8      	bne.n	8107900 <_dtoa_r+0x6c0>
 810790e:	9a04      	ldr	r2, [sp, #16]
 8107910:	3201      	adds	r2, #1
 8107912:	9204      	str	r2, [sp, #16]
 8107914:	2230      	movs	r2, #48	@ 0x30
 8107916:	f88a 2000 	strb.w	r2, [sl]
 810791a:	781a      	ldrb	r2, [r3, #0]
 810791c:	3201      	adds	r2, #1
 810791e:	701a      	strb	r2, [r3, #0]
 8107920:	e7bd      	b.n	810789e <_dtoa_r+0x65e>
 8107922:	4b7b      	ldr	r3, [pc, #492]	@ (8107b10 <_dtoa_r+0x8d0>)
 8107924:	2200      	movs	r2, #0
 8107926:	f7f8 feef 	bl	8100708 <__aeabi_dmul>
 810792a:	2200      	movs	r2, #0
 810792c:	2300      	movs	r3, #0
 810792e:	4604      	mov	r4, r0
 8107930:	460d      	mov	r5, r1
 8107932:	f7f9 f951 	bl	8100bd8 <__aeabi_dcmpeq>
 8107936:	2800      	cmp	r0, #0
 8107938:	f43f aebb 	beq.w	81076b2 <_dtoa_r+0x472>
 810793c:	e6f0      	b.n	8107720 <_dtoa_r+0x4e0>
 810793e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8107940:	2a00      	cmp	r2, #0
 8107942:	f000 80db 	beq.w	8107afc <_dtoa_r+0x8bc>
 8107946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8107948:	2a01      	cmp	r2, #1
 810794a:	f300 80bf 	bgt.w	8107acc <_dtoa_r+0x88c>
 810794e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8107950:	2a00      	cmp	r2, #0
 8107952:	f000 80b7 	beq.w	8107ac4 <_dtoa_r+0x884>
 8107956:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 810795a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 810795c:	4646      	mov	r6, r8
 810795e:	9a08      	ldr	r2, [sp, #32]
 8107960:	2101      	movs	r1, #1
 8107962:	441a      	add	r2, r3
 8107964:	4658      	mov	r0, fp
 8107966:	4498      	add	r8, r3
 8107968:	9208      	str	r2, [sp, #32]
 810796a:	f000 fc21 	bl	81081b0 <__i2b>
 810796e:	4605      	mov	r5, r0
 8107970:	b15e      	cbz	r6, 810798a <_dtoa_r+0x74a>
 8107972:	9b08      	ldr	r3, [sp, #32]
 8107974:	2b00      	cmp	r3, #0
 8107976:	dd08      	ble.n	810798a <_dtoa_r+0x74a>
 8107978:	42b3      	cmp	r3, r6
 810797a:	9a08      	ldr	r2, [sp, #32]
 810797c:	bfa8      	it	ge
 810797e:	4633      	movge	r3, r6
 8107980:	eba8 0803 	sub.w	r8, r8, r3
 8107984:	1af6      	subs	r6, r6, r3
 8107986:	1ad3      	subs	r3, r2, r3
 8107988:	9308      	str	r3, [sp, #32]
 810798a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810798c:	b1f3      	cbz	r3, 81079cc <_dtoa_r+0x78c>
 810798e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8107990:	2b00      	cmp	r3, #0
 8107992:	f000 80b7 	beq.w	8107b04 <_dtoa_r+0x8c4>
 8107996:	b18c      	cbz	r4, 81079bc <_dtoa_r+0x77c>
 8107998:	4629      	mov	r1, r5
 810799a:	4622      	mov	r2, r4
 810799c:	4658      	mov	r0, fp
 810799e:	f000 fcc7 	bl	8108330 <__pow5mult>
 81079a2:	464a      	mov	r2, r9
 81079a4:	4601      	mov	r1, r0
 81079a6:	4605      	mov	r5, r0
 81079a8:	4658      	mov	r0, fp
 81079aa:	f000 fc17 	bl	81081dc <__multiply>
 81079ae:	4649      	mov	r1, r9
 81079b0:	9004      	str	r0, [sp, #16]
 81079b2:	4658      	mov	r0, fp
 81079b4:	f000 fb48 	bl	8108048 <_Bfree>
 81079b8:	9b04      	ldr	r3, [sp, #16]
 81079ba:	4699      	mov	r9, r3
 81079bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81079be:	1b1a      	subs	r2, r3, r4
 81079c0:	d004      	beq.n	81079cc <_dtoa_r+0x78c>
 81079c2:	4649      	mov	r1, r9
 81079c4:	4658      	mov	r0, fp
 81079c6:	f000 fcb3 	bl	8108330 <__pow5mult>
 81079ca:	4681      	mov	r9, r0
 81079cc:	2101      	movs	r1, #1
 81079ce:	4658      	mov	r0, fp
 81079d0:	f000 fbee 	bl	81081b0 <__i2b>
 81079d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81079d6:	4604      	mov	r4, r0
 81079d8:	2b00      	cmp	r3, #0
 81079da:	f000 81cf 	beq.w	8107d7c <_dtoa_r+0xb3c>
 81079de:	461a      	mov	r2, r3
 81079e0:	4601      	mov	r1, r0
 81079e2:	4658      	mov	r0, fp
 81079e4:	f000 fca4 	bl	8108330 <__pow5mult>
 81079e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81079ea:	2b01      	cmp	r3, #1
 81079ec:	4604      	mov	r4, r0
 81079ee:	f300 8095 	bgt.w	8107b1c <_dtoa_r+0x8dc>
 81079f2:	9b02      	ldr	r3, [sp, #8]
 81079f4:	2b00      	cmp	r3, #0
 81079f6:	f040 8087 	bne.w	8107b08 <_dtoa_r+0x8c8>
 81079fa:	9b03      	ldr	r3, [sp, #12]
 81079fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8107a00:	2b00      	cmp	r3, #0
 8107a02:	f040 8089 	bne.w	8107b18 <_dtoa_r+0x8d8>
 8107a06:	9b03      	ldr	r3, [sp, #12]
 8107a08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8107a0c:	0d1b      	lsrs	r3, r3, #20
 8107a0e:	051b      	lsls	r3, r3, #20
 8107a10:	b12b      	cbz	r3, 8107a1e <_dtoa_r+0x7de>
 8107a12:	9b08      	ldr	r3, [sp, #32]
 8107a14:	3301      	adds	r3, #1
 8107a16:	9308      	str	r3, [sp, #32]
 8107a18:	f108 0801 	add.w	r8, r8, #1
 8107a1c:	2301      	movs	r3, #1
 8107a1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8107a20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8107a22:	2b00      	cmp	r3, #0
 8107a24:	f000 81b0 	beq.w	8107d88 <_dtoa_r+0xb48>
 8107a28:	6923      	ldr	r3, [r4, #16]
 8107a2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8107a2e:	6918      	ldr	r0, [r3, #16]
 8107a30:	f000 fb72 	bl	8108118 <__hi0bits>
 8107a34:	f1c0 0020 	rsb	r0, r0, #32
 8107a38:	9b08      	ldr	r3, [sp, #32]
 8107a3a:	4418      	add	r0, r3
 8107a3c:	f010 001f 	ands.w	r0, r0, #31
 8107a40:	d077      	beq.n	8107b32 <_dtoa_r+0x8f2>
 8107a42:	f1c0 0320 	rsb	r3, r0, #32
 8107a46:	2b04      	cmp	r3, #4
 8107a48:	dd6b      	ble.n	8107b22 <_dtoa_r+0x8e2>
 8107a4a:	9b08      	ldr	r3, [sp, #32]
 8107a4c:	f1c0 001c 	rsb	r0, r0, #28
 8107a50:	4403      	add	r3, r0
 8107a52:	4480      	add	r8, r0
 8107a54:	4406      	add	r6, r0
 8107a56:	9308      	str	r3, [sp, #32]
 8107a58:	f1b8 0f00 	cmp.w	r8, #0
 8107a5c:	dd05      	ble.n	8107a6a <_dtoa_r+0x82a>
 8107a5e:	4649      	mov	r1, r9
 8107a60:	4642      	mov	r2, r8
 8107a62:	4658      	mov	r0, fp
 8107a64:	f000 fcbe 	bl	81083e4 <__lshift>
 8107a68:	4681      	mov	r9, r0
 8107a6a:	9b08      	ldr	r3, [sp, #32]
 8107a6c:	2b00      	cmp	r3, #0
 8107a6e:	dd05      	ble.n	8107a7c <_dtoa_r+0x83c>
 8107a70:	4621      	mov	r1, r4
 8107a72:	461a      	mov	r2, r3
 8107a74:	4658      	mov	r0, fp
 8107a76:	f000 fcb5 	bl	81083e4 <__lshift>
 8107a7a:	4604      	mov	r4, r0
 8107a7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8107a7e:	2b00      	cmp	r3, #0
 8107a80:	d059      	beq.n	8107b36 <_dtoa_r+0x8f6>
 8107a82:	4621      	mov	r1, r4
 8107a84:	4648      	mov	r0, r9
 8107a86:	f000 fd19 	bl	81084bc <__mcmp>
 8107a8a:	2800      	cmp	r0, #0
 8107a8c:	da53      	bge.n	8107b36 <_dtoa_r+0x8f6>
 8107a8e:	1e7b      	subs	r3, r7, #1
 8107a90:	9304      	str	r3, [sp, #16]
 8107a92:	4649      	mov	r1, r9
 8107a94:	2300      	movs	r3, #0
 8107a96:	220a      	movs	r2, #10
 8107a98:	4658      	mov	r0, fp
 8107a9a:	f000 faf7 	bl	810808c <__multadd>
 8107a9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8107aa0:	4681      	mov	r9, r0
 8107aa2:	2b00      	cmp	r3, #0
 8107aa4:	f000 8172 	beq.w	8107d8c <_dtoa_r+0xb4c>
 8107aa8:	2300      	movs	r3, #0
 8107aaa:	4629      	mov	r1, r5
 8107aac:	220a      	movs	r2, #10
 8107aae:	4658      	mov	r0, fp
 8107ab0:	f000 faec 	bl	810808c <__multadd>
 8107ab4:	9b00      	ldr	r3, [sp, #0]
 8107ab6:	2b00      	cmp	r3, #0
 8107ab8:	4605      	mov	r5, r0
 8107aba:	dc67      	bgt.n	8107b8c <_dtoa_r+0x94c>
 8107abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8107abe:	2b02      	cmp	r3, #2
 8107ac0:	dc41      	bgt.n	8107b46 <_dtoa_r+0x906>
 8107ac2:	e063      	b.n	8107b8c <_dtoa_r+0x94c>
 8107ac4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8107ac6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8107aca:	e746      	b.n	810795a <_dtoa_r+0x71a>
 8107acc:	9b07      	ldr	r3, [sp, #28]
 8107ace:	1e5c      	subs	r4, r3, #1
 8107ad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8107ad2:	42a3      	cmp	r3, r4
 8107ad4:	bfbf      	itttt	lt
 8107ad6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8107ad8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8107ada:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8107adc:	1ae3      	sublt	r3, r4, r3
 8107ade:	bfb4      	ite	lt
 8107ae0:	18d2      	addlt	r2, r2, r3
 8107ae2:	1b1c      	subge	r4, r3, r4
 8107ae4:	9b07      	ldr	r3, [sp, #28]
 8107ae6:	bfbc      	itt	lt
 8107ae8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8107aea:	2400      	movlt	r4, #0
 8107aec:	2b00      	cmp	r3, #0
 8107aee:	bfb5      	itete	lt
 8107af0:	eba8 0603 	sublt.w	r6, r8, r3
 8107af4:	9b07      	ldrge	r3, [sp, #28]
 8107af6:	2300      	movlt	r3, #0
 8107af8:	4646      	movge	r6, r8
 8107afa:	e730      	b.n	810795e <_dtoa_r+0x71e>
 8107afc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8107afe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8107b00:	4646      	mov	r6, r8
 8107b02:	e735      	b.n	8107970 <_dtoa_r+0x730>
 8107b04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8107b06:	e75c      	b.n	81079c2 <_dtoa_r+0x782>
 8107b08:	2300      	movs	r3, #0
 8107b0a:	e788      	b.n	8107a1e <_dtoa_r+0x7de>
 8107b0c:	3fe00000 	.word	0x3fe00000
 8107b10:	40240000 	.word	0x40240000
 8107b14:	40140000 	.word	0x40140000
 8107b18:	9b02      	ldr	r3, [sp, #8]
 8107b1a:	e780      	b.n	8107a1e <_dtoa_r+0x7de>
 8107b1c:	2300      	movs	r3, #0
 8107b1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8107b20:	e782      	b.n	8107a28 <_dtoa_r+0x7e8>
 8107b22:	d099      	beq.n	8107a58 <_dtoa_r+0x818>
 8107b24:	9a08      	ldr	r2, [sp, #32]
 8107b26:	331c      	adds	r3, #28
 8107b28:	441a      	add	r2, r3
 8107b2a:	4498      	add	r8, r3
 8107b2c:	441e      	add	r6, r3
 8107b2e:	9208      	str	r2, [sp, #32]
 8107b30:	e792      	b.n	8107a58 <_dtoa_r+0x818>
 8107b32:	4603      	mov	r3, r0
 8107b34:	e7f6      	b.n	8107b24 <_dtoa_r+0x8e4>
 8107b36:	9b07      	ldr	r3, [sp, #28]
 8107b38:	9704      	str	r7, [sp, #16]
 8107b3a:	2b00      	cmp	r3, #0
 8107b3c:	dc20      	bgt.n	8107b80 <_dtoa_r+0x940>
 8107b3e:	9300      	str	r3, [sp, #0]
 8107b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8107b42:	2b02      	cmp	r3, #2
 8107b44:	dd1e      	ble.n	8107b84 <_dtoa_r+0x944>
 8107b46:	9b00      	ldr	r3, [sp, #0]
 8107b48:	2b00      	cmp	r3, #0
 8107b4a:	f47f aec0 	bne.w	81078ce <_dtoa_r+0x68e>
 8107b4e:	4621      	mov	r1, r4
 8107b50:	2205      	movs	r2, #5
 8107b52:	4658      	mov	r0, fp
 8107b54:	f000 fa9a 	bl	810808c <__multadd>
 8107b58:	4601      	mov	r1, r0
 8107b5a:	4604      	mov	r4, r0
 8107b5c:	4648      	mov	r0, r9
 8107b5e:	f000 fcad 	bl	81084bc <__mcmp>
 8107b62:	2800      	cmp	r0, #0
 8107b64:	f77f aeb3 	ble.w	81078ce <_dtoa_r+0x68e>
 8107b68:	4656      	mov	r6, sl
 8107b6a:	2331      	movs	r3, #49	@ 0x31
 8107b6c:	f806 3b01 	strb.w	r3, [r6], #1
 8107b70:	9b04      	ldr	r3, [sp, #16]
 8107b72:	3301      	adds	r3, #1
 8107b74:	9304      	str	r3, [sp, #16]
 8107b76:	e6ae      	b.n	81078d6 <_dtoa_r+0x696>
 8107b78:	9c07      	ldr	r4, [sp, #28]
 8107b7a:	9704      	str	r7, [sp, #16]
 8107b7c:	4625      	mov	r5, r4
 8107b7e:	e7f3      	b.n	8107b68 <_dtoa_r+0x928>
 8107b80:	9b07      	ldr	r3, [sp, #28]
 8107b82:	9300      	str	r3, [sp, #0]
 8107b84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8107b86:	2b00      	cmp	r3, #0
 8107b88:	f000 8104 	beq.w	8107d94 <_dtoa_r+0xb54>
 8107b8c:	2e00      	cmp	r6, #0
 8107b8e:	dd05      	ble.n	8107b9c <_dtoa_r+0x95c>
 8107b90:	4629      	mov	r1, r5
 8107b92:	4632      	mov	r2, r6
 8107b94:	4658      	mov	r0, fp
 8107b96:	f000 fc25 	bl	81083e4 <__lshift>
 8107b9a:	4605      	mov	r5, r0
 8107b9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8107b9e:	2b00      	cmp	r3, #0
 8107ba0:	d05a      	beq.n	8107c58 <_dtoa_r+0xa18>
 8107ba2:	6869      	ldr	r1, [r5, #4]
 8107ba4:	4658      	mov	r0, fp
 8107ba6:	f000 fa0f 	bl	8107fc8 <_Balloc>
 8107baa:	4606      	mov	r6, r0
 8107bac:	b928      	cbnz	r0, 8107bba <_dtoa_r+0x97a>
 8107bae:	4b84      	ldr	r3, [pc, #528]	@ (8107dc0 <_dtoa_r+0xb80>)
 8107bb0:	4602      	mov	r2, r0
 8107bb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8107bb6:	f7ff bb5a 	b.w	810726e <_dtoa_r+0x2e>
 8107bba:	692a      	ldr	r2, [r5, #16]
 8107bbc:	3202      	adds	r2, #2
 8107bbe:	0092      	lsls	r2, r2, #2
 8107bc0:	f105 010c 	add.w	r1, r5, #12
 8107bc4:	300c      	adds	r0, #12
 8107bc6:	f000 ffaf 	bl	8108b28 <memcpy>
 8107bca:	2201      	movs	r2, #1
 8107bcc:	4631      	mov	r1, r6
 8107bce:	4658      	mov	r0, fp
 8107bd0:	f000 fc08 	bl	81083e4 <__lshift>
 8107bd4:	f10a 0301 	add.w	r3, sl, #1
 8107bd8:	9307      	str	r3, [sp, #28]
 8107bda:	9b00      	ldr	r3, [sp, #0]
 8107bdc:	4453      	add	r3, sl
 8107bde:	930b      	str	r3, [sp, #44]	@ 0x2c
 8107be0:	9b02      	ldr	r3, [sp, #8]
 8107be2:	f003 0301 	and.w	r3, r3, #1
 8107be6:	462f      	mov	r7, r5
 8107be8:	930a      	str	r3, [sp, #40]	@ 0x28
 8107bea:	4605      	mov	r5, r0
 8107bec:	9b07      	ldr	r3, [sp, #28]
 8107bee:	4621      	mov	r1, r4
 8107bf0:	3b01      	subs	r3, #1
 8107bf2:	4648      	mov	r0, r9
 8107bf4:	9300      	str	r3, [sp, #0]
 8107bf6:	f7ff fa98 	bl	810712a <quorem>
 8107bfa:	4639      	mov	r1, r7
 8107bfc:	9002      	str	r0, [sp, #8]
 8107bfe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8107c02:	4648      	mov	r0, r9
 8107c04:	f000 fc5a 	bl	81084bc <__mcmp>
 8107c08:	462a      	mov	r2, r5
 8107c0a:	9008      	str	r0, [sp, #32]
 8107c0c:	4621      	mov	r1, r4
 8107c0e:	4658      	mov	r0, fp
 8107c10:	f000 fc70 	bl	81084f4 <__mdiff>
 8107c14:	68c2      	ldr	r2, [r0, #12]
 8107c16:	4606      	mov	r6, r0
 8107c18:	bb02      	cbnz	r2, 8107c5c <_dtoa_r+0xa1c>
 8107c1a:	4601      	mov	r1, r0
 8107c1c:	4648      	mov	r0, r9
 8107c1e:	f000 fc4d 	bl	81084bc <__mcmp>
 8107c22:	4602      	mov	r2, r0
 8107c24:	4631      	mov	r1, r6
 8107c26:	4658      	mov	r0, fp
 8107c28:	920e      	str	r2, [sp, #56]	@ 0x38
 8107c2a:	f000 fa0d 	bl	8108048 <_Bfree>
 8107c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8107c30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8107c32:	9e07      	ldr	r6, [sp, #28]
 8107c34:	ea43 0102 	orr.w	r1, r3, r2
 8107c38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8107c3a:	4319      	orrs	r1, r3
 8107c3c:	d110      	bne.n	8107c60 <_dtoa_r+0xa20>
 8107c3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8107c42:	d029      	beq.n	8107c98 <_dtoa_r+0xa58>
 8107c44:	9b08      	ldr	r3, [sp, #32]
 8107c46:	2b00      	cmp	r3, #0
 8107c48:	dd02      	ble.n	8107c50 <_dtoa_r+0xa10>
 8107c4a:	9b02      	ldr	r3, [sp, #8]
 8107c4c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8107c50:	9b00      	ldr	r3, [sp, #0]
 8107c52:	f883 8000 	strb.w	r8, [r3]
 8107c56:	e63f      	b.n	81078d8 <_dtoa_r+0x698>
 8107c58:	4628      	mov	r0, r5
 8107c5a:	e7bb      	b.n	8107bd4 <_dtoa_r+0x994>
 8107c5c:	2201      	movs	r2, #1
 8107c5e:	e7e1      	b.n	8107c24 <_dtoa_r+0x9e4>
 8107c60:	9b08      	ldr	r3, [sp, #32]
 8107c62:	2b00      	cmp	r3, #0
 8107c64:	db04      	blt.n	8107c70 <_dtoa_r+0xa30>
 8107c66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8107c68:	430b      	orrs	r3, r1
 8107c6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8107c6c:	430b      	orrs	r3, r1
 8107c6e:	d120      	bne.n	8107cb2 <_dtoa_r+0xa72>
 8107c70:	2a00      	cmp	r2, #0
 8107c72:	dded      	ble.n	8107c50 <_dtoa_r+0xa10>
 8107c74:	4649      	mov	r1, r9
 8107c76:	2201      	movs	r2, #1
 8107c78:	4658      	mov	r0, fp
 8107c7a:	f000 fbb3 	bl	81083e4 <__lshift>
 8107c7e:	4621      	mov	r1, r4
 8107c80:	4681      	mov	r9, r0
 8107c82:	f000 fc1b 	bl	81084bc <__mcmp>
 8107c86:	2800      	cmp	r0, #0
 8107c88:	dc03      	bgt.n	8107c92 <_dtoa_r+0xa52>
 8107c8a:	d1e1      	bne.n	8107c50 <_dtoa_r+0xa10>
 8107c8c:	f018 0f01 	tst.w	r8, #1
 8107c90:	d0de      	beq.n	8107c50 <_dtoa_r+0xa10>
 8107c92:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8107c96:	d1d8      	bne.n	8107c4a <_dtoa_r+0xa0a>
 8107c98:	9a00      	ldr	r2, [sp, #0]
 8107c9a:	2339      	movs	r3, #57	@ 0x39
 8107c9c:	7013      	strb	r3, [r2, #0]
 8107c9e:	4633      	mov	r3, r6
 8107ca0:	461e      	mov	r6, r3
 8107ca2:	3b01      	subs	r3, #1
 8107ca4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8107ca8:	2a39      	cmp	r2, #57	@ 0x39
 8107caa:	d052      	beq.n	8107d52 <_dtoa_r+0xb12>
 8107cac:	3201      	adds	r2, #1
 8107cae:	701a      	strb	r2, [r3, #0]
 8107cb0:	e612      	b.n	81078d8 <_dtoa_r+0x698>
 8107cb2:	2a00      	cmp	r2, #0
 8107cb4:	dd07      	ble.n	8107cc6 <_dtoa_r+0xa86>
 8107cb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8107cba:	d0ed      	beq.n	8107c98 <_dtoa_r+0xa58>
 8107cbc:	9a00      	ldr	r2, [sp, #0]
 8107cbe:	f108 0301 	add.w	r3, r8, #1
 8107cc2:	7013      	strb	r3, [r2, #0]
 8107cc4:	e608      	b.n	81078d8 <_dtoa_r+0x698>
 8107cc6:	9b07      	ldr	r3, [sp, #28]
 8107cc8:	9a07      	ldr	r2, [sp, #28]
 8107cca:	f803 8c01 	strb.w	r8, [r3, #-1]
 8107cce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8107cd0:	4293      	cmp	r3, r2
 8107cd2:	d028      	beq.n	8107d26 <_dtoa_r+0xae6>
 8107cd4:	4649      	mov	r1, r9
 8107cd6:	2300      	movs	r3, #0
 8107cd8:	220a      	movs	r2, #10
 8107cda:	4658      	mov	r0, fp
 8107cdc:	f000 f9d6 	bl	810808c <__multadd>
 8107ce0:	42af      	cmp	r7, r5
 8107ce2:	4681      	mov	r9, r0
 8107ce4:	f04f 0300 	mov.w	r3, #0
 8107ce8:	f04f 020a 	mov.w	r2, #10
 8107cec:	4639      	mov	r1, r7
 8107cee:	4658      	mov	r0, fp
 8107cf0:	d107      	bne.n	8107d02 <_dtoa_r+0xac2>
 8107cf2:	f000 f9cb 	bl	810808c <__multadd>
 8107cf6:	4607      	mov	r7, r0
 8107cf8:	4605      	mov	r5, r0
 8107cfa:	9b07      	ldr	r3, [sp, #28]
 8107cfc:	3301      	adds	r3, #1
 8107cfe:	9307      	str	r3, [sp, #28]
 8107d00:	e774      	b.n	8107bec <_dtoa_r+0x9ac>
 8107d02:	f000 f9c3 	bl	810808c <__multadd>
 8107d06:	4629      	mov	r1, r5
 8107d08:	4607      	mov	r7, r0
 8107d0a:	2300      	movs	r3, #0
 8107d0c:	220a      	movs	r2, #10
 8107d0e:	4658      	mov	r0, fp
 8107d10:	f000 f9bc 	bl	810808c <__multadd>
 8107d14:	4605      	mov	r5, r0
 8107d16:	e7f0      	b.n	8107cfa <_dtoa_r+0xaba>
 8107d18:	9b00      	ldr	r3, [sp, #0]
 8107d1a:	2b00      	cmp	r3, #0
 8107d1c:	bfcc      	ite	gt
 8107d1e:	461e      	movgt	r6, r3
 8107d20:	2601      	movle	r6, #1
 8107d22:	4456      	add	r6, sl
 8107d24:	2700      	movs	r7, #0
 8107d26:	4649      	mov	r1, r9
 8107d28:	2201      	movs	r2, #1
 8107d2a:	4658      	mov	r0, fp
 8107d2c:	f000 fb5a 	bl	81083e4 <__lshift>
 8107d30:	4621      	mov	r1, r4
 8107d32:	4681      	mov	r9, r0
 8107d34:	f000 fbc2 	bl	81084bc <__mcmp>
 8107d38:	2800      	cmp	r0, #0
 8107d3a:	dcb0      	bgt.n	8107c9e <_dtoa_r+0xa5e>
 8107d3c:	d102      	bne.n	8107d44 <_dtoa_r+0xb04>
 8107d3e:	f018 0f01 	tst.w	r8, #1
 8107d42:	d1ac      	bne.n	8107c9e <_dtoa_r+0xa5e>
 8107d44:	4633      	mov	r3, r6
 8107d46:	461e      	mov	r6, r3
 8107d48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8107d4c:	2a30      	cmp	r2, #48	@ 0x30
 8107d4e:	d0fa      	beq.n	8107d46 <_dtoa_r+0xb06>
 8107d50:	e5c2      	b.n	81078d8 <_dtoa_r+0x698>
 8107d52:	459a      	cmp	sl, r3
 8107d54:	d1a4      	bne.n	8107ca0 <_dtoa_r+0xa60>
 8107d56:	9b04      	ldr	r3, [sp, #16]
 8107d58:	3301      	adds	r3, #1
 8107d5a:	9304      	str	r3, [sp, #16]
 8107d5c:	2331      	movs	r3, #49	@ 0x31
 8107d5e:	f88a 3000 	strb.w	r3, [sl]
 8107d62:	e5b9      	b.n	81078d8 <_dtoa_r+0x698>
 8107d64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8107d66:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8107dc4 <_dtoa_r+0xb84>
 8107d6a:	b11b      	cbz	r3, 8107d74 <_dtoa_r+0xb34>
 8107d6c:	f10a 0308 	add.w	r3, sl, #8
 8107d70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8107d72:	6013      	str	r3, [r2, #0]
 8107d74:	4650      	mov	r0, sl
 8107d76:	b019      	add	sp, #100	@ 0x64
 8107d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8107d7e:	2b01      	cmp	r3, #1
 8107d80:	f77f ae37 	ble.w	81079f2 <_dtoa_r+0x7b2>
 8107d84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8107d86:	930a      	str	r3, [sp, #40]	@ 0x28
 8107d88:	2001      	movs	r0, #1
 8107d8a:	e655      	b.n	8107a38 <_dtoa_r+0x7f8>
 8107d8c:	9b00      	ldr	r3, [sp, #0]
 8107d8e:	2b00      	cmp	r3, #0
 8107d90:	f77f aed6 	ble.w	8107b40 <_dtoa_r+0x900>
 8107d94:	4656      	mov	r6, sl
 8107d96:	4621      	mov	r1, r4
 8107d98:	4648      	mov	r0, r9
 8107d9a:	f7ff f9c6 	bl	810712a <quorem>
 8107d9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8107da2:	f806 8b01 	strb.w	r8, [r6], #1
 8107da6:	9b00      	ldr	r3, [sp, #0]
 8107da8:	eba6 020a 	sub.w	r2, r6, sl
 8107dac:	4293      	cmp	r3, r2
 8107dae:	ddb3      	ble.n	8107d18 <_dtoa_r+0xad8>
 8107db0:	4649      	mov	r1, r9
 8107db2:	2300      	movs	r3, #0
 8107db4:	220a      	movs	r2, #10
 8107db6:	4658      	mov	r0, fp
 8107db8:	f000 f968 	bl	810808c <__multadd>
 8107dbc:	4681      	mov	r9, r0
 8107dbe:	e7ea      	b.n	8107d96 <_dtoa_r+0xb56>
 8107dc0:	081092d0 	.word	0x081092d0
 8107dc4:	08109254 	.word	0x08109254

08107dc8 <_free_r>:
 8107dc8:	b538      	push	{r3, r4, r5, lr}
 8107dca:	4605      	mov	r5, r0
 8107dcc:	2900      	cmp	r1, #0
 8107dce:	d041      	beq.n	8107e54 <_free_r+0x8c>
 8107dd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8107dd4:	1f0c      	subs	r4, r1, #4
 8107dd6:	2b00      	cmp	r3, #0
 8107dd8:	bfb8      	it	lt
 8107dda:	18e4      	addlt	r4, r4, r3
 8107ddc:	f000 f8e8 	bl	8107fb0 <__malloc_lock>
 8107de0:	4a1d      	ldr	r2, [pc, #116]	@ (8107e58 <_free_r+0x90>)
 8107de2:	6813      	ldr	r3, [r2, #0]
 8107de4:	b933      	cbnz	r3, 8107df4 <_free_r+0x2c>
 8107de6:	6063      	str	r3, [r4, #4]
 8107de8:	6014      	str	r4, [r2, #0]
 8107dea:	4628      	mov	r0, r5
 8107dec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8107df0:	f000 b8e4 	b.w	8107fbc <__malloc_unlock>
 8107df4:	42a3      	cmp	r3, r4
 8107df6:	d908      	bls.n	8107e0a <_free_r+0x42>
 8107df8:	6820      	ldr	r0, [r4, #0]
 8107dfa:	1821      	adds	r1, r4, r0
 8107dfc:	428b      	cmp	r3, r1
 8107dfe:	bf01      	itttt	eq
 8107e00:	6819      	ldreq	r1, [r3, #0]
 8107e02:	685b      	ldreq	r3, [r3, #4]
 8107e04:	1809      	addeq	r1, r1, r0
 8107e06:	6021      	streq	r1, [r4, #0]
 8107e08:	e7ed      	b.n	8107de6 <_free_r+0x1e>
 8107e0a:	461a      	mov	r2, r3
 8107e0c:	685b      	ldr	r3, [r3, #4]
 8107e0e:	b10b      	cbz	r3, 8107e14 <_free_r+0x4c>
 8107e10:	42a3      	cmp	r3, r4
 8107e12:	d9fa      	bls.n	8107e0a <_free_r+0x42>
 8107e14:	6811      	ldr	r1, [r2, #0]
 8107e16:	1850      	adds	r0, r2, r1
 8107e18:	42a0      	cmp	r0, r4
 8107e1a:	d10b      	bne.n	8107e34 <_free_r+0x6c>
 8107e1c:	6820      	ldr	r0, [r4, #0]
 8107e1e:	4401      	add	r1, r0
 8107e20:	1850      	adds	r0, r2, r1
 8107e22:	4283      	cmp	r3, r0
 8107e24:	6011      	str	r1, [r2, #0]
 8107e26:	d1e0      	bne.n	8107dea <_free_r+0x22>
 8107e28:	6818      	ldr	r0, [r3, #0]
 8107e2a:	685b      	ldr	r3, [r3, #4]
 8107e2c:	6053      	str	r3, [r2, #4]
 8107e2e:	4408      	add	r0, r1
 8107e30:	6010      	str	r0, [r2, #0]
 8107e32:	e7da      	b.n	8107dea <_free_r+0x22>
 8107e34:	d902      	bls.n	8107e3c <_free_r+0x74>
 8107e36:	230c      	movs	r3, #12
 8107e38:	602b      	str	r3, [r5, #0]
 8107e3a:	e7d6      	b.n	8107dea <_free_r+0x22>
 8107e3c:	6820      	ldr	r0, [r4, #0]
 8107e3e:	1821      	adds	r1, r4, r0
 8107e40:	428b      	cmp	r3, r1
 8107e42:	bf04      	itt	eq
 8107e44:	6819      	ldreq	r1, [r3, #0]
 8107e46:	685b      	ldreq	r3, [r3, #4]
 8107e48:	6063      	str	r3, [r4, #4]
 8107e4a:	bf04      	itt	eq
 8107e4c:	1809      	addeq	r1, r1, r0
 8107e4e:	6021      	streq	r1, [r4, #0]
 8107e50:	6054      	str	r4, [r2, #4]
 8107e52:	e7ca      	b.n	8107dea <_free_r+0x22>
 8107e54:	bd38      	pop	{r3, r4, r5, pc}
 8107e56:	bf00      	nop
 8107e58:	10000900 	.word	0x10000900

08107e5c <malloc>:
 8107e5c:	4b02      	ldr	r3, [pc, #8]	@ (8107e68 <malloc+0xc>)
 8107e5e:	4601      	mov	r1, r0
 8107e60:	6818      	ldr	r0, [r3, #0]
 8107e62:	f000 b825 	b.w	8107eb0 <_malloc_r>
 8107e66:	bf00      	nop
 8107e68:	10000020 	.word	0x10000020

08107e6c <sbrk_aligned>:
 8107e6c:	b570      	push	{r4, r5, r6, lr}
 8107e6e:	4e0f      	ldr	r6, [pc, #60]	@ (8107eac <sbrk_aligned+0x40>)
 8107e70:	460c      	mov	r4, r1
 8107e72:	6831      	ldr	r1, [r6, #0]
 8107e74:	4605      	mov	r5, r0
 8107e76:	b911      	cbnz	r1, 8107e7e <sbrk_aligned+0x12>
 8107e78:	f000 fe46 	bl	8108b08 <_sbrk_r>
 8107e7c:	6030      	str	r0, [r6, #0]
 8107e7e:	4621      	mov	r1, r4
 8107e80:	4628      	mov	r0, r5
 8107e82:	f000 fe41 	bl	8108b08 <_sbrk_r>
 8107e86:	1c43      	adds	r3, r0, #1
 8107e88:	d103      	bne.n	8107e92 <sbrk_aligned+0x26>
 8107e8a:	f04f 34ff 	mov.w	r4, #4294967295
 8107e8e:	4620      	mov	r0, r4
 8107e90:	bd70      	pop	{r4, r5, r6, pc}
 8107e92:	1cc4      	adds	r4, r0, #3
 8107e94:	f024 0403 	bic.w	r4, r4, #3
 8107e98:	42a0      	cmp	r0, r4
 8107e9a:	d0f8      	beq.n	8107e8e <sbrk_aligned+0x22>
 8107e9c:	1a21      	subs	r1, r4, r0
 8107e9e:	4628      	mov	r0, r5
 8107ea0:	f000 fe32 	bl	8108b08 <_sbrk_r>
 8107ea4:	3001      	adds	r0, #1
 8107ea6:	d1f2      	bne.n	8107e8e <sbrk_aligned+0x22>
 8107ea8:	e7ef      	b.n	8107e8a <sbrk_aligned+0x1e>
 8107eaa:	bf00      	nop
 8107eac:	100008fc 	.word	0x100008fc

08107eb0 <_malloc_r>:
 8107eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8107eb4:	1ccd      	adds	r5, r1, #3
 8107eb6:	f025 0503 	bic.w	r5, r5, #3
 8107eba:	3508      	adds	r5, #8
 8107ebc:	2d0c      	cmp	r5, #12
 8107ebe:	bf38      	it	cc
 8107ec0:	250c      	movcc	r5, #12
 8107ec2:	2d00      	cmp	r5, #0
 8107ec4:	4606      	mov	r6, r0
 8107ec6:	db01      	blt.n	8107ecc <_malloc_r+0x1c>
 8107ec8:	42a9      	cmp	r1, r5
 8107eca:	d904      	bls.n	8107ed6 <_malloc_r+0x26>
 8107ecc:	230c      	movs	r3, #12
 8107ece:	6033      	str	r3, [r6, #0]
 8107ed0:	2000      	movs	r0, #0
 8107ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8107ed6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8107fac <_malloc_r+0xfc>
 8107eda:	f000 f869 	bl	8107fb0 <__malloc_lock>
 8107ede:	f8d8 3000 	ldr.w	r3, [r8]
 8107ee2:	461c      	mov	r4, r3
 8107ee4:	bb44      	cbnz	r4, 8107f38 <_malloc_r+0x88>
 8107ee6:	4629      	mov	r1, r5
 8107ee8:	4630      	mov	r0, r6
 8107eea:	f7ff ffbf 	bl	8107e6c <sbrk_aligned>
 8107eee:	1c43      	adds	r3, r0, #1
 8107ef0:	4604      	mov	r4, r0
 8107ef2:	d158      	bne.n	8107fa6 <_malloc_r+0xf6>
 8107ef4:	f8d8 4000 	ldr.w	r4, [r8]
 8107ef8:	4627      	mov	r7, r4
 8107efa:	2f00      	cmp	r7, #0
 8107efc:	d143      	bne.n	8107f86 <_malloc_r+0xd6>
 8107efe:	2c00      	cmp	r4, #0
 8107f00:	d04b      	beq.n	8107f9a <_malloc_r+0xea>
 8107f02:	6823      	ldr	r3, [r4, #0]
 8107f04:	4639      	mov	r1, r7
 8107f06:	4630      	mov	r0, r6
 8107f08:	eb04 0903 	add.w	r9, r4, r3
 8107f0c:	f000 fdfc 	bl	8108b08 <_sbrk_r>
 8107f10:	4581      	cmp	r9, r0
 8107f12:	d142      	bne.n	8107f9a <_malloc_r+0xea>
 8107f14:	6821      	ldr	r1, [r4, #0]
 8107f16:	1a6d      	subs	r5, r5, r1
 8107f18:	4629      	mov	r1, r5
 8107f1a:	4630      	mov	r0, r6
 8107f1c:	f7ff ffa6 	bl	8107e6c <sbrk_aligned>
 8107f20:	3001      	adds	r0, #1
 8107f22:	d03a      	beq.n	8107f9a <_malloc_r+0xea>
 8107f24:	6823      	ldr	r3, [r4, #0]
 8107f26:	442b      	add	r3, r5
 8107f28:	6023      	str	r3, [r4, #0]
 8107f2a:	f8d8 3000 	ldr.w	r3, [r8]
 8107f2e:	685a      	ldr	r2, [r3, #4]
 8107f30:	bb62      	cbnz	r2, 8107f8c <_malloc_r+0xdc>
 8107f32:	f8c8 7000 	str.w	r7, [r8]
 8107f36:	e00f      	b.n	8107f58 <_malloc_r+0xa8>
 8107f38:	6822      	ldr	r2, [r4, #0]
 8107f3a:	1b52      	subs	r2, r2, r5
 8107f3c:	d420      	bmi.n	8107f80 <_malloc_r+0xd0>
 8107f3e:	2a0b      	cmp	r2, #11
 8107f40:	d917      	bls.n	8107f72 <_malloc_r+0xc2>
 8107f42:	1961      	adds	r1, r4, r5
 8107f44:	42a3      	cmp	r3, r4
 8107f46:	6025      	str	r5, [r4, #0]
 8107f48:	bf18      	it	ne
 8107f4a:	6059      	strne	r1, [r3, #4]
 8107f4c:	6863      	ldr	r3, [r4, #4]
 8107f4e:	bf08      	it	eq
 8107f50:	f8c8 1000 	streq.w	r1, [r8]
 8107f54:	5162      	str	r2, [r4, r5]
 8107f56:	604b      	str	r3, [r1, #4]
 8107f58:	4630      	mov	r0, r6
 8107f5a:	f000 f82f 	bl	8107fbc <__malloc_unlock>
 8107f5e:	f104 000b 	add.w	r0, r4, #11
 8107f62:	1d23      	adds	r3, r4, #4
 8107f64:	f020 0007 	bic.w	r0, r0, #7
 8107f68:	1ac2      	subs	r2, r0, r3
 8107f6a:	bf1c      	itt	ne
 8107f6c:	1a1b      	subne	r3, r3, r0
 8107f6e:	50a3      	strne	r3, [r4, r2]
 8107f70:	e7af      	b.n	8107ed2 <_malloc_r+0x22>
 8107f72:	6862      	ldr	r2, [r4, #4]
 8107f74:	42a3      	cmp	r3, r4
 8107f76:	bf0c      	ite	eq
 8107f78:	f8c8 2000 	streq.w	r2, [r8]
 8107f7c:	605a      	strne	r2, [r3, #4]
 8107f7e:	e7eb      	b.n	8107f58 <_malloc_r+0xa8>
 8107f80:	4623      	mov	r3, r4
 8107f82:	6864      	ldr	r4, [r4, #4]
 8107f84:	e7ae      	b.n	8107ee4 <_malloc_r+0x34>
 8107f86:	463c      	mov	r4, r7
 8107f88:	687f      	ldr	r7, [r7, #4]
 8107f8a:	e7b6      	b.n	8107efa <_malloc_r+0x4a>
 8107f8c:	461a      	mov	r2, r3
 8107f8e:	685b      	ldr	r3, [r3, #4]
 8107f90:	42a3      	cmp	r3, r4
 8107f92:	d1fb      	bne.n	8107f8c <_malloc_r+0xdc>
 8107f94:	2300      	movs	r3, #0
 8107f96:	6053      	str	r3, [r2, #4]
 8107f98:	e7de      	b.n	8107f58 <_malloc_r+0xa8>
 8107f9a:	230c      	movs	r3, #12
 8107f9c:	6033      	str	r3, [r6, #0]
 8107f9e:	4630      	mov	r0, r6
 8107fa0:	f000 f80c 	bl	8107fbc <__malloc_unlock>
 8107fa4:	e794      	b.n	8107ed0 <_malloc_r+0x20>
 8107fa6:	6005      	str	r5, [r0, #0]
 8107fa8:	e7d6      	b.n	8107f58 <_malloc_r+0xa8>
 8107faa:	bf00      	nop
 8107fac:	10000900 	.word	0x10000900

08107fb0 <__malloc_lock>:
 8107fb0:	4801      	ldr	r0, [pc, #4]	@ (8107fb8 <__malloc_lock+0x8>)
 8107fb2:	f7ff b8b8 	b.w	8107126 <__retarget_lock_acquire_recursive>
 8107fb6:	bf00      	nop
 8107fb8:	100008f8 	.word	0x100008f8

08107fbc <__malloc_unlock>:
 8107fbc:	4801      	ldr	r0, [pc, #4]	@ (8107fc4 <__malloc_unlock+0x8>)
 8107fbe:	f7ff b8b3 	b.w	8107128 <__retarget_lock_release_recursive>
 8107fc2:	bf00      	nop
 8107fc4:	100008f8 	.word	0x100008f8

08107fc8 <_Balloc>:
 8107fc8:	b570      	push	{r4, r5, r6, lr}
 8107fca:	69c6      	ldr	r6, [r0, #28]
 8107fcc:	4604      	mov	r4, r0
 8107fce:	460d      	mov	r5, r1
 8107fd0:	b976      	cbnz	r6, 8107ff0 <_Balloc+0x28>
 8107fd2:	2010      	movs	r0, #16
 8107fd4:	f7ff ff42 	bl	8107e5c <malloc>
 8107fd8:	4602      	mov	r2, r0
 8107fda:	61e0      	str	r0, [r4, #28]
 8107fdc:	b920      	cbnz	r0, 8107fe8 <_Balloc+0x20>
 8107fde:	4b18      	ldr	r3, [pc, #96]	@ (8108040 <_Balloc+0x78>)
 8107fe0:	4818      	ldr	r0, [pc, #96]	@ (8108044 <_Balloc+0x7c>)
 8107fe2:	216b      	movs	r1, #107	@ 0x6b
 8107fe4:	f000 fdae 	bl	8108b44 <__assert_func>
 8107fe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8107fec:	6006      	str	r6, [r0, #0]
 8107fee:	60c6      	str	r6, [r0, #12]
 8107ff0:	69e6      	ldr	r6, [r4, #28]
 8107ff2:	68f3      	ldr	r3, [r6, #12]
 8107ff4:	b183      	cbz	r3, 8108018 <_Balloc+0x50>
 8107ff6:	69e3      	ldr	r3, [r4, #28]
 8107ff8:	68db      	ldr	r3, [r3, #12]
 8107ffa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8107ffe:	b9b8      	cbnz	r0, 8108030 <_Balloc+0x68>
 8108000:	2101      	movs	r1, #1
 8108002:	fa01 f605 	lsl.w	r6, r1, r5
 8108006:	1d72      	adds	r2, r6, #5
 8108008:	0092      	lsls	r2, r2, #2
 810800a:	4620      	mov	r0, r4
 810800c:	f000 fdb8 	bl	8108b80 <_calloc_r>
 8108010:	b160      	cbz	r0, 810802c <_Balloc+0x64>
 8108012:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8108016:	e00e      	b.n	8108036 <_Balloc+0x6e>
 8108018:	2221      	movs	r2, #33	@ 0x21
 810801a:	2104      	movs	r1, #4
 810801c:	4620      	mov	r0, r4
 810801e:	f000 fdaf 	bl	8108b80 <_calloc_r>
 8108022:	69e3      	ldr	r3, [r4, #28]
 8108024:	60f0      	str	r0, [r6, #12]
 8108026:	68db      	ldr	r3, [r3, #12]
 8108028:	2b00      	cmp	r3, #0
 810802a:	d1e4      	bne.n	8107ff6 <_Balloc+0x2e>
 810802c:	2000      	movs	r0, #0
 810802e:	bd70      	pop	{r4, r5, r6, pc}
 8108030:	6802      	ldr	r2, [r0, #0]
 8108032:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8108036:	2300      	movs	r3, #0
 8108038:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810803c:	e7f7      	b.n	810802e <_Balloc+0x66>
 810803e:	bf00      	nop
 8108040:	08109261 	.word	0x08109261
 8108044:	081092e1 	.word	0x081092e1

08108048 <_Bfree>:
 8108048:	b570      	push	{r4, r5, r6, lr}
 810804a:	69c6      	ldr	r6, [r0, #28]
 810804c:	4605      	mov	r5, r0
 810804e:	460c      	mov	r4, r1
 8108050:	b976      	cbnz	r6, 8108070 <_Bfree+0x28>
 8108052:	2010      	movs	r0, #16
 8108054:	f7ff ff02 	bl	8107e5c <malloc>
 8108058:	4602      	mov	r2, r0
 810805a:	61e8      	str	r0, [r5, #28]
 810805c:	b920      	cbnz	r0, 8108068 <_Bfree+0x20>
 810805e:	4b09      	ldr	r3, [pc, #36]	@ (8108084 <_Bfree+0x3c>)
 8108060:	4809      	ldr	r0, [pc, #36]	@ (8108088 <_Bfree+0x40>)
 8108062:	218f      	movs	r1, #143	@ 0x8f
 8108064:	f000 fd6e 	bl	8108b44 <__assert_func>
 8108068:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810806c:	6006      	str	r6, [r0, #0]
 810806e:	60c6      	str	r6, [r0, #12]
 8108070:	b13c      	cbz	r4, 8108082 <_Bfree+0x3a>
 8108072:	69eb      	ldr	r3, [r5, #28]
 8108074:	6862      	ldr	r2, [r4, #4]
 8108076:	68db      	ldr	r3, [r3, #12]
 8108078:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810807c:	6021      	str	r1, [r4, #0]
 810807e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8108082:	bd70      	pop	{r4, r5, r6, pc}
 8108084:	08109261 	.word	0x08109261
 8108088:	081092e1 	.word	0x081092e1

0810808c <__multadd>:
 810808c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108090:	690d      	ldr	r5, [r1, #16]
 8108092:	4607      	mov	r7, r0
 8108094:	460c      	mov	r4, r1
 8108096:	461e      	mov	r6, r3
 8108098:	f101 0c14 	add.w	ip, r1, #20
 810809c:	2000      	movs	r0, #0
 810809e:	f8dc 3000 	ldr.w	r3, [ip]
 81080a2:	b299      	uxth	r1, r3
 81080a4:	fb02 6101 	mla	r1, r2, r1, r6
 81080a8:	0c1e      	lsrs	r6, r3, #16
 81080aa:	0c0b      	lsrs	r3, r1, #16
 81080ac:	fb02 3306 	mla	r3, r2, r6, r3
 81080b0:	b289      	uxth	r1, r1
 81080b2:	3001      	adds	r0, #1
 81080b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 81080b8:	4285      	cmp	r5, r0
 81080ba:	f84c 1b04 	str.w	r1, [ip], #4
 81080be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 81080c2:	dcec      	bgt.n	810809e <__multadd+0x12>
 81080c4:	b30e      	cbz	r6, 810810a <__multadd+0x7e>
 81080c6:	68a3      	ldr	r3, [r4, #8]
 81080c8:	42ab      	cmp	r3, r5
 81080ca:	dc19      	bgt.n	8108100 <__multadd+0x74>
 81080cc:	6861      	ldr	r1, [r4, #4]
 81080ce:	4638      	mov	r0, r7
 81080d0:	3101      	adds	r1, #1
 81080d2:	f7ff ff79 	bl	8107fc8 <_Balloc>
 81080d6:	4680      	mov	r8, r0
 81080d8:	b928      	cbnz	r0, 81080e6 <__multadd+0x5a>
 81080da:	4602      	mov	r2, r0
 81080dc:	4b0c      	ldr	r3, [pc, #48]	@ (8108110 <__multadd+0x84>)
 81080de:	480d      	ldr	r0, [pc, #52]	@ (8108114 <__multadd+0x88>)
 81080e0:	21ba      	movs	r1, #186	@ 0xba
 81080e2:	f000 fd2f 	bl	8108b44 <__assert_func>
 81080e6:	6922      	ldr	r2, [r4, #16]
 81080e8:	3202      	adds	r2, #2
 81080ea:	f104 010c 	add.w	r1, r4, #12
 81080ee:	0092      	lsls	r2, r2, #2
 81080f0:	300c      	adds	r0, #12
 81080f2:	f000 fd19 	bl	8108b28 <memcpy>
 81080f6:	4621      	mov	r1, r4
 81080f8:	4638      	mov	r0, r7
 81080fa:	f7ff ffa5 	bl	8108048 <_Bfree>
 81080fe:	4644      	mov	r4, r8
 8108100:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8108104:	3501      	adds	r5, #1
 8108106:	615e      	str	r6, [r3, #20]
 8108108:	6125      	str	r5, [r4, #16]
 810810a:	4620      	mov	r0, r4
 810810c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8108110:	081092d0 	.word	0x081092d0
 8108114:	081092e1 	.word	0x081092e1

08108118 <__hi0bits>:
 8108118:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 810811c:	4603      	mov	r3, r0
 810811e:	bf36      	itet	cc
 8108120:	0403      	lslcc	r3, r0, #16
 8108122:	2000      	movcs	r0, #0
 8108124:	2010      	movcc	r0, #16
 8108126:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810812a:	bf3c      	itt	cc
 810812c:	021b      	lslcc	r3, r3, #8
 810812e:	3008      	addcc	r0, #8
 8108130:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8108134:	bf3c      	itt	cc
 8108136:	011b      	lslcc	r3, r3, #4
 8108138:	3004      	addcc	r0, #4
 810813a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810813e:	bf3c      	itt	cc
 8108140:	009b      	lslcc	r3, r3, #2
 8108142:	3002      	addcc	r0, #2
 8108144:	2b00      	cmp	r3, #0
 8108146:	db05      	blt.n	8108154 <__hi0bits+0x3c>
 8108148:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 810814c:	f100 0001 	add.w	r0, r0, #1
 8108150:	bf08      	it	eq
 8108152:	2020      	moveq	r0, #32
 8108154:	4770      	bx	lr

08108156 <__lo0bits>:
 8108156:	6803      	ldr	r3, [r0, #0]
 8108158:	4602      	mov	r2, r0
 810815a:	f013 0007 	ands.w	r0, r3, #7
 810815e:	d00b      	beq.n	8108178 <__lo0bits+0x22>
 8108160:	07d9      	lsls	r1, r3, #31
 8108162:	d421      	bmi.n	81081a8 <__lo0bits+0x52>
 8108164:	0798      	lsls	r0, r3, #30
 8108166:	bf49      	itett	mi
 8108168:	085b      	lsrmi	r3, r3, #1
 810816a:	089b      	lsrpl	r3, r3, #2
 810816c:	2001      	movmi	r0, #1
 810816e:	6013      	strmi	r3, [r2, #0]
 8108170:	bf5c      	itt	pl
 8108172:	6013      	strpl	r3, [r2, #0]
 8108174:	2002      	movpl	r0, #2
 8108176:	4770      	bx	lr
 8108178:	b299      	uxth	r1, r3
 810817a:	b909      	cbnz	r1, 8108180 <__lo0bits+0x2a>
 810817c:	0c1b      	lsrs	r3, r3, #16
 810817e:	2010      	movs	r0, #16
 8108180:	b2d9      	uxtb	r1, r3
 8108182:	b909      	cbnz	r1, 8108188 <__lo0bits+0x32>
 8108184:	3008      	adds	r0, #8
 8108186:	0a1b      	lsrs	r3, r3, #8
 8108188:	0719      	lsls	r1, r3, #28
 810818a:	bf04      	itt	eq
 810818c:	091b      	lsreq	r3, r3, #4
 810818e:	3004      	addeq	r0, #4
 8108190:	0799      	lsls	r1, r3, #30
 8108192:	bf04      	itt	eq
 8108194:	089b      	lsreq	r3, r3, #2
 8108196:	3002      	addeq	r0, #2
 8108198:	07d9      	lsls	r1, r3, #31
 810819a:	d403      	bmi.n	81081a4 <__lo0bits+0x4e>
 810819c:	085b      	lsrs	r3, r3, #1
 810819e:	f100 0001 	add.w	r0, r0, #1
 81081a2:	d003      	beq.n	81081ac <__lo0bits+0x56>
 81081a4:	6013      	str	r3, [r2, #0]
 81081a6:	4770      	bx	lr
 81081a8:	2000      	movs	r0, #0
 81081aa:	4770      	bx	lr
 81081ac:	2020      	movs	r0, #32
 81081ae:	4770      	bx	lr

081081b0 <__i2b>:
 81081b0:	b510      	push	{r4, lr}
 81081b2:	460c      	mov	r4, r1
 81081b4:	2101      	movs	r1, #1
 81081b6:	f7ff ff07 	bl	8107fc8 <_Balloc>
 81081ba:	4602      	mov	r2, r0
 81081bc:	b928      	cbnz	r0, 81081ca <__i2b+0x1a>
 81081be:	4b05      	ldr	r3, [pc, #20]	@ (81081d4 <__i2b+0x24>)
 81081c0:	4805      	ldr	r0, [pc, #20]	@ (81081d8 <__i2b+0x28>)
 81081c2:	f240 1145 	movw	r1, #325	@ 0x145
 81081c6:	f000 fcbd 	bl	8108b44 <__assert_func>
 81081ca:	2301      	movs	r3, #1
 81081cc:	6144      	str	r4, [r0, #20]
 81081ce:	6103      	str	r3, [r0, #16]
 81081d0:	bd10      	pop	{r4, pc}
 81081d2:	bf00      	nop
 81081d4:	081092d0 	.word	0x081092d0
 81081d8:	081092e1 	.word	0x081092e1

081081dc <__multiply>:
 81081dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81081e0:	4614      	mov	r4, r2
 81081e2:	690a      	ldr	r2, [r1, #16]
 81081e4:	6923      	ldr	r3, [r4, #16]
 81081e6:	429a      	cmp	r2, r3
 81081e8:	bfa8      	it	ge
 81081ea:	4623      	movge	r3, r4
 81081ec:	460f      	mov	r7, r1
 81081ee:	bfa4      	itt	ge
 81081f0:	460c      	movge	r4, r1
 81081f2:	461f      	movge	r7, r3
 81081f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 81081f8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 81081fc:	68a3      	ldr	r3, [r4, #8]
 81081fe:	6861      	ldr	r1, [r4, #4]
 8108200:	eb0a 0609 	add.w	r6, sl, r9
 8108204:	42b3      	cmp	r3, r6
 8108206:	b085      	sub	sp, #20
 8108208:	bfb8      	it	lt
 810820a:	3101      	addlt	r1, #1
 810820c:	f7ff fedc 	bl	8107fc8 <_Balloc>
 8108210:	b930      	cbnz	r0, 8108220 <__multiply+0x44>
 8108212:	4602      	mov	r2, r0
 8108214:	4b44      	ldr	r3, [pc, #272]	@ (8108328 <__multiply+0x14c>)
 8108216:	4845      	ldr	r0, [pc, #276]	@ (810832c <__multiply+0x150>)
 8108218:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 810821c:	f000 fc92 	bl	8108b44 <__assert_func>
 8108220:	f100 0514 	add.w	r5, r0, #20
 8108224:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8108228:	462b      	mov	r3, r5
 810822a:	2200      	movs	r2, #0
 810822c:	4543      	cmp	r3, r8
 810822e:	d321      	bcc.n	8108274 <__multiply+0x98>
 8108230:	f107 0114 	add.w	r1, r7, #20
 8108234:	f104 0214 	add.w	r2, r4, #20
 8108238:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 810823c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8108240:	9302      	str	r3, [sp, #8]
 8108242:	1b13      	subs	r3, r2, r4
 8108244:	3b15      	subs	r3, #21
 8108246:	f023 0303 	bic.w	r3, r3, #3
 810824a:	3304      	adds	r3, #4
 810824c:	f104 0715 	add.w	r7, r4, #21
 8108250:	42ba      	cmp	r2, r7
 8108252:	bf38      	it	cc
 8108254:	2304      	movcc	r3, #4
 8108256:	9301      	str	r3, [sp, #4]
 8108258:	9b02      	ldr	r3, [sp, #8]
 810825a:	9103      	str	r1, [sp, #12]
 810825c:	428b      	cmp	r3, r1
 810825e:	d80c      	bhi.n	810827a <__multiply+0x9e>
 8108260:	2e00      	cmp	r6, #0
 8108262:	dd03      	ble.n	810826c <__multiply+0x90>
 8108264:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8108268:	2b00      	cmp	r3, #0
 810826a:	d05b      	beq.n	8108324 <__multiply+0x148>
 810826c:	6106      	str	r6, [r0, #16]
 810826e:	b005      	add	sp, #20
 8108270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108274:	f843 2b04 	str.w	r2, [r3], #4
 8108278:	e7d8      	b.n	810822c <__multiply+0x50>
 810827a:	f8b1 a000 	ldrh.w	sl, [r1]
 810827e:	f1ba 0f00 	cmp.w	sl, #0
 8108282:	d024      	beq.n	81082ce <__multiply+0xf2>
 8108284:	f104 0e14 	add.w	lr, r4, #20
 8108288:	46a9      	mov	r9, r5
 810828a:	f04f 0c00 	mov.w	ip, #0
 810828e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8108292:	f8d9 3000 	ldr.w	r3, [r9]
 8108296:	fa1f fb87 	uxth.w	fp, r7
 810829a:	b29b      	uxth	r3, r3
 810829c:	fb0a 330b 	mla	r3, sl, fp, r3
 81082a0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 81082a4:	f8d9 7000 	ldr.w	r7, [r9]
 81082a8:	4463      	add	r3, ip
 81082aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 81082ae:	fb0a c70b 	mla	r7, sl, fp, ip
 81082b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 81082b6:	b29b      	uxth	r3, r3
 81082b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 81082bc:	4572      	cmp	r2, lr
 81082be:	f849 3b04 	str.w	r3, [r9], #4
 81082c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 81082c6:	d8e2      	bhi.n	810828e <__multiply+0xb2>
 81082c8:	9b01      	ldr	r3, [sp, #4]
 81082ca:	f845 c003 	str.w	ip, [r5, r3]
 81082ce:	9b03      	ldr	r3, [sp, #12]
 81082d0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 81082d4:	3104      	adds	r1, #4
 81082d6:	f1b9 0f00 	cmp.w	r9, #0
 81082da:	d021      	beq.n	8108320 <__multiply+0x144>
 81082dc:	682b      	ldr	r3, [r5, #0]
 81082de:	f104 0c14 	add.w	ip, r4, #20
 81082e2:	46ae      	mov	lr, r5
 81082e4:	f04f 0a00 	mov.w	sl, #0
 81082e8:	f8bc b000 	ldrh.w	fp, [ip]
 81082ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 81082f0:	fb09 770b 	mla	r7, r9, fp, r7
 81082f4:	4457      	add	r7, sl
 81082f6:	b29b      	uxth	r3, r3
 81082f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 81082fc:	f84e 3b04 	str.w	r3, [lr], #4
 8108300:	f85c 3b04 	ldr.w	r3, [ip], #4
 8108304:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8108308:	f8be 3000 	ldrh.w	r3, [lr]
 810830c:	fb09 330a 	mla	r3, r9, sl, r3
 8108310:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8108314:	4562      	cmp	r2, ip
 8108316:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 810831a:	d8e5      	bhi.n	81082e8 <__multiply+0x10c>
 810831c:	9f01      	ldr	r7, [sp, #4]
 810831e:	51eb      	str	r3, [r5, r7]
 8108320:	3504      	adds	r5, #4
 8108322:	e799      	b.n	8108258 <__multiply+0x7c>
 8108324:	3e01      	subs	r6, #1
 8108326:	e79b      	b.n	8108260 <__multiply+0x84>
 8108328:	081092d0 	.word	0x081092d0
 810832c:	081092e1 	.word	0x081092e1

08108330 <__pow5mult>:
 8108330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108334:	4615      	mov	r5, r2
 8108336:	f012 0203 	ands.w	r2, r2, #3
 810833a:	4607      	mov	r7, r0
 810833c:	460e      	mov	r6, r1
 810833e:	d007      	beq.n	8108350 <__pow5mult+0x20>
 8108340:	4c25      	ldr	r4, [pc, #148]	@ (81083d8 <__pow5mult+0xa8>)
 8108342:	3a01      	subs	r2, #1
 8108344:	2300      	movs	r3, #0
 8108346:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810834a:	f7ff fe9f 	bl	810808c <__multadd>
 810834e:	4606      	mov	r6, r0
 8108350:	10ad      	asrs	r5, r5, #2
 8108352:	d03d      	beq.n	81083d0 <__pow5mult+0xa0>
 8108354:	69fc      	ldr	r4, [r7, #28]
 8108356:	b97c      	cbnz	r4, 8108378 <__pow5mult+0x48>
 8108358:	2010      	movs	r0, #16
 810835a:	f7ff fd7f 	bl	8107e5c <malloc>
 810835e:	4602      	mov	r2, r0
 8108360:	61f8      	str	r0, [r7, #28]
 8108362:	b928      	cbnz	r0, 8108370 <__pow5mult+0x40>
 8108364:	4b1d      	ldr	r3, [pc, #116]	@ (81083dc <__pow5mult+0xac>)
 8108366:	481e      	ldr	r0, [pc, #120]	@ (81083e0 <__pow5mult+0xb0>)
 8108368:	f240 11b3 	movw	r1, #435	@ 0x1b3
 810836c:	f000 fbea 	bl	8108b44 <__assert_func>
 8108370:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8108374:	6004      	str	r4, [r0, #0]
 8108376:	60c4      	str	r4, [r0, #12]
 8108378:	f8d7 801c 	ldr.w	r8, [r7, #28]
 810837c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8108380:	b94c      	cbnz	r4, 8108396 <__pow5mult+0x66>
 8108382:	f240 2171 	movw	r1, #625	@ 0x271
 8108386:	4638      	mov	r0, r7
 8108388:	f7ff ff12 	bl	81081b0 <__i2b>
 810838c:	2300      	movs	r3, #0
 810838e:	f8c8 0008 	str.w	r0, [r8, #8]
 8108392:	4604      	mov	r4, r0
 8108394:	6003      	str	r3, [r0, #0]
 8108396:	f04f 0900 	mov.w	r9, #0
 810839a:	07eb      	lsls	r3, r5, #31
 810839c:	d50a      	bpl.n	81083b4 <__pow5mult+0x84>
 810839e:	4631      	mov	r1, r6
 81083a0:	4622      	mov	r2, r4
 81083a2:	4638      	mov	r0, r7
 81083a4:	f7ff ff1a 	bl	81081dc <__multiply>
 81083a8:	4631      	mov	r1, r6
 81083aa:	4680      	mov	r8, r0
 81083ac:	4638      	mov	r0, r7
 81083ae:	f7ff fe4b 	bl	8108048 <_Bfree>
 81083b2:	4646      	mov	r6, r8
 81083b4:	106d      	asrs	r5, r5, #1
 81083b6:	d00b      	beq.n	81083d0 <__pow5mult+0xa0>
 81083b8:	6820      	ldr	r0, [r4, #0]
 81083ba:	b938      	cbnz	r0, 81083cc <__pow5mult+0x9c>
 81083bc:	4622      	mov	r2, r4
 81083be:	4621      	mov	r1, r4
 81083c0:	4638      	mov	r0, r7
 81083c2:	f7ff ff0b 	bl	81081dc <__multiply>
 81083c6:	6020      	str	r0, [r4, #0]
 81083c8:	f8c0 9000 	str.w	r9, [r0]
 81083cc:	4604      	mov	r4, r0
 81083ce:	e7e4      	b.n	810839a <__pow5mult+0x6a>
 81083d0:	4630      	mov	r0, r6
 81083d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81083d6:	bf00      	nop
 81083d8:	0810933c 	.word	0x0810933c
 81083dc:	08109261 	.word	0x08109261
 81083e0:	081092e1 	.word	0x081092e1

081083e4 <__lshift>:
 81083e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81083e8:	460c      	mov	r4, r1
 81083ea:	6849      	ldr	r1, [r1, #4]
 81083ec:	6923      	ldr	r3, [r4, #16]
 81083ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 81083f2:	68a3      	ldr	r3, [r4, #8]
 81083f4:	4607      	mov	r7, r0
 81083f6:	4691      	mov	r9, r2
 81083f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 81083fc:	f108 0601 	add.w	r6, r8, #1
 8108400:	42b3      	cmp	r3, r6
 8108402:	db0b      	blt.n	810841c <__lshift+0x38>
 8108404:	4638      	mov	r0, r7
 8108406:	f7ff fddf 	bl	8107fc8 <_Balloc>
 810840a:	4605      	mov	r5, r0
 810840c:	b948      	cbnz	r0, 8108422 <__lshift+0x3e>
 810840e:	4602      	mov	r2, r0
 8108410:	4b28      	ldr	r3, [pc, #160]	@ (81084b4 <__lshift+0xd0>)
 8108412:	4829      	ldr	r0, [pc, #164]	@ (81084b8 <__lshift+0xd4>)
 8108414:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8108418:	f000 fb94 	bl	8108b44 <__assert_func>
 810841c:	3101      	adds	r1, #1
 810841e:	005b      	lsls	r3, r3, #1
 8108420:	e7ee      	b.n	8108400 <__lshift+0x1c>
 8108422:	2300      	movs	r3, #0
 8108424:	f100 0114 	add.w	r1, r0, #20
 8108428:	f100 0210 	add.w	r2, r0, #16
 810842c:	4618      	mov	r0, r3
 810842e:	4553      	cmp	r3, sl
 8108430:	db33      	blt.n	810849a <__lshift+0xb6>
 8108432:	6920      	ldr	r0, [r4, #16]
 8108434:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8108438:	f104 0314 	add.w	r3, r4, #20
 810843c:	f019 091f 	ands.w	r9, r9, #31
 8108440:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8108444:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8108448:	d02b      	beq.n	81084a2 <__lshift+0xbe>
 810844a:	f1c9 0e20 	rsb	lr, r9, #32
 810844e:	468a      	mov	sl, r1
 8108450:	2200      	movs	r2, #0
 8108452:	6818      	ldr	r0, [r3, #0]
 8108454:	fa00 f009 	lsl.w	r0, r0, r9
 8108458:	4310      	orrs	r0, r2
 810845a:	f84a 0b04 	str.w	r0, [sl], #4
 810845e:	f853 2b04 	ldr.w	r2, [r3], #4
 8108462:	459c      	cmp	ip, r3
 8108464:	fa22 f20e 	lsr.w	r2, r2, lr
 8108468:	d8f3      	bhi.n	8108452 <__lshift+0x6e>
 810846a:	ebac 0304 	sub.w	r3, ip, r4
 810846e:	3b15      	subs	r3, #21
 8108470:	f023 0303 	bic.w	r3, r3, #3
 8108474:	3304      	adds	r3, #4
 8108476:	f104 0015 	add.w	r0, r4, #21
 810847a:	4584      	cmp	ip, r0
 810847c:	bf38      	it	cc
 810847e:	2304      	movcc	r3, #4
 8108480:	50ca      	str	r2, [r1, r3]
 8108482:	b10a      	cbz	r2, 8108488 <__lshift+0xa4>
 8108484:	f108 0602 	add.w	r6, r8, #2
 8108488:	3e01      	subs	r6, #1
 810848a:	4638      	mov	r0, r7
 810848c:	612e      	str	r6, [r5, #16]
 810848e:	4621      	mov	r1, r4
 8108490:	f7ff fdda 	bl	8108048 <_Bfree>
 8108494:	4628      	mov	r0, r5
 8108496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810849a:	f842 0f04 	str.w	r0, [r2, #4]!
 810849e:	3301      	adds	r3, #1
 81084a0:	e7c5      	b.n	810842e <__lshift+0x4a>
 81084a2:	3904      	subs	r1, #4
 81084a4:	f853 2b04 	ldr.w	r2, [r3], #4
 81084a8:	f841 2f04 	str.w	r2, [r1, #4]!
 81084ac:	459c      	cmp	ip, r3
 81084ae:	d8f9      	bhi.n	81084a4 <__lshift+0xc0>
 81084b0:	e7ea      	b.n	8108488 <__lshift+0xa4>
 81084b2:	bf00      	nop
 81084b4:	081092d0 	.word	0x081092d0
 81084b8:	081092e1 	.word	0x081092e1

081084bc <__mcmp>:
 81084bc:	690a      	ldr	r2, [r1, #16]
 81084be:	4603      	mov	r3, r0
 81084c0:	6900      	ldr	r0, [r0, #16]
 81084c2:	1a80      	subs	r0, r0, r2
 81084c4:	b530      	push	{r4, r5, lr}
 81084c6:	d10e      	bne.n	81084e6 <__mcmp+0x2a>
 81084c8:	3314      	adds	r3, #20
 81084ca:	3114      	adds	r1, #20
 81084cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 81084d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 81084d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 81084d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 81084dc:	4295      	cmp	r5, r2
 81084de:	d003      	beq.n	81084e8 <__mcmp+0x2c>
 81084e0:	d205      	bcs.n	81084ee <__mcmp+0x32>
 81084e2:	f04f 30ff 	mov.w	r0, #4294967295
 81084e6:	bd30      	pop	{r4, r5, pc}
 81084e8:	42a3      	cmp	r3, r4
 81084ea:	d3f3      	bcc.n	81084d4 <__mcmp+0x18>
 81084ec:	e7fb      	b.n	81084e6 <__mcmp+0x2a>
 81084ee:	2001      	movs	r0, #1
 81084f0:	e7f9      	b.n	81084e6 <__mcmp+0x2a>
	...

081084f4 <__mdiff>:
 81084f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81084f8:	4689      	mov	r9, r1
 81084fa:	4606      	mov	r6, r0
 81084fc:	4611      	mov	r1, r2
 81084fe:	4648      	mov	r0, r9
 8108500:	4614      	mov	r4, r2
 8108502:	f7ff ffdb 	bl	81084bc <__mcmp>
 8108506:	1e05      	subs	r5, r0, #0
 8108508:	d112      	bne.n	8108530 <__mdiff+0x3c>
 810850a:	4629      	mov	r1, r5
 810850c:	4630      	mov	r0, r6
 810850e:	f7ff fd5b 	bl	8107fc8 <_Balloc>
 8108512:	4602      	mov	r2, r0
 8108514:	b928      	cbnz	r0, 8108522 <__mdiff+0x2e>
 8108516:	4b3f      	ldr	r3, [pc, #252]	@ (8108614 <__mdiff+0x120>)
 8108518:	f240 2137 	movw	r1, #567	@ 0x237
 810851c:	483e      	ldr	r0, [pc, #248]	@ (8108618 <__mdiff+0x124>)
 810851e:	f000 fb11 	bl	8108b44 <__assert_func>
 8108522:	2301      	movs	r3, #1
 8108524:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8108528:	4610      	mov	r0, r2
 810852a:	b003      	add	sp, #12
 810852c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108530:	bfbc      	itt	lt
 8108532:	464b      	movlt	r3, r9
 8108534:	46a1      	movlt	r9, r4
 8108536:	4630      	mov	r0, r6
 8108538:	f8d9 1004 	ldr.w	r1, [r9, #4]
 810853c:	bfba      	itte	lt
 810853e:	461c      	movlt	r4, r3
 8108540:	2501      	movlt	r5, #1
 8108542:	2500      	movge	r5, #0
 8108544:	f7ff fd40 	bl	8107fc8 <_Balloc>
 8108548:	4602      	mov	r2, r0
 810854a:	b918      	cbnz	r0, 8108554 <__mdiff+0x60>
 810854c:	4b31      	ldr	r3, [pc, #196]	@ (8108614 <__mdiff+0x120>)
 810854e:	f240 2145 	movw	r1, #581	@ 0x245
 8108552:	e7e3      	b.n	810851c <__mdiff+0x28>
 8108554:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8108558:	6926      	ldr	r6, [r4, #16]
 810855a:	60c5      	str	r5, [r0, #12]
 810855c:	f109 0310 	add.w	r3, r9, #16
 8108560:	f109 0514 	add.w	r5, r9, #20
 8108564:	f104 0e14 	add.w	lr, r4, #20
 8108568:	f100 0b14 	add.w	fp, r0, #20
 810856c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8108570:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8108574:	9301      	str	r3, [sp, #4]
 8108576:	46d9      	mov	r9, fp
 8108578:	f04f 0c00 	mov.w	ip, #0
 810857c:	9b01      	ldr	r3, [sp, #4]
 810857e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8108582:	f853 af04 	ldr.w	sl, [r3, #4]!
 8108586:	9301      	str	r3, [sp, #4]
 8108588:	fa1f f38a 	uxth.w	r3, sl
 810858c:	4619      	mov	r1, r3
 810858e:	b283      	uxth	r3, r0
 8108590:	1acb      	subs	r3, r1, r3
 8108592:	0c00      	lsrs	r0, r0, #16
 8108594:	4463      	add	r3, ip
 8108596:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 810859a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 810859e:	b29b      	uxth	r3, r3
 81085a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 81085a4:	4576      	cmp	r6, lr
 81085a6:	f849 3b04 	str.w	r3, [r9], #4
 81085aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 81085ae:	d8e5      	bhi.n	810857c <__mdiff+0x88>
 81085b0:	1b33      	subs	r3, r6, r4
 81085b2:	3b15      	subs	r3, #21
 81085b4:	f023 0303 	bic.w	r3, r3, #3
 81085b8:	3415      	adds	r4, #21
 81085ba:	3304      	adds	r3, #4
 81085bc:	42a6      	cmp	r6, r4
 81085be:	bf38      	it	cc
 81085c0:	2304      	movcc	r3, #4
 81085c2:	441d      	add	r5, r3
 81085c4:	445b      	add	r3, fp
 81085c6:	461e      	mov	r6, r3
 81085c8:	462c      	mov	r4, r5
 81085ca:	4544      	cmp	r4, r8
 81085cc:	d30e      	bcc.n	81085ec <__mdiff+0xf8>
 81085ce:	f108 0103 	add.w	r1, r8, #3
 81085d2:	1b49      	subs	r1, r1, r5
 81085d4:	f021 0103 	bic.w	r1, r1, #3
 81085d8:	3d03      	subs	r5, #3
 81085da:	45a8      	cmp	r8, r5
 81085dc:	bf38      	it	cc
 81085de:	2100      	movcc	r1, #0
 81085e0:	440b      	add	r3, r1
 81085e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 81085e6:	b191      	cbz	r1, 810860e <__mdiff+0x11a>
 81085e8:	6117      	str	r7, [r2, #16]
 81085ea:	e79d      	b.n	8108528 <__mdiff+0x34>
 81085ec:	f854 1b04 	ldr.w	r1, [r4], #4
 81085f0:	46e6      	mov	lr, ip
 81085f2:	0c08      	lsrs	r0, r1, #16
 81085f4:	fa1c fc81 	uxtah	ip, ip, r1
 81085f8:	4471      	add	r1, lr
 81085fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 81085fe:	b289      	uxth	r1, r1
 8108600:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8108604:	f846 1b04 	str.w	r1, [r6], #4
 8108608:	ea4f 4c20 	mov.w	ip, r0, asr #16
 810860c:	e7dd      	b.n	81085ca <__mdiff+0xd6>
 810860e:	3f01      	subs	r7, #1
 8108610:	e7e7      	b.n	81085e2 <__mdiff+0xee>
 8108612:	bf00      	nop
 8108614:	081092d0 	.word	0x081092d0
 8108618:	081092e1 	.word	0x081092e1

0810861c <__d2b>:
 810861c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8108620:	460f      	mov	r7, r1
 8108622:	2101      	movs	r1, #1
 8108624:	ec59 8b10 	vmov	r8, r9, d0
 8108628:	4616      	mov	r6, r2
 810862a:	f7ff fccd 	bl	8107fc8 <_Balloc>
 810862e:	4604      	mov	r4, r0
 8108630:	b930      	cbnz	r0, 8108640 <__d2b+0x24>
 8108632:	4602      	mov	r2, r0
 8108634:	4b23      	ldr	r3, [pc, #140]	@ (81086c4 <__d2b+0xa8>)
 8108636:	4824      	ldr	r0, [pc, #144]	@ (81086c8 <__d2b+0xac>)
 8108638:	f240 310f 	movw	r1, #783	@ 0x30f
 810863c:	f000 fa82 	bl	8108b44 <__assert_func>
 8108640:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8108644:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8108648:	b10d      	cbz	r5, 810864e <__d2b+0x32>
 810864a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 810864e:	9301      	str	r3, [sp, #4]
 8108650:	f1b8 0300 	subs.w	r3, r8, #0
 8108654:	d023      	beq.n	810869e <__d2b+0x82>
 8108656:	4668      	mov	r0, sp
 8108658:	9300      	str	r3, [sp, #0]
 810865a:	f7ff fd7c 	bl	8108156 <__lo0bits>
 810865e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8108662:	b1d0      	cbz	r0, 810869a <__d2b+0x7e>
 8108664:	f1c0 0320 	rsb	r3, r0, #32
 8108668:	fa02 f303 	lsl.w	r3, r2, r3
 810866c:	430b      	orrs	r3, r1
 810866e:	40c2      	lsrs	r2, r0
 8108670:	6163      	str	r3, [r4, #20]
 8108672:	9201      	str	r2, [sp, #4]
 8108674:	9b01      	ldr	r3, [sp, #4]
 8108676:	61a3      	str	r3, [r4, #24]
 8108678:	2b00      	cmp	r3, #0
 810867a:	bf0c      	ite	eq
 810867c:	2201      	moveq	r2, #1
 810867e:	2202      	movne	r2, #2
 8108680:	6122      	str	r2, [r4, #16]
 8108682:	b1a5      	cbz	r5, 81086ae <__d2b+0x92>
 8108684:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8108688:	4405      	add	r5, r0
 810868a:	603d      	str	r5, [r7, #0]
 810868c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8108690:	6030      	str	r0, [r6, #0]
 8108692:	4620      	mov	r0, r4
 8108694:	b003      	add	sp, #12
 8108696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810869a:	6161      	str	r1, [r4, #20]
 810869c:	e7ea      	b.n	8108674 <__d2b+0x58>
 810869e:	a801      	add	r0, sp, #4
 81086a0:	f7ff fd59 	bl	8108156 <__lo0bits>
 81086a4:	9b01      	ldr	r3, [sp, #4]
 81086a6:	6163      	str	r3, [r4, #20]
 81086a8:	3020      	adds	r0, #32
 81086aa:	2201      	movs	r2, #1
 81086ac:	e7e8      	b.n	8108680 <__d2b+0x64>
 81086ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 81086b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 81086b6:	6038      	str	r0, [r7, #0]
 81086b8:	6918      	ldr	r0, [r3, #16]
 81086ba:	f7ff fd2d 	bl	8108118 <__hi0bits>
 81086be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 81086c2:	e7e5      	b.n	8108690 <__d2b+0x74>
 81086c4:	081092d0 	.word	0x081092d0
 81086c8:	081092e1 	.word	0x081092e1

081086cc <__ssputs_r>:
 81086cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81086d0:	688e      	ldr	r6, [r1, #8]
 81086d2:	461f      	mov	r7, r3
 81086d4:	42be      	cmp	r6, r7
 81086d6:	680b      	ldr	r3, [r1, #0]
 81086d8:	4682      	mov	sl, r0
 81086da:	460c      	mov	r4, r1
 81086dc:	4690      	mov	r8, r2
 81086de:	d82d      	bhi.n	810873c <__ssputs_r+0x70>
 81086e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 81086e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 81086e8:	d026      	beq.n	8108738 <__ssputs_r+0x6c>
 81086ea:	6965      	ldr	r5, [r4, #20]
 81086ec:	6909      	ldr	r1, [r1, #16]
 81086ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 81086f2:	eba3 0901 	sub.w	r9, r3, r1
 81086f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 81086fa:	1c7b      	adds	r3, r7, #1
 81086fc:	444b      	add	r3, r9
 81086fe:	106d      	asrs	r5, r5, #1
 8108700:	429d      	cmp	r5, r3
 8108702:	bf38      	it	cc
 8108704:	461d      	movcc	r5, r3
 8108706:	0553      	lsls	r3, r2, #21
 8108708:	d527      	bpl.n	810875a <__ssputs_r+0x8e>
 810870a:	4629      	mov	r1, r5
 810870c:	f7ff fbd0 	bl	8107eb0 <_malloc_r>
 8108710:	4606      	mov	r6, r0
 8108712:	b360      	cbz	r0, 810876e <__ssputs_r+0xa2>
 8108714:	6921      	ldr	r1, [r4, #16]
 8108716:	464a      	mov	r2, r9
 8108718:	f000 fa06 	bl	8108b28 <memcpy>
 810871c:	89a3      	ldrh	r3, [r4, #12]
 810871e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8108722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8108726:	81a3      	strh	r3, [r4, #12]
 8108728:	6126      	str	r6, [r4, #16]
 810872a:	6165      	str	r5, [r4, #20]
 810872c:	444e      	add	r6, r9
 810872e:	eba5 0509 	sub.w	r5, r5, r9
 8108732:	6026      	str	r6, [r4, #0]
 8108734:	60a5      	str	r5, [r4, #8]
 8108736:	463e      	mov	r6, r7
 8108738:	42be      	cmp	r6, r7
 810873a:	d900      	bls.n	810873e <__ssputs_r+0x72>
 810873c:	463e      	mov	r6, r7
 810873e:	6820      	ldr	r0, [r4, #0]
 8108740:	4632      	mov	r2, r6
 8108742:	4641      	mov	r1, r8
 8108744:	f000 f9c6 	bl	8108ad4 <memmove>
 8108748:	68a3      	ldr	r3, [r4, #8]
 810874a:	1b9b      	subs	r3, r3, r6
 810874c:	60a3      	str	r3, [r4, #8]
 810874e:	6823      	ldr	r3, [r4, #0]
 8108750:	4433      	add	r3, r6
 8108752:	6023      	str	r3, [r4, #0]
 8108754:	2000      	movs	r0, #0
 8108756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810875a:	462a      	mov	r2, r5
 810875c:	f000 fa36 	bl	8108bcc <_realloc_r>
 8108760:	4606      	mov	r6, r0
 8108762:	2800      	cmp	r0, #0
 8108764:	d1e0      	bne.n	8108728 <__ssputs_r+0x5c>
 8108766:	6921      	ldr	r1, [r4, #16]
 8108768:	4650      	mov	r0, sl
 810876a:	f7ff fb2d 	bl	8107dc8 <_free_r>
 810876e:	230c      	movs	r3, #12
 8108770:	f8ca 3000 	str.w	r3, [sl]
 8108774:	89a3      	ldrh	r3, [r4, #12]
 8108776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810877a:	81a3      	strh	r3, [r4, #12]
 810877c:	f04f 30ff 	mov.w	r0, #4294967295
 8108780:	e7e9      	b.n	8108756 <__ssputs_r+0x8a>
	...

08108784 <_svfiprintf_r>:
 8108784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108788:	4698      	mov	r8, r3
 810878a:	898b      	ldrh	r3, [r1, #12]
 810878c:	061b      	lsls	r3, r3, #24
 810878e:	b09d      	sub	sp, #116	@ 0x74
 8108790:	4607      	mov	r7, r0
 8108792:	460d      	mov	r5, r1
 8108794:	4614      	mov	r4, r2
 8108796:	d510      	bpl.n	81087ba <_svfiprintf_r+0x36>
 8108798:	690b      	ldr	r3, [r1, #16]
 810879a:	b973      	cbnz	r3, 81087ba <_svfiprintf_r+0x36>
 810879c:	2140      	movs	r1, #64	@ 0x40
 810879e:	f7ff fb87 	bl	8107eb0 <_malloc_r>
 81087a2:	6028      	str	r0, [r5, #0]
 81087a4:	6128      	str	r0, [r5, #16]
 81087a6:	b930      	cbnz	r0, 81087b6 <_svfiprintf_r+0x32>
 81087a8:	230c      	movs	r3, #12
 81087aa:	603b      	str	r3, [r7, #0]
 81087ac:	f04f 30ff 	mov.w	r0, #4294967295
 81087b0:	b01d      	add	sp, #116	@ 0x74
 81087b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81087b6:	2340      	movs	r3, #64	@ 0x40
 81087b8:	616b      	str	r3, [r5, #20]
 81087ba:	2300      	movs	r3, #0
 81087bc:	9309      	str	r3, [sp, #36]	@ 0x24
 81087be:	2320      	movs	r3, #32
 81087c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 81087c4:	f8cd 800c 	str.w	r8, [sp, #12]
 81087c8:	2330      	movs	r3, #48	@ 0x30
 81087ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8108968 <_svfiprintf_r+0x1e4>
 81087ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 81087d2:	f04f 0901 	mov.w	r9, #1
 81087d6:	4623      	mov	r3, r4
 81087d8:	469a      	mov	sl, r3
 81087da:	f813 2b01 	ldrb.w	r2, [r3], #1
 81087de:	b10a      	cbz	r2, 81087e4 <_svfiprintf_r+0x60>
 81087e0:	2a25      	cmp	r2, #37	@ 0x25
 81087e2:	d1f9      	bne.n	81087d8 <_svfiprintf_r+0x54>
 81087e4:	ebba 0b04 	subs.w	fp, sl, r4
 81087e8:	d00b      	beq.n	8108802 <_svfiprintf_r+0x7e>
 81087ea:	465b      	mov	r3, fp
 81087ec:	4622      	mov	r2, r4
 81087ee:	4629      	mov	r1, r5
 81087f0:	4638      	mov	r0, r7
 81087f2:	f7ff ff6b 	bl	81086cc <__ssputs_r>
 81087f6:	3001      	adds	r0, #1
 81087f8:	f000 80a7 	beq.w	810894a <_svfiprintf_r+0x1c6>
 81087fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81087fe:	445a      	add	r2, fp
 8108800:	9209      	str	r2, [sp, #36]	@ 0x24
 8108802:	f89a 3000 	ldrb.w	r3, [sl]
 8108806:	2b00      	cmp	r3, #0
 8108808:	f000 809f 	beq.w	810894a <_svfiprintf_r+0x1c6>
 810880c:	2300      	movs	r3, #0
 810880e:	f04f 32ff 	mov.w	r2, #4294967295
 8108812:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8108816:	f10a 0a01 	add.w	sl, sl, #1
 810881a:	9304      	str	r3, [sp, #16]
 810881c:	9307      	str	r3, [sp, #28]
 810881e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8108822:	931a      	str	r3, [sp, #104]	@ 0x68
 8108824:	4654      	mov	r4, sl
 8108826:	2205      	movs	r2, #5
 8108828:	f814 1b01 	ldrb.w	r1, [r4], #1
 810882c:	484e      	ldr	r0, [pc, #312]	@ (8108968 <_svfiprintf_r+0x1e4>)
 810882e:	f7f7 fd57 	bl	81002e0 <memchr>
 8108832:	9a04      	ldr	r2, [sp, #16]
 8108834:	b9d8      	cbnz	r0, 810886e <_svfiprintf_r+0xea>
 8108836:	06d0      	lsls	r0, r2, #27
 8108838:	bf44      	itt	mi
 810883a:	2320      	movmi	r3, #32
 810883c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8108840:	0711      	lsls	r1, r2, #28
 8108842:	bf44      	itt	mi
 8108844:	232b      	movmi	r3, #43	@ 0x2b
 8108846:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810884a:	f89a 3000 	ldrb.w	r3, [sl]
 810884e:	2b2a      	cmp	r3, #42	@ 0x2a
 8108850:	d015      	beq.n	810887e <_svfiprintf_r+0xfa>
 8108852:	9a07      	ldr	r2, [sp, #28]
 8108854:	4654      	mov	r4, sl
 8108856:	2000      	movs	r0, #0
 8108858:	f04f 0c0a 	mov.w	ip, #10
 810885c:	4621      	mov	r1, r4
 810885e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8108862:	3b30      	subs	r3, #48	@ 0x30
 8108864:	2b09      	cmp	r3, #9
 8108866:	d94b      	bls.n	8108900 <_svfiprintf_r+0x17c>
 8108868:	b1b0      	cbz	r0, 8108898 <_svfiprintf_r+0x114>
 810886a:	9207      	str	r2, [sp, #28]
 810886c:	e014      	b.n	8108898 <_svfiprintf_r+0x114>
 810886e:	eba0 0308 	sub.w	r3, r0, r8
 8108872:	fa09 f303 	lsl.w	r3, r9, r3
 8108876:	4313      	orrs	r3, r2
 8108878:	9304      	str	r3, [sp, #16]
 810887a:	46a2      	mov	sl, r4
 810887c:	e7d2      	b.n	8108824 <_svfiprintf_r+0xa0>
 810887e:	9b03      	ldr	r3, [sp, #12]
 8108880:	1d19      	adds	r1, r3, #4
 8108882:	681b      	ldr	r3, [r3, #0]
 8108884:	9103      	str	r1, [sp, #12]
 8108886:	2b00      	cmp	r3, #0
 8108888:	bfbb      	ittet	lt
 810888a:	425b      	neglt	r3, r3
 810888c:	f042 0202 	orrlt.w	r2, r2, #2
 8108890:	9307      	strge	r3, [sp, #28]
 8108892:	9307      	strlt	r3, [sp, #28]
 8108894:	bfb8      	it	lt
 8108896:	9204      	strlt	r2, [sp, #16]
 8108898:	7823      	ldrb	r3, [r4, #0]
 810889a:	2b2e      	cmp	r3, #46	@ 0x2e
 810889c:	d10a      	bne.n	81088b4 <_svfiprintf_r+0x130>
 810889e:	7863      	ldrb	r3, [r4, #1]
 81088a0:	2b2a      	cmp	r3, #42	@ 0x2a
 81088a2:	d132      	bne.n	810890a <_svfiprintf_r+0x186>
 81088a4:	9b03      	ldr	r3, [sp, #12]
 81088a6:	1d1a      	adds	r2, r3, #4
 81088a8:	681b      	ldr	r3, [r3, #0]
 81088aa:	9203      	str	r2, [sp, #12]
 81088ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 81088b0:	3402      	adds	r4, #2
 81088b2:	9305      	str	r3, [sp, #20]
 81088b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8108978 <_svfiprintf_r+0x1f4>
 81088b8:	7821      	ldrb	r1, [r4, #0]
 81088ba:	2203      	movs	r2, #3
 81088bc:	4650      	mov	r0, sl
 81088be:	f7f7 fd0f 	bl	81002e0 <memchr>
 81088c2:	b138      	cbz	r0, 81088d4 <_svfiprintf_r+0x150>
 81088c4:	9b04      	ldr	r3, [sp, #16]
 81088c6:	eba0 000a 	sub.w	r0, r0, sl
 81088ca:	2240      	movs	r2, #64	@ 0x40
 81088cc:	4082      	lsls	r2, r0
 81088ce:	4313      	orrs	r3, r2
 81088d0:	3401      	adds	r4, #1
 81088d2:	9304      	str	r3, [sp, #16]
 81088d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 81088d8:	4824      	ldr	r0, [pc, #144]	@ (810896c <_svfiprintf_r+0x1e8>)
 81088da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 81088de:	2206      	movs	r2, #6
 81088e0:	f7f7 fcfe 	bl	81002e0 <memchr>
 81088e4:	2800      	cmp	r0, #0
 81088e6:	d036      	beq.n	8108956 <_svfiprintf_r+0x1d2>
 81088e8:	4b21      	ldr	r3, [pc, #132]	@ (8108970 <_svfiprintf_r+0x1ec>)
 81088ea:	bb1b      	cbnz	r3, 8108934 <_svfiprintf_r+0x1b0>
 81088ec:	9b03      	ldr	r3, [sp, #12]
 81088ee:	3307      	adds	r3, #7
 81088f0:	f023 0307 	bic.w	r3, r3, #7
 81088f4:	3308      	adds	r3, #8
 81088f6:	9303      	str	r3, [sp, #12]
 81088f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81088fa:	4433      	add	r3, r6
 81088fc:	9309      	str	r3, [sp, #36]	@ 0x24
 81088fe:	e76a      	b.n	81087d6 <_svfiprintf_r+0x52>
 8108900:	fb0c 3202 	mla	r2, ip, r2, r3
 8108904:	460c      	mov	r4, r1
 8108906:	2001      	movs	r0, #1
 8108908:	e7a8      	b.n	810885c <_svfiprintf_r+0xd8>
 810890a:	2300      	movs	r3, #0
 810890c:	3401      	adds	r4, #1
 810890e:	9305      	str	r3, [sp, #20]
 8108910:	4619      	mov	r1, r3
 8108912:	f04f 0c0a 	mov.w	ip, #10
 8108916:	4620      	mov	r0, r4
 8108918:	f810 2b01 	ldrb.w	r2, [r0], #1
 810891c:	3a30      	subs	r2, #48	@ 0x30
 810891e:	2a09      	cmp	r2, #9
 8108920:	d903      	bls.n	810892a <_svfiprintf_r+0x1a6>
 8108922:	2b00      	cmp	r3, #0
 8108924:	d0c6      	beq.n	81088b4 <_svfiprintf_r+0x130>
 8108926:	9105      	str	r1, [sp, #20]
 8108928:	e7c4      	b.n	81088b4 <_svfiprintf_r+0x130>
 810892a:	fb0c 2101 	mla	r1, ip, r1, r2
 810892e:	4604      	mov	r4, r0
 8108930:	2301      	movs	r3, #1
 8108932:	e7f0      	b.n	8108916 <_svfiprintf_r+0x192>
 8108934:	ab03      	add	r3, sp, #12
 8108936:	9300      	str	r3, [sp, #0]
 8108938:	462a      	mov	r2, r5
 810893a:	4b0e      	ldr	r3, [pc, #56]	@ (8108974 <_svfiprintf_r+0x1f0>)
 810893c:	a904      	add	r1, sp, #16
 810893e:	4638      	mov	r0, r7
 8108940:	f7fd fe82 	bl	8106648 <_printf_float>
 8108944:	1c42      	adds	r2, r0, #1
 8108946:	4606      	mov	r6, r0
 8108948:	d1d6      	bne.n	81088f8 <_svfiprintf_r+0x174>
 810894a:	89ab      	ldrh	r3, [r5, #12]
 810894c:	065b      	lsls	r3, r3, #25
 810894e:	f53f af2d 	bmi.w	81087ac <_svfiprintf_r+0x28>
 8108952:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8108954:	e72c      	b.n	81087b0 <_svfiprintf_r+0x2c>
 8108956:	ab03      	add	r3, sp, #12
 8108958:	9300      	str	r3, [sp, #0]
 810895a:	462a      	mov	r2, r5
 810895c:	4b05      	ldr	r3, [pc, #20]	@ (8108974 <_svfiprintf_r+0x1f0>)
 810895e:	a904      	add	r1, sp, #16
 8108960:	4638      	mov	r0, r7
 8108962:	f7fe f909 	bl	8106b78 <_printf_i>
 8108966:	e7ed      	b.n	8108944 <_svfiprintf_r+0x1c0>
 8108968:	08109438 	.word	0x08109438
 810896c:	08109442 	.word	0x08109442
 8108970:	08106649 	.word	0x08106649
 8108974:	081086cd 	.word	0x081086cd
 8108978:	0810943e 	.word	0x0810943e

0810897c <__sflush_r>:
 810897c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8108980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108984:	0716      	lsls	r6, r2, #28
 8108986:	4605      	mov	r5, r0
 8108988:	460c      	mov	r4, r1
 810898a:	d454      	bmi.n	8108a36 <__sflush_r+0xba>
 810898c:	684b      	ldr	r3, [r1, #4]
 810898e:	2b00      	cmp	r3, #0
 8108990:	dc02      	bgt.n	8108998 <__sflush_r+0x1c>
 8108992:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8108994:	2b00      	cmp	r3, #0
 8108996:	dd48      	ble.n	8108a2a <__sflush_r+0xae>
 8108998:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810899a:	2e00      	cmp	r6, #0
 810899c:	d045      	beq.n	8108a2a <__sflush_r+0xae>
 810899e:	2300      	movs	r3, #0
 81089a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 81089a4:	682f      	ldr	r7, [r5, #0]
 81089a6:	6a21      	ldr	r1, [r4, #32]
 81089a8:	602b      	str	r3, [r5, #0]
 81089aa:	d030      	beq.n	8108a0e <__sflush_r+0x92>
 81089ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 81089ae:	89a3      	ldrh	r3, [r4, #12]
 81089b0:	0759      	lsls	r1, r3, #29
 81089b2:	d505      	bpl.n	81089c0 <__sflush_r+0x44>
 81089b4:	6863      	ldr	r3, [r4, #4]
 81089b6:	1ad2      	subs	r2, r2, r3
 81089b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 81089ba:	b10b      	cbz	r3, 81089c0 <__sflush_r+0x44>
 81089bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 81089be:	1ad2      	subs	r2, r2, r3
 81089c0:	2300      	movs	r3, #0
 81089c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 81089c4:	6a21      	ldr	r1, [r4, #32]
 81089c6:	4628      	mov	r0, r5
 81089c8:	47b0      	blx	r6
 81089ca:	1c43      	adds	r3, r0, #1
 81089cc:	89a3      	ldrh	r3, [r4, #12]
 81089ce:	d106      	bne.n	81089de <__sflush_r+0x62>
 81089d0:	6829      	ldr	r1, [r5, #0]
 81089d2:	291d      	cmp	r1, #29
 81089d4:	d82b      	bhi.n	8108a2e <__sflush_r+0xb2>
 81089d6:	4a2a      	ldr	r2, [pc, #168]	@ (8108a80 <__sflush_r+0x104>)
 81089d8:	410a      	asrs	r2, r1
 81089da:	07d6      	lsls	r6, r2, #31
 81089dc:	d427      	bmi.n	8108a2e <__sflush_r+0xb2>
 81089de:	2200      	movs	r2, #0
 81089e0:	6062      	str	r2, [r4, #4]
 81089e2:	04d9      	lsls	r1, r3, #19
 81089e4:	6922      	ldr	r2, [r4, #16]
 81089e6:	6022      	str	r2, [r4, #0]
 81089e8:	d504      	bpl.n	81089f4 <__sflush_r+0x78>
 81089ea:	1c42      	adds	r2, r0, #1
 81089ec:	d101      	bne.n	81089f2 <__sflush_r+0x76>
 81089ee:	682b      	ldr	r3, [r5, #0]
 81089f0:	b903      	cbnz	r3, 81089f4 <__sflush_r+0x78>
 81089f2:	6560      	str	r0, [r4, #84]	@ 0x54
 81089f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81089f6:	602f      	str	r7, [r5, #0]
 81089f8:	b1b9      	cbz	r1, 8108a2a <__sflush_r+0xae>
 81089fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 81089fe:	4299      	cmp	r1, r3
 8108a00:	d002      	beq.n	8108a08 <__sflush_r+0x8c>
 8108a02:	4628      	mov	r0, r5
 8108a04:	f7ff f9e0 	bl	8107dc8 <_free_r>
 8108a08:	2300      	movs	r3, #0
 8108a0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8108a0c:	e00d      	b.n	8108a2a <__sflush_r+0xae>
 8108a0e:	2301      	movs	r3, #1
 8108a10:	4628      	mov	r0, r5
 8108a12:	47b0      	blx	r6
 8108a14:	4602      	mov	r2, r0
 8108a16:	1c50      	adds	r0, r2, #1
 8108a18:	d1c9      	bne.n	81089ae <__sflush_r+0x32>
 8108a1a:	682b      	ldr	r3, [r5, #0]
 8108a1c:	2b00      	cmp	r3, #0
 8108a1e:	d0c6      	beq.n	81089ae <__sflush_r+0x32>
 8108a20:	2b1d      	cmp	r3, #29
 8108a22:	d001      	beq.n	8108a28 <__sflush_r+0xac>
 8108a24:	2b16      	cmp	r3, #22
 8108a26:	d11e      	bne.n	8108a66 <__sflush_r+0xea>
 8108a28:	602f      	str	r7, [r5, #0]
 8108a2a:	2000      	movs	r0, #0
 8108a2c:	e022      	b.n	8108a74 <__sflush_r+0xf8>
 8108a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8108a32:	b21b      	sxth	r3, r3
 8108a34:	e01b      	b.n	8108a6e <__sflush_r+0xf2>
 8108a36:	690f      	ldr	r7, [r1, #16]
 8108a38:	2f00      	cmp	r7, #0
 8108a3a:	d0f6      	beq.n	8108a2a <__sflush_r+0xae>
 8108a3c:	0793      	lsls	r3, r2, #30
 8108a3e:	680e      	ldr	r6, [r1, #0]
 8108a40:	bf08      	it	eq
 8108a42:	694b      	ldreq	r3, [r1, #20]
 8108a44:	600f      	str	r7, [r1, #0]
 8108a46:	bf18      	it	ne
 8108a48:	2300      	movne	r3, #0
 8108a4a:	eba6 0807 	sub.w	r8, r6, r7
 8108a4e:	608b      	str	r3, [r1, #8]
 8108a50:	f1b8 0f00 	cmp.w	r8, #0
 8108a54:	dde9      	ble.n	8108a2a <__sflush_r+0xae>
 8108a56:	6a21      	ldr	r1, [r4, #32]
 8108a58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8108a5a:	4643      	mov	r3, r8
 8108a5c:	463a      	mov	r2, r7
 8108a5e:	4628      	mov	r0, r5
 8108a60:	47b0      	blx	r6
 8108a62:	2800      	cmp	r0, #0
 8108a64:	dc08      	bgt.n	8108a78 <__sflush_r+0xfc>
 8108a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8108a6e:	81a3      	strh	r3, [r4, #12]
 8108a70:	f04f 30ff 	mov.w	r0, #4294967295
 8108a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8108a78:	4407      	add	r7, r0
 8108a7a:	eba8 0800 	sub.w	r8, r8, r0
 8108a7e:	e7e7      	b.n	8108a50 <__sflush_r+0xd4>
 8108a80:	dfbffffe 	.word	0xdfbffffe

08108a84 <_fflush_r>:
 8108a84:	b538      	push	{r3, r4, r5, lr}
 8108a86:	690b      	ldr	r3, [r1, #16]
 8108a88:	4605      	mov	r5, r0
 8108a8a:	460c      	mov	r4, r1
 8108a8c:	b913      	cbnz	r3, 8108a94 <_fflush_r+0x10>
 8108a8e:	2500      	movs	r5, #0
 8108a90:	4628      	mov	r0, r5
 8108a92:	bd38      	pop	{r3, r4, r5, pc}
 8108a94:	b118      	cbz	r0, 8108a9e <_fflush_r+0x1a>
 8108a96:	6a03      	ldr	r3, [r0, #32]
 8108a98:	b90b      	cbnz	r3, 8108a9e <_fflush_r+0x1a>
 8108a9a:	f7fe fa19 	bl	8106ed0 <__sinit>
 8108a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108aa2:	2b00      	cmp	r3, #0
 8108aa4:	d0f3      	beq.n	8108a8e <_fflush_r+0xa>
 8108aa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8108aa8:	07d0      	lsls	r0, r2, #31
 8108aaa:	d404      	bmi.n	8108ab6 <_fflush_r+0x32>
 8108aac:	0599      	lsls	r1, r3, #22
 8108aae:	d402      	bmi.n	8108ab6 <_fflush_r+0x32>
 8108ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8108ab2:	f7fe fb38 	bl	8107126 <__retarget_lock_acquire_recursive>
 8108ab6:	4628      	mov	r0, r5
 8108ab8:	4621      	mov	r1, r4
 8108aba:	f7ff ff5f 	bl	810897c <__sflush_r>
 8108abe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8108ac0:	07da      	lsls	r2, r3, #31
 8108ac2:	4605      	mov	r5, r0
 8108ac4:	d4e4      	bmi.n	8108a90 <_fflush_r+0xc>
 8108ac6:	89a3      	ldrh	r3, [r4, #12]
 8108ac8:	059b      	lsls	r3, r3, #22
 8108aca:	d4e1      	bmi.n	8108a90 <_fflush_r+0xc>
 8108acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8108ace:	f7fe fb2b 	bl	8107128 <__retarget_lock_release_recursive>
 8108ad2:	e7dd      	b.n	8108a90 <_fflush_r+0xc>

08108ad4 <memmove>:
 8108ad4:	4288      	cmp	r0, r1
 8108ad6:	b510      	push	{r4, lr}
 8108ad8:	eb01 0402 	add.w	r4, r1, r2
 8108adc:	d902      	bls.n	8108ae4 <memmove+0x10>
 8108ade:	4284      	cmp	r4, r0
 8108ae0:	4623      	mov	r3, r4
 8108ae2:	d807      	bhi.n	8108af4 <memmove+0x20>
 8108ae4:	1e43      	subs	r3, r0, #1
 8108ae6:	42a1      	cmp	r1, r4
 8108ae8:	d008      	beq.n	8108afc <memmove+0x28>
 8108aea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8108aee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8108af2:	e7f8      	b.n	8108ae6 <memmove+0x12>
 8108af4:	4402      	add	r2, r0
 8108af6:	4601      	mov	r1, r0
 8108af8:	428a      	cmp	r2, r1
 8108afa:	d100      	bne.n	8108afe <memmove+0x2a>
 8108afc:	bd10      	pop	{r4, pc}
 8108afe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8108b02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8108b06:	e7f7      	b.n	8108af8 <memmove+0x24>

08108b08 <_sbrk_r>:
 8108b08:	b538      	push	{r3, r4, r5, lr}
 8108b0a:	4d06      	ldr	r5, [pc, #24]	@ (8108b24 <_sbrk_r+0x1c>)
 8108b0c:	2300      	movs	r3, #0
 8108b0e:	4604      	mov	r4, r0
 8108b10:	4608      	mov	r0, r1
 8108b12:	602b      	str	r3, [r5, #0]
 8108b14:	f7f8 ff98 	bl	8101a48 <_sbrk>
 8108b18:	1c43      	adds	r3, r0, #1
 8108b1a:	d102      	bne.n	8108b22 <_sbrk_r+0x1a>
 8108b1c:	682b      	ldr	r3, [r5, #0]
 8108b1e:	b103      	cbz	r3, 8108b22 <_sbrk_r+0x1a>
 8108b20:	6023      	str	r3, [r4, #0]
 8108b22:	bd38      	pop	{r3, r4, r5, pc}
 8108b24:	100008f4 	.word	0x100008f4

08108b28 <memcpy>:
 8108b28:	440a      	add	r2, r1
 8108b2a:	4291      	cmp	r1, r2
 8108b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8108b30:	d100      	bne.n	8108b34 <memcpy+0xc>
 8108b32:	4770      	bx	lr
 8108b34:	b510      	push	{r4, lr}
 8108b36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8108b3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8108b3e:	4291      	cmp	r1, r2
 8108b40:	d1f9      	bne.n	8108b36 <memcpy+0xe>
 8108b42:	bd10      	pop	{r4, pc}

08108b44 <__assert_func>:
 8108b44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8108b46:	4614      	mov	r4, r2
 8108b48:	461a      	mov	r2, r3
 8108b4a:	4b09      	ldr	r3, [pc, #36]	@ (8108b70 <__assert_func+0x2c>)
 8108b4c:	681b      	ldr	r3, [r3, #0]
 8108b4e:	4605      	mov	r5, r0
 8108b50:	68d8      	ldr	r0, [r3, #12]
 8108b52:	b954      	cbnz	r4, 8108b6a <__assert_func+0x26>
 8108b54:	4b07      	ldr	r3, [pc, #28]	@ (8108b74 <__assert_func+0x30>)
 8108b56:	461c      	mov	r4, r3
 8108b58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8108b5c:	9100      	str	r1, [sp, #0]
 8108b5e:	462b      	mov	r3, r5
 8108b60:	4905      	ldr	r1, [pc, #20]	@ (8108b78 <__assert_func+0x34>)
 8108b62:	f000 f86f 	bl	8108c44 <fiprintf>
 8108b66:	f000 f87f 	bl	8108c68 <abort>
 8108b6a:	4b04      	ldr	r3, [pc, #16]	@ (8108b7c <__assert_func+0x38>)
 8108b6c:	e7f4      	b.n	8108b58 <__assert_func+0x14>
 8108b6e:	bf00      	nop
 8108b70:	10000020 	.word	0x10000020
 8108b74:	0810948e 	.word	0x0810948e
 8108b78:	08109460 	.word	0x08109460
 8108b7c:	08109453 	.word	0x08109453

08108b80 <_calloc_r>:
 8108b80:	b570      	push	{r4, r5, r6, lr}
 8108b82:	fba1 5402 	umull	r5, r4, r1, r2
 8108b86:	b93c      	cbnz	r4, 8108b98 <_calloc_r+0x18>
 8108b88:	4629      	mov	r1, r5
 8108b8a:	f7ff f991 	bl	8107eb0 <_malloc_r>
 8108b8e:	4606      	mov	r6, r0
 8108b90:	b928      	cbnz	r0, 8108b9e <_calloc_r+0x1e>
 8108b92:	2600      	movs	r6, #0
 8108b94:	4630      	mov	r0, r6
 8108b96:	bd70      	pop	{r4, r5, r6, pc}
 8108b98:	220c      	movs	r2, #12
 8108b9a:	6002      	str	r2, [r0, #0]
 8108b9c:	e7f9      	b.n	8108b92 <_calloc_r+0x12>
 8108b9e:	462a      	mov	r2, r5
 8108ba0:	4621      	mov	r1, r4
 8108ba2:	f7fe fa42 	bl	810702a <memset>
 8108ba6:	e7f5      	b.n	8108b94 <_calloc_r+0x14>

08108ba8 <__ascii_mbtowc>:
 8108ba8:	b082      	sub	sp, #8
 8108baa:	b901      	cbnz	r1, 8108bae <__ascii_mbtowc+0x6>
 8108bac:	a901      	add	r1, sp, #4
 8108bae:	b142      	cbz	r2, 8108bc2 <__ascii_mbtowc+0x1a>
 8108bb0:	b14b      	cbz	r3, 8108bc6 <__ascii_mbtowc+0x1e>
 8108bb2:	7813      	ldrb	r3, [r2, #0]
 8108bb4:	600b      	str	r3, [r1, #0]
 8108bb6:	7812      	ldrb	r2, [r2, #0]
 8108bb8:	1e10      	subs	r0, r2, #0
 8108bba:	bf18      	it	ne
 8108bbc:	2001      	movne	r0, #1
 8108bbe:	b002      	add	sp, #8
 8108bc0:	4770      	bx	lr
 8108bc2:	4610      	mov	r0, r2
 8108bc4:	e7fb      	b.n	8108bbe <__ascii_mbtowc+0x16>
 8108bc6:	f06f 0001 	mvn.w	r0, #1
 8108bca:	e7f8      	b.n	8108bbe <__ascii_mbtowc+0x16>

08108bcc <_realloc_r>:
 8108bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108bd0:	4680      	mov	r8, r0
 8108bd2:	4615      	mov	r5, r2
 8108bd4:	460c      	mov	r4, r1
 8108bd6:	b921      	cbnz	r1, 8108be2 <_realloc_r+0x16>
 8108bd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8108bdc:	4611      	mov	r1, r2
 8108bde:	f7ff b967 	b.w	8107eb0 <_malloc_r>
 8108be2:	b92a      	cbnz	r2, 8108bf0 <_realloc_r+0x24>
 8108be4:	f7ff f8f0 	bl	8107dc8 <_free_r>
 8108be8:	2400      	movs	r4, #0
 8108bea:	4620      	mov	r0, r4
 8108bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8108bf0:	f000 f841 	bl	8108c76 <_malloc_usable_size_r>
 8108bf4:	4285      	cmp	r5, r0
 8108bf6:	4606      	mov	r6, r0
 8108bf8:	d802      	bhi.n	8108c00 <_realloc_r+0x34>
 8108bfa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8108bfe:	d8f4      	bhi.n	8108bea <_realloc_r+0x1e>
 8108c00:	4629      	mov	r1, r5
 8108c02:	4640      	mov	r0, r8
 8108c04:	f7ff f954 	bl	8107eb0 <_malloc_r>
 8108c08:	4607      	mov	r7, r0
 8108c0a:	2800      	cmp	r0, #0
 8108c0c:	d0ec      	beq.n	8108be8 <_realloc_r+0x1c>
 8108c0e:	42b5      	cmp	r5, r6
 8108c10:	462a      	mov	r2, r5
 8108c12:	4621      	mov	r1, r4
 8108c14:	bf28      	it	cs
 8108c16:	4632      	movcs	r2, r6
 8108c18:	f7ff ff86 	bl	8108b28 <memcpy>
 8108c1c:	4621      	mov	r1, r4
 8108c1e:	4640      	mov	r0, r8
 8108c20:	f7ff f8d2 	bl	8107dc8 <_free_r>
 8108c24:	463c      	mov	r4, r7
 8108c26:	e7e0      	b.n	8108bea <_realloc_r+0x1e>

08108c28 <__ascii_wctomb>:
 8108c28:	4603      	mov	r3, r0
 8108c2a:	4608      	mov	r0, r1
 8108c2c:	b141      	cbz	r1, 8108c40 <__ascii_wctomb+0x18>
 8108c2e:	2aff      	cmp	r2, #255	@ 0xff
 8108c30:	d904      	bls.n	8108c3c <__ascii_wctomb+0x14>
 8108c32:	228a      	movs	r2, #138	@ 0x8a
 8108c34:	601a      	str	r2, [r3, #0]
 8108c36:	f04f 30ff 	mov.w	r0, #4294967295
 8108c3a:	4770      	bx	lr
 8108c3c:	700a      	strb	r2, [r1, #0]
 8108c3e:	2001      	movs	r0, #1
 8108c40:	4770      	bx	lr
	...

08108c44 <fiprintf>:
 8108c44:	b40e      	push	{r1, r2, r3}
 8108c46:	b503      	push	{r0, r1, lr}
 8108c48:	4601      	mov	r1, r0
 8108c4a:	ab03      	add	r3, sp, #12
 8108c4c:	4805      	ldr	r0, [pc, #20]	@ (8108c64 <fiprintf+0x20>)
 8108c4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8108c52:	6800      	ldr	r0, [r0, #0]
 8108c54:	9301      	str	r3, [sp, #4]
 8108c56:	f000 f83f 	bl	8108cd8 <_vfiprintf_r>
 8108c5a:	b002      	add	sp, #8
 8108c5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8108c60:	b003      	add	sp, #12
 8108c62:	4770      	bx	lr
 8108c64:	10000020 	.word	0x10000020

08108c68 <abort>:
 8108c68:	b508      	push	{r3, lr}
 8108c6a:	2006      	movs	r0, #6
 8108c6c:	f000 fa08 	bl	8109080 <raise>
 8108c70:	2001      	movs	r0, #1
 8108c72:	f7f8 fe70 	bl	8101956 <_exit>

08108c76 <_malloc_usable_size_r>:
 8108c76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8108c7a:	1f18      	subs	r0, r3, #4
 8108c7c:	2b00      	cmp	r3, #0
 8108c7e:	bfbc      	itt	lt
 8108c80:	580b      	ldrlt	r3, [r1, r0]
 8108c82:	18c0      	addlt	r0, r0, r3
 8108c84:	4770      	bx	lr

08108c86 <__sfputc_r>:
 8108c86:	6893      	ldr	r3, [r2, #8]
 8108c88:	3b01      	subs	r3, #1
 8108c8a:	2b00      	cmp	r3, #0
 8108c8c:	b410      	push	{r4}
 8108c8e:	6093      	str	r3, [r2, #8]
 8108c90:	da08      	bge.n	8108ca4 <__sfputc_r+0x1e>
 8108c92:	6994      	ldr	r4, [r2, #24]
 8108c94:	42a3      	cmp	r3, r4
 8108c96:	db01      	blt.n	8108c9c <__sfputc_r+0x16>
 8108c98:	290a      	cmp	r1, #10
 8108c9a:	d103      	bne.n	8108ca4 <__sfputc_r+0x1e>
 8108c9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8108ca0:	f000 b932 	b.w	8108f08 <__swbuf_r>
 8108ca4:	6813      	ldr	r3, [r2, #0]
 8108ca6:	1c58      	adds	r0, r3, #1
 8108ca8:	6010      	str	r0, [r2, #0]
 8108caa:	7019      	strb	r1, [r3, #0]
 8108cac:	4608      	mov	r0, r1
 8108cae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8108cb2:	4770      	bx	lr

08108cb4 <__sfputs_r>:
 8108cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108cb6:	4606      	mov	r6, r0
 8108cb8:	460f      	mov	r7, r1
 8108cba:	4614      	mov	r4, r2
 8108cbc:	18d5      	adds	r5, r2, r3
 8108cbe:	42ac      	cmp	r4, r5
 8108cc0:	d101      	bne.n	8108cc6 <__sfputs_r+0x12>
 8108cc2:	2000      	movs	r0, #0
 8108cc4:	e007      	b.n	8108cd6 <__sfputs_r+0x22>
 8108cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8108cca:	463a      	mov	r2, r7
 8108ccc:	4630      	mov	r0, r6
 8108cce:	f7ff ffda 	bl	8108c86 <__sfputc_r>
 8108cd2:	1c43      	adds	r3, r0, #1
 8108cd4:	d1f3      	bne.n	8108cbe <__sfputs_r+0xa>
 8108cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08108cd8 <_vfiprintf_r>:
 8108cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108cdc:	460d      	mov	r5, r1
 8108cde:	b09d      	sub	sp, #116	@ 0x74
 8108ce0:	4614      	mov	r4, r2
 8108ce2:	4698      	mov	r8, r3
 8108ce4:	4606      	mov	r6, r0
 8108ce6:	b118      	cbz	r0, 8108cf0 <_vfiprintf_r+0x18>
 8108ce8:	6a03      	ldr	r3, [r0, #32]
 8108cea:	b90b      	cbnz	r3, 8108cf0 <_vfiprintf_r+0x18>
 8108cec:	f7fe f8f0 	bl	8106ed0 <__sinit>
 8108cf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8108cf2:	07d9      	lsls	r1, r3, #31
 8108cf4:	d405      	bmi.n	8108d02 <_vfiprintf_r+0x2a>
 8108cf6:	89ab      	ldrh	r3, [r5, #12]
 8108cf8:	059a      	lsls	r2, r3, #22
 8108cfa:	d402      	bmi.n	8108d02 <_vfiprintf_r+0x2a>
 8108cfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8108cfe:	f7fe fa12 	bl	8107126 <__retarget_lock_acquire_recursive>
 8108d02:	89ab      	ldrh	r3, [r5, #12]
 8108d04:	071b      	lsls	r3, r3, #28
 8108d06:	d501      	bpl.n	8108d0c <_vfiprintf_r+0x34>
 8108d08:	692b      	ldr	r3, [r5, #16]
 8108d0a:	b99b      	cbnz	r3, 8108d34 <_vfiprintf_r+0x5c>
 8108d0c:	4629      	mov	r1, r5
 8108d0e:	4630      	mov	r0, r6
 8108d10:	f000 f938 	bl	8108f84 <__swsetup_r>
 8108d14:	b170      	cbz	r0, 8108d34 <_vfiprintf_r+0x5c>
 8108d16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8108d18:	07dc      	lsls	r4, r3, #31
 8108d1a:	d504      	bpl.n	8108d26 <_vfiprintf_r+0x4e>
 8108d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8108d20:	b01d      	add	sp, #116	@ 0x74
 8108d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108d26:	89ab      	ldrh	r3, [r5, #12]
 8108d28:	0598      	lsls	r0, r3, #22
 8108d2a:	d4f7      	bmi.n	8108d1c <_vfiprintf_r+0x44>
 8108d2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8108d2e:	f7fe f9fb 	bl	8107128 <__retarget_lock_release_recursive>
 8108d32:	e7f3      	b.n	8108d1c <_vfiprintf_r+0x44>
 8108d34:	2300      	movs	r3, #0
 8108d36:	9309      	str	r3, [sp, #36]	@ 0x24
 8108d38:	2320      	movs	r3, #32
 8108d3a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8108d3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8108d42:	2330      	movs	r3, #48	@ 0x30
 8108d44:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8108ef4 <_vfiprintf_r+0x21c>
 8108d48:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8108d4c:	f04f 0901 	mov.w	r9, #1
 8108d50:	4623      	mov	r3, r4
 8108d52:	469a      	mov	sl, r3
 8108d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8108d58:	b10a      	cbz	r2, 8108d5e <_vfiprintf_r+0x86>
 8108d5a:	2a25      	cmp	r2, #37	@ 0x25
 8108d5c:	d1f9      	bne.n	8108d52 <_vfiprintf_r+0x7a>
 8108d5e:	ebba 0b04 	subs.w	fp, sl, r4
 8108d62:	d00b      	beq.n	8108d7c <_vfiprintf_r+0xa4>
 8108d64:	465b      	mov	r3, fp
 8108d66:	4622      	mov	r2, r4
 8108d68:	4629      	mov	r1, r5
 8108d6a:	4630      	mov	r0, r6
 8108d6c:	f7ff ffa2 	bl	8108cb4 <__sfputs_r>
 8108d70:	3001      	adds	r0, #1
 8108d72:	f000 80a7 	beq.w	8108ec4 <_vfiprintf_r+0x1ec>
 8108d76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8108d78:	445a      	add	r2, fp
 8108d7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8108d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8108d80:	2b00      	cmp	r3, #0
 8108d82:	f000 809f 	beq.w	8108ec4 <_vfiprintf_r+0x1ec>
 8108d86:	2300      	movs	r3, #0
 8108d88:	f04f 32ff 	mov.w	r2, #4294967295
 8108d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8108d90:	f10a 0a01 	add.w	sl, sl, #1
 8108d94:	9304      	str	r3, [sp, #16]
 8108d96:	9307      	str	r3, [sp, #28]
 8108d98:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8108d9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8108d9e:	4654      	mov	r4, sl
 8108da0:	2205      	movs	r2, #5
 8108da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8108da6:	4853      	ldr	r0, [pc, #332]	@ (8108ef4 <_vfiprintf_r+0x21c>)
 8108da8:	f7f7 fa9a 	bl	81002e0 <memchr>
 8108dac:	9a04      	ldr	r2, [sp, #16]
 8108dae:	b9d8      	cbnz	r0, 8108de8 <_vfiprintf_r+0x110>
 8108db0:	06d1      	lsls	r1, r2, #27
 8108db2:	bf44      	itt	mi
 8108db4:	2320      	movmi	r3, #32
 8108db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8108dba:	0713      	lsls	r3, r2, #28
 8108dbc:	bf44      	itt	mi
 8108dbe:	232b      	movmi	r3, #43	@ 0x2b
 8108dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8108dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8108dc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8108dca:	d015      	beq.n	8108df8 <_vfiprintf_r+0x120>
 8108dcc:	9a07      	ldr	r2, [sp, #28]
 8108dce:	4654      	mov	r4, sl
 8108dd0:	2000      	movs	r0, #0
 8108dd2:	f04f 0c0a 	mov.w	ip, #10
 8108dd6:	4621      	mov	r1, r4
 8108dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8108ddc:	3b30      	subs	r3, #48	@ 0x30
 8108dde:	2b09      	cmp	r3, #9
 8108de0:	d94b      	bls.n	8108e7a <_vfiprintf_r+0x1a2>
 8108de2:	b1b0      	cbz	r0, 8108e12 <_vfiprintf_r+0x13a>
 8108de4:	9207      	str	r2, [sp, #28]
 8108de6:	e014      	b.n	8108e12 <_vfiprintf_r+0x13a>
 8108de8:	eba0 0308 	sub.w	r3, r0, r8
 8108dec:	fa09 f303 	lsl.w	r3, r9, r3
 8108df0:	4313      	orrs	r3, r2
 8108df2:	9304      	str	r3, [sp, #16]
 8108df4:	46a2      	mov	sl, r4
 8108df6:	e7d2      	b.n	8108d9e <_vfiprintf_r+0xc6>
 8108df8:	9b03      	ldr	r3, [sp, #12]
 8108dfa:	1d19      	adds	r1, r3, #4
 8108dfc:	681b      	ldr	r3, [r3, #0]
 8108dfe:	9103      	str	r1, [sp, #12]
 8108e00:	2b00      	cmp	r3, #0
 8108e02:	bfbb      	ittet	lt
 8108e04:	425b      	neglt	r3, r3
 8108e06:	f042 0202 	orrlt.w	r2, r2, #2
 8108e0a:	9307      	strge	r3, [sp, #28]
 8108e0c:	9307      	strlt	r3, [sp, #28]
 8108e0e:	bfb8      	it	lt
 8108e10:	9204      	strlt	r2, [sp, #16]
 8108e12:	7823      	ldrb	r3, [r4, #0]
 8108e14:	2b2e      	cmp	r3, #46	@ 0x2e
 8108e16:	d10a      	bne.n	8108e2e <_vfiprintf_r+0x156>
 8108e18:	7863      	ldrb	r3, [r4, #1]
 8108e1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8108e1c:	d132      	bne.n	8108e84 <_vfiprintf_r+0x1ac>
 8108e1e:	9b03      	ldr	r3, [sp, #12]
 8108e20:	1d1a      	adds	r2, r3, #4
 8108e22:	681b      	ldr	r3, [r3, #0]
 8108e24:	9203      	str	r2, [sp, #12]
 8108e26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8108e2a:	3402      	adds	r4, #2
 8108e2c:	9305      	str	r3, [sp, #20]
 8108e2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8108f04 <_vfiprintf_r+0x22c>
 8108e32:	7821      	ldrb	r1, [r4, #0]
 8108e34:	2203      	movs	r2, #3
 8108e36:	4650      	mov	r0, sl
 8108e38:	f7f7 fa52 	bl	81002e0 <memchr>
 8108e3c:	b138      	cbz	r0, 8108e4e <_vfiprintf_r+0x176>
 8108e3e:	9b04      	ldr	r3, [sp, #16]
 8108e40:	eba0 000a 	sub.w	r0, r0, sl
 8108e44:	2240      	movs	r2, #64	@ 0x40
 8108e46:	4082      	lsls	r2, r0
 8108e48:	4313      	orrs	r3, r2
 8108e4a:	3401      	adds	r4, #1
 8108e4c:	9304      	str	r3, [sp, #16]
 8108e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8108e52:	4829      	ldr	r0, [pc, #164]	@ (8108ef8 <_vfiprintf_r+0x220>)
 8108e54:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8108e58:	2206      	movs	r2, #6
 8108e5a:	f7f7 fa41 	bl	81002e0 <memchr>
 8108e5e:	2800      	cmp	r0, #0
 8108e60:	d03f      	beq.n	8108ee2 <_vfiprintf_r+0x20a>
 8108e62:	4b26      	ldr	r3, [pc, #152]	@ (8108efc <_vfiprintf_r+0x224>)
 8108e64:	bb1b      	cbnz	r3, 8108eae <_vfiprintf_r+0x1d6>
 8108e66:	9b03      	ldr	r3, [sp, #12]
 8108e68:	3307      	adds	r3, #7
 8108e6a:	f023 0307 	bic.w	r3, r3, #7
 8108e6e:	3308      	adds	r3, #8
 8108e70:	9303      	str	r3, [sp, #12]
 8108e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8108e74:	443b      	add	r3, r7
 8108e76:	9309      	str	r3, [sp, #36]	@ 0x24
 8108e78:	e76a      	b.n	8108d50 <_vfiprintf_r+0x78>
 8108e7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8108e7e:	460c      	mov	r4, r1
 8108e80:	2001      	movs	r0, #1
 8108e82:	e7a8      	b.n	8108dd6 <_vfiprintf_r+0xfe>
 8108e84:	2300      	movs	r3, #0
 8108e86:	3401      	adds	r4, #1
 8108e88:	9305      	str	r3, [sp, #20]
 8108e8a:	4619      	mov	r1, r3
 8108e8c:	f04f 0c0a 	mov.w	ip, #10
 8108e90:	4620      	mov	r0, r4
 8108e92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8108e96:	3a30      	subs	r2, #48	@ 0x30
 8108e98:	2a09      	cmp	r2, #9
 8108e9a:	d903      	bls.n	8108ea4 <_vfiprintf_r+0x1cc>
 8108e9c:	2b00      	cmp	r3, #0
 8108e9e:	d0c6      	beq.n	8108e2e <_vfiprintf_r+0x156>
 8108ea0:	9105      	str	r1, [sp, #20]
 8108ea2:	e7c4      	b.n	8108e2e <_vfiprintf_r+0x156>
 8108ea4:	fb0c 2101 	mla	r1, ip, r1, r2
 8108ea8:	4604      	mov	r4, r0
 8108eaa:	2301      	movs	r3, #1
 8108eac:	e7f0      	b.n	8108e90 <_vfiprintf_r+0x1b8>
 8108eae:	ab03      	add	r3, sp, #12
 8108eb0:	9300      	str	r3, [sp, #0]
 8108eb2:	462a      	mov	r2, r5
 8108eb4:	4b12      	ldr	r3, [pc, #72]	@ (8108f00 <_vfiprintf_r+0x228>)
 8108eb6:	a904      	add	r1, sp, #16
 8108eb8:	4630      	mov	r0, r6
 8108eba:	f7fd fbc5 	bl	8106648 <_printf_float>
 8108ebe:	4607      	mov	r7, r0
 8108ec0:	1c78      	adds	r0, r7, #1
 8108ec2:	d1d6      	bne.n	8108e72 <_vfiprintf_r+0x19a>
 8108ec4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8108ec6:	07d9      	lsls	r1, r3, #31
 8108ec8:	d405      	bmi.n	8108ed6 <_vfiprintf_r+0x1fe>
 8108eca:	89ab      	ldrh	r3, [r5, #12]
 8108ecc:	059a      	lsls	r2, r3, #22
 8108ece:	d402      	bmi.n	8108ed6 <_vfiprintf_r+0x1fe>
 8108ed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8108ed2:	f7fe f929 	bl	8107128 <__retarget_lock_release_recursive>
 8108ed6:	89ab      	ldrh	r3, [r5, #12]
 8108ed8:	065b      	lsls	r3, r3, #25
 8108eda:	f53f af1f 	bmi.w	8108d1c <_vfiprintf_r+0x44>
 8108ede:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8108ee0:	e71e      	b.n	8108d20 <_vfiprintf_r+0x48>
 8108ee2:	ab03      	add	r3, sp, #12
 8108ee4:	9300      	str	r3, [sp, #0]
 8108ee6:	462a      	mov	r2, r5
 8108ee8:	4b05      	ldr	r3, [pc, #20]	@ (8108f00 <_vfiprintf_r+0x228>)
 8108eea:	a904      	add	r1, sp, #16
 8108eec:	4630      	mov	r0, r6
 8108eee:	f7fd fe43 	bl	8106b78 <_printf_i>
 8108ef2:	e7e4      	b.n	8108ebe <_vfiprintf_r+0x1e6>
 8108ef4:	08109438 	.word	0x08109438
 8108ef8:	08109442 	.word	0x08109442
 8108efc:	08106649 	.word	0x08106649
 8108f00:	08108cb5 	.word	0x08108cb5
 8108f04:	0810943e 	.word	0x0810943e

08108f08 <__swbuf_r>:
 8108f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108f0a:	460e      	mov	r6, r1
 8108f0c:	4614      	mov	r4, r2
 8108f0e:	4605      	mov	r5, r0
 8108f10:	b118      	cbz	r0, 8108f1a <__swbuf_r+0x12>
 8108f12:	6a03      	ldr	r3, [r0, #32]
 8108f14:	b90b      	cbnz	r3, 8108f1a <__swbuf_r+0x12>
 8108f16:	f7fd ffdb 	bl	8106ed0 <__sinit>
 8108f1a:	69a3      	ldr	r3, [r4, #24]
 8108f1c:	60a3      	str	r3, [r4, #8]
 8108f1e:	89a3      	ldrh	r3, [r4, #12]
 8108f20:	071a      	lsls	r2, r3, #28
 8108f22:	d501      	bpl.n	8108f28 <__swbuf_r+0x20>
 8108f24:	6923      	ldr	r3, [r4, #16]
 8108f26:	b943      	cbnz	r3, 8108f3a <__swbuf_r+0x32>
 8108f28:	4621      	mov	r1, r4
 8108f2a:	4628      	mov	r0, r5
 8108f2c:	f000 f82a 	bl	8108f84 <__swsetup_r>
 8108f30:	b118      	cbz	r0, 8108f3a <__swbuf_r+0x32>
 8108f32:	f04f 37ff 	mov.w	r7, #4294967295
 8108f36:	4638      	mov	r0, r7
 8108f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108f3a:	6823      	ldr	r3, [r4, #0]
 8108f3c:	6922      	ldr	r2, [r4, #16]
 8108f3e:	1a98      	subs	r0, r3, r2
 8108f40:	6963      	ldr	r3, [r4, #20]
 8108f42:	b2f6      	uxtb	r6, r6
 8108f44:	4283      	cmp	r3, r0
 8108f46:	4637      	mov	r7, r6
 8108f48:	dc05      	bgt.n	8108f56 <__swbuf_r+0x4e>
 8108f4a:	4621      	mov	r1, r4
 8108f4c:	4628      	mov	r0, r5
 8108f4e:	f7ff fd99 	bl	8108a84 <_fflush_r>
 8108f52:	2800      	cmp	r0, #0
 8108f54:	d1ed      	bne.n	8108f32 <__swbuf_r+0x2a>
 8108f56:	68a3      	ldr	r3, [r4, #8]
 8108f58:	3b01      	subs	r3, #1
 8108f5a:	60a3      	str	r3, [r4, #8]
 8108f5c:	6823      	ldr	r3, [r4, #0]
 8108f5e:	1c5a      	adds	r2, r3, #1
 8108f60:	6022      	str	r2, [r4, #0]
 8108f62:	701e      	strb	r6, [r3, #0]
 8108f64:	6962      	ldr	r2, [r4, #20]
 8108f66:	1c43      	adds	r3, r0, #1
 8108f68:	429a      	cmp	r2, r3
 8108f6a:	d004      	beq.n	8108f76 <__swbuf_r+0x6e>
 8108f6c:	89a3      	ldrh	r3, [r4, #12]
 8108f6e:	07db      	lsls	r3, r3, #31
 8108f70:	d5e1      	bpl.n	8108f36 <__swbuf_r+0x2e>
 8108f72:	2e0a      	cmp	r6, #10
 8108f74:	d1df      	bne.n	8108f36 <__swbuf_r+0x2e>
 8108f76:	4621      	mov	r1, r4
 8108f78:	4628      	mov	r0, r5
 8108f7a:	f7ff fd83 	bl	8108a84 <_fflush_r>
 8108f7e:	2800      	cmp	r0, #0
 8108f80:	d0d9      	beq.n	8108f36 <__swbuf_r+0x2e>
 8108f82:	e7d6      	b.n	8108f32 <__swbuf_r+0x2a>

08108f84 <__swsetup_r>:
 8108f84:	b538      	push	{r3, r4, r5, lr}
 8108f86:	4b29      	ldr	r3, [pc, #164]	@ (810902c <__swsetup_r+0xa8>)
 8108f88:	4605      	mov	r5, r0
 8108f8a:	6818      	ldr	r0, [r3, #0]
 8108f8c:	460c      	mov	r4, r1
 8108f8e:	b118      	cbz	r0, 8108f98 <__swsetup_r+0x14>
 8108f90:	6a03      	ldr	r3, [r0, #32]
 8108f92:	b90b      	cbnz	r3, 8108f98 <__swsetup_r+0x14>
 8108f94:	f7fd ff9c 	bl	8106ed0 <__sinit>
 8108f98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108f9c:	0719      	lsls	r1, r3, #28
 8108f9e:	d422      	bmi.n	8108fe6 <__swsetup_r+0x62>
 8108fa0:	06da      	lsls	r2, r3, #27
 8108fa2:	d407      	bmi.n	8108fb4 <__swsetup_r+0x30>
 8108fa4:	2209      	movs	r2, #9
 8108fa6:	602a      	str	r2, [r5, #0]
 8108fa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8108fac:	81a3      	strh	r3, [r4, #12]
 8108fae:	f04f 30ff 	mov.w	r0, #4294967295
 8108fb2:	e033      	b.n	810901c <__swsetup_r+0x98>
 8108fb4:	0758      	lsls	r0, r3, #29
 8108fb6:	d512      	bpl.n	8108fde <__swsetup_r+0x5a>
 8108fb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8108fba:	b141      	cbz	r1, 8108fce <__swsetup_r+0x4a>
 8108fbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8108fc0:	4299      	cmp	r1, r3
 8108fc2:	d002      	beq.n	8108fca <__swsetup_r+0x46>
 8108fc4:	4628      	mov	r0, r5
 8108fc6:	f7fe feff 	bl	8107dc8 <_free_r>
 8108fca:	2300      	movs	r3, #0
 8108fcc:	6363      	str	r3, [r4, #52]	@ 0x34
 8108fce:	89a3      	ldrh	r3, [r4, #12]
 8108fd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8108fd4:	81a3      	strh	r3, [r4, #12]
 8108fd6:	2300      	movs	r3, #0
 8108fd8:	6063      	str	r3, [r4, #4]
 8108fda:	6923      	ldr	r3, [r4, #16]
 8108fdc:	6023      	str	r3, [r4, #0]
 8108fde:	89a3      	ldrh	r3, [r4, #12]
 8108fe0:	f043 0308 	orr.w	r3, r3, #8
 8108fe4:	81a3      	strh	r3, [r4, #12]
 8108fe6:	6923      	ldr	r3, [r4, #16]
 8108fe8:	b94b      	cbnz	r3, 8108ffe <__swsetup_r+0x7a>
 8108fea:	89a3      	ldrh	r3, [r4, #12]
 8108fec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8108ff0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8108ff4:	d003      	beq.n	8108ffe <__swsetup_r+0x7a>
 8108ff6:	4621      	mov	r1, r4
 8108ff8:	4628      	mov	r0, r5
 8108ffa:	f000 f883 	bl	8109104 <__smakebuf_r>
 8108ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8109002:	f013 0201 	ands.w	r2, r3, #1
 8109006:	d00a      	beq.n	810901e <__swsetup_r+0x9a>
 8109008:	2200      	movs	r2, #0
 810900a:	60a2      	str	r2, [r4, #8]
 810900c:	6962      	ldr	r2, [r4, #20]
 810900e:	4252      	negs	r2, r2
 8109010:	61a2      	str	r2, [r4, #24]
 8109012:	6922      	ldr	r2, [r4, #16]
 8109014:	b942      	cbnz	r2, 8109028 <__swsetup_r+0xa4>
 8109016:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 810901a:	d1c5      	bne.n	8108fa8 <__swsetup_r+0x24>
 810901c:	bd38      	pop	{r3, r4, r5, pc}
 810901e:	0799      	lsls	r1, r3, #30
 8109020:	bf58      	it	pl
 8109022:	6962      	ldrpl	r2, [r4, #20]
 8109024:	60a2      	str	r2, [r4, #8]
 8109026:	e7f4      	b.n	8109012 <__swsetup_r+0x8e>
 8109028:	2000      	movs	r0, #0
 810902a:	e7f7      	b.n	810901c <__swsetup_r+0x98>
 810902c:	10000020 	.word	0x10000020

08109030 <_raise_r>:
 8109030:	291f      	cmp	r1, #31
 8109032:	b538      	push	{r3, r4, r5, lr}
 8109034:	4605      	mov	r5, r0
 8109036:	460c      	mov	r4, r1
 8109038:	d904      	bls.n	8109044 <_raise_r+0x14>
 810903a:	2316      	movs	r3, #22
 810903c:	6003      	str	r3, [r0, #0]
 810903e:	f04f 30ff 	mov.w	r0, #4294967295
 8109042:	bd38      	pop	{r3, r4, r5, pc}
 8109044:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8109046:	b112      	cbz	r2, 810904e <_raise_r+0x1e>
 8109048:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810904c:	b94b      	cbnz	r3, 8109062 <_raise_r+0x32>
 810904e:	4628      	mov	r0, r5
 8109050:	f000 f830 	bl	81090b4 <_getpid_r>
 8109054:	4622      	mov	r2, r4
 8109056:	4601      	mov	r1, r0
 8109058:	4628      	mov	r0, r5
 810905a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810905e:	f000 b817 	b.w	8109090 <_kill_r>
 8109062:	2b01      	cmp	r3, #1
 8109064:	d00a      	beq.n	810907c <_raise_r+0x4c>
 8109066:	1c59      	adds	r1, r3, #1
 8109068:	d103      	bne.n	8109072 <_raise_r+0x42>
 810906a:	2316      	movs	r3, #22
 810906c:	6003      	str	r3, [r0, #0]
 810906e:	2001      	movs	r0, #1
 8109070:	e7e7      	b.n	8109042 <_raise_r+0x12>
 8109072:	2100      	movs	r1, #0
 8109074:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8109078:	4620      	mov	r0, r4
 810907a:	4798      	blx	r3
 810907c:	2000      	movs	r0, #0
 810907e:	e7e0      	b.n	8109042 <_raise_r+0x12>

08109080 <raise>:
 8109080:	4b02      	ldr	r3, [pc, #8]	@ (810908c <raise+0xc>)
 8109082:	4601      	mov	r1, r0
 8109084:	6818      	ldr	r0, [r3, #0]
 8109086:	f7ff bfd3 	b.w	8109030 <_raise_r>
 810908a:	bf00      	nop
 810908c:	10000020 	.word	0x10000020

08109090 <_kill_r>:
 8109090:	b538      	push	{r3, r4, r5, lr}
 8109092:	4d07      	ldr	r5, [pc, #28]	@ (81090b0 <_kill_r+0x20>)
 8109094:	2300      	movs	r3, #0
 8109096:	4604      	mov	r4, r0
 8109098:	4608      	mov	r0, r1
 810909a:	4611      	mov	r1, r2
 810909c:	602b      	str	r3, [r5, #0]
 810909e:	f7f8 fc4a 	bl	8101936 <_kill>
 81090a2:	1c43      	adds	r3, r0, #1
 81090a4:	d102      	bne.n	81090ac <_kill_r+0x1c>
 81090a6:	682b      	ldr	r3, [r5, #0]
 81090a8:	b103      	cbz	r3, 81090ac <_kill_r+0x1c>
 81090aa:	6023      	str	r3, [r4, #0]
 81090ac:	bd38      	pop	{r3, r4, r5, pc}
 81090ae:	bf00      	nop
 81090b0:	100008f4 	.word	0x100008f4

081090b4 <_getpid_r>:
 81090b4:	f7f8 bc37 	b.w	8101926 <_getpid>

081090b8 <__swhatbuf_r>:
 81090b8:	b570      	push	{r4, r5, r6, lr}
 81090ba:	460c      	mov	r4, r1
 81090bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81090c0:	2900      	cmp	r1, #0
 81090c2:	b096      	sub	sp, #88	@ 0x58
 81090c4:	4615      	mov	r5, r2
 81090c6:	461e      	mov	r6, r3
 81090c8:	da0d      	bge.n	81090e6 <__swhatbuf_r+0x2e>
 81090ca:	89a3      	ldrh	r3, [r4, #12]
 81090cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 81090d0:	f04f 0100 	mov.w	r1, #0
 81090d4:	bf14      	ite	ne
 81090d6:	2340      	movne	r3, #64	@ 0x40
 81090d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 81090dc:	2000      	movs	r0, #0
 81090de:	6031      	str	r1, [r6, #0]
 81090e0:	602b      	str	r3, [r5, #0]
 81090e2:	b016      	add	sp, #88	@ 0x58
 81090e4:	bd70      	pop	{r4, r5, r6, pc}
 81090e6:	466a      	mov	r2, sp
 81090e8:	f000 f848 	bl	810917c <_fstat_r>
 81090ec:	2800      	cmp	r0, #0
 81090ee:	dbec      	blt.n	81090ca <__swhatbuf_r+0x12>
 81090f0:	9901      	ldr	r1, [sp, #4]
 81090f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 81090f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 81090fa:	4259      	negs	r1, r3
 81090fc:	4159      	adcs	r1, r3
 81090fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8109102:	e7eb      	b.n	81090dc <__swhatbuf_r+0x24>

08109104 <__smakebuf_r>:
 8109104:	898b      	ldrh	r3, [r1, #12]
 8109106:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8109108:	079d      	lsls	r5, r3, #30
 810910a:	4606      	mov	r6, r0
 810910c:	460c      	mov	r4, r1
 810910e:	d507      	bpl.n	8109120 <__smakebuf_r+0x1c>
 8109110:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8109114:	6023      	str	r3, [r4, #0]
 8109116:	6123      	str	r3, [r4, #16]
 8109118:	2301      	movs	r3, #1
 810911a:	6163      	str	r3, [r4, #20]
 810911c:	b003      	add	sp, #12
 810911e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8109120:	ab01      	add	r3, sp, #4
 8109122:	466a      	mov	r2, sp
 8109124:	f7ff ffc8 	bl	81090b8 <__swhatbuf_r>
 8109128:	9f00      	ldr	r7, [sp, #0]
 810912a:	4605      	mov	r5, r0
 810912c:	4639      	mov	r1, r7
 810912e:	4630      	mov	r0, r6
 8109130:	f7fe febe 	bl	8107eb0 <_malloc_r>
 8109134:	b948      	cbnz	r0, 810914a <__smakebuf_r+0x46>
 8109136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810913a:	059a      	lsls	r2, r3, #22
 810913c:	d4ee      	bmi.n	810911c <__smakebuf_r+0x18>
 810913e:	f023 0303 	bic.w	r3, r3, #3
 8109142:	f043 0302 	orr.w	r3, r3, #2
 8109146:	81a3      	strh	r3, [r4, #12]
 8109148:	e7e2      	b.n	8109110 <__smakebuf_r+0xc>
 810914a:	89a3      	ldrh	r3, [r4, #12]
 810914c:	6020      	str	r0, [r4, #0]
 810914e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8109152:	81a3      	strh	r3, [r4, #12]
 8109154:	9b01      	ldr	r3, [sp, #4]
 8109156:	e9c4 0704 	strd	r0, r7, [r4, #16]
 810915a:	b15b      	cbz	r3, 8109174 <__smakebuf_r+0x70>
 810915c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8109160:	4630      	mov	r0, r6
 8109162:	f000 f81d 	bl	81091a0 <_isatty_r>
 8109166:	b128      	cbz	r0, 8109174 <__smakebuf_r+0x70>
 8109168:	89a3      	ldrh	r3, [r4, #12]
 810916a:	f023 0303 	bic.w	r3, r3, #3
 810916e:	f043 0301 	orr.w	r3, r3, #1
 8109172:	81a3      	strh	r3, [r4, #12]
 8109174:	89a3      	ldrh	r3, [r4, #12]
 8109176:	431d      	orrs	r5, r3
 8109178:	81a5      	strh	r5, [r4, #12]
 810917a:	e7cf      	b.n	810911c <__smakebuf_r+0x18>

0810917c <_fstat_r>:
 810917c:	b538      	push	{r3, r4, r5, lr}
 810917e:	4d07      	ldr	r5, [pc, #28]	@ (810919c <_fstat_r+0x20>)
 8109180:	2300      	movs	r3, #0
 8109182:	4604      	mov	r4, r0
 8109184:	4608      	mov	r0, r1
 8109186:	4611      	mov	r1, r2
 8109188:	602b      	str	r3, [r5, #0]
 810918a:	f7f8 fc34 	bl	81019f6 <_fstat>
 810918e:	1c43      	adds	r3, r0, #1
 8109190:	d102      	bne.n	8109198 <_fstat_r+0x1c>
 8109192:	682b      	ldr	r3, [r5, #0]
 8109194:	b103      	cbz	r3, 8109198 <_fstat_r+0x1c>
 8109196:	6023      	str	r3, [r4, #0]
 8109198:	bd38      	pop	{r3, r4, r5, pc}
 810919a:	bf00      	nop
 810919c:	100008f4 	.word	0x100008f4

081091a0 <_isatty_r>:
 81091a0:	b538      	push	{r3, r4, r5, lr}
 81091a2:	4d06      	ldr	r5, [pc, #24]	@ (81091bc <_isatty_r+0x1c>)
 81091a4:	2300      	movs	r3, #0
 81091a6:	4604      	mov	r4, r0
 81091a8:	4608      	mov	r0, r1
 81091aa:	602b      	str	r3, [r5, #0]
 81091ac:	f7f8 fc33 	bl	8101a16 <_isatty>
 81091b0:	1c43      	adds	r3, r0, #1
 81091b2:	d102      	bne.n	81091ba <_isatty_r+0x1a>
 81091b4:	682b      	ldr	r3, [r5, #0]
 81091b6:	b103      	cbz	r3, 81091ba <_isatty_r+0x1a>
 81091b8:	6023      	str	r3, [r4, #0]
 81091ba:	bd38      	pop	{r3, r4, r5, pc}
 81091bc:	100008f4 	.word	0x100008f4

081091c0 <_init>:
 81091c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81091c2:	bf00      	nop
 81091c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81091c6:	bc08      	pop	{r3}
 81091c8:	469e      	mov	lr, r3
 81091ca:	4770      	bx	lr

081091cc <_fini>:
 81091cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81091ce:	bf00      	nop
 81091d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81091d2:	bc08      	pop	{r3}
 81091d4:	469e      	mov	lr, r3
 81091d6:	4770      	bx	lr
